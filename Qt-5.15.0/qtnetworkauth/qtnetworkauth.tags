<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QAbstractOAuth</name>
        <filename>qabstractoauth.html</filename>
        <base>QObject</base>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariantMap">
            <name>extraTokens</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>extraTokens-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>authorizationUrl</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>authorizationUrl-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QAbstractOAuth::ContentType">
            <name>contentType</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>contentType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NotAuthenticated</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TemporaryCredentialsReceived</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Granted</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RefreshingToken</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Stage</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Stage-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>RequestingTemporaryCredentials</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Stage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RequestingAuthorization</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Stage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RequestingAccessToken</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Stage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RefreshingAccessToken</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Stage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Error</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Error-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NetworkError</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServerError</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OAuthTokenNotFoundError</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OAuthTokenSecretNotFoundError</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OAuthCallbackNotVerified</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ContentType</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>ContentType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>WwwFormUrlEncoded</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>ContentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Json</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>ContentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractOAuth</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>dtor.QAbstractOAuth</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>clientIdentifier</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>clientIdentifier</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClientIdentifier</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>setClientIdentifier</anchor>
            <arglist>(const QString &amp;clientIdentifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>token</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>token</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToken</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>setToken</anchor>
            <arglist>(const QString &amp;token)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAccessManager *</type>
            <name>networkAccessManager</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>networkAccessManager</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNetworkAccessManager</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>setNetworkAccessManager</anchor>
            <arglist>(QNetworkAccessManager *networkAccessManager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractOAuth::Status</type>
            <name>status</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>authorizationUrl</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>authorizationUrl</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAuthorizationUrl</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>setAuthorizationUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>extraTokens</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>extraTokens</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractOAuthReplyHandler *</type>
            <name>replyHandler</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>replyHandler</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReplyHandler</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>setReplyHandler</anchor>
            <arglist>(QAbstractOAuthReplyHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QNetworkReply *</type>
            <name>head</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>head</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QNetworkReply *</type>
            <name>get</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QNetworkReply *</type>
            <name>post</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>post</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QNetworkReply *</type>
            <name>put</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>put</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QNetworkReply *</type>
            <name>deleteResource</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>deleteResource</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepareRequest</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>prepareRequest</anchor>
            <arglist>(QNetworkRequest *request, const QByteArray &amp;verb, const QByteArray &amp;body)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractOAuth::ModifyParametersFunction</type>
            <name>modifyParametersFunction</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>modifyParametersFunction</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModifyParametersFunction</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>setModifyParametersFunction</anchor>
            <arglist>(const QAbstractOAuth::ModifyParametersFunction &amp;modifyParametersFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractOAuth::ContentType</type>
            <name>contentType</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>contentType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentType</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>setContentType</anchor>
            <arglist>(QAbstractOAuth::ContentType contentType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>grant</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>grant</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clientIdentifierChanged</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>clientIdentifier-prop</anchor>
            <arglist>(const QString &amp;clientIdentifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tokenChanged</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>token-prop</anchor>
            <arglist>(const QString &amp;token)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(QAbstractOAuth::Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>authorizationUrlChanged</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>authorizationUrl-prop</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>extraTokensChanged</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>extraTokens-prop</anchor>
            <arglist>(const QVariantMap &amp;tokens)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contentTypeChanged</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>contentType-prop</anchor>
            <arglist>(QAbstractOAuth::ContentType contentType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>authorizeWithBrowser</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>authorizeWithBrowser</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>granted</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>granted</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(QAbstractOAuth::Status status)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QString</type>
            <name>callback</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>callback</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resourceOwnerAuthorization</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>resourceOwnerAuthorization</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>generateRandomString</name>
            <anchorfile>qabstractoauth.html</anchorfile>
            <anchor>generateRandomString</anchor>
            <arglist>(quint8 length)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractOAuth2</name>
        <filename>qabstractoauth2.html</filename>
        <base>QAbstractOAuth</base>
        <member kind="property" type="QString">
            <name>scope</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>scope-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>userAgent</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>userAgent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>clientIdentifierSharedKey</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>clientIdentifierSharedKey-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>state</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QDateTime">
            <name>expiration</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>expiration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractOAuth2</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>QAbstractOAuth2</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractOAuth2</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>QAbstractOAuth2-1</anchor>
            <arglist>(QNetworkAccessManager *manager, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractOAuth2</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>dtor.QAbstractOAuth2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QUrl</type>
            <name>createAuthenticatedUrl</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>createAuthenticatedUrl</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>head</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>head</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>get</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>post</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>post</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>post</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>post-1</anchor>
            <arglist>(const QUrl &amp;url, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>post</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>post-2</anchor>
            <arglist>(const QUrl &amp;url, QHttpMultiPart *multiPart)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>put</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>put</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>put</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>put-1</anchor>
            <arglist>(const QUrl &amp;url, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>put</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>put-2</anchor>
            <arglist>(const QUrl &amp;url, QHttpMultiPart *multiPart)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>deleteResource</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>deleteResource</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>scope</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>scope-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScope</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>scope-prop</anchor>
            <arglist>(const QString &amp;scope)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>userAgent</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>userAgent-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUserAgent</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>userAgent-prop</anchor>
            <arglist>(const QString &amp;userAgent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>responseType</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>responseType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>clientIdentifierSharedKey</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>clientIdentifierSharedKey-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClientIdentifierSharedKey</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>clientIdentifierSharedKey-prop</anchor>
            <arglist>(const QString &amp;clientIdentifierSharedKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>state</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setState</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>(const QString &amp;state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>expirationAt</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>expiration-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>refreshToken</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>refreshToken</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRefreshToken</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>setRefreshToken</anchor>
            <arglist>(const QString &amp;refreshToken)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scopeChanged</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>scope-prop</anchor>
            <arglist>(const QString &amp;scope)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>userAgentChanged</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>userAgent-prop</anchor>
            <arglist>(const QString &amp;userAgent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clientIdentifierSharedKeyChanged</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>clientIdentifierSharedKey-prop</anchor>
            <arglist>(const QString &amp;clientIdentifierSharedKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>(const QString &amp;state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>expirationAtChanged</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>expiration-prop</anchor>
            <arglist>(const QDateTime &amp;expiration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refreshTokenChanged</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>refreshToken-prop</anchor>
            <arglist>(const QString &amp;refreshToken)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(const QString &amp;error, const QString &amp;errorDescription, const QUrl &amp;uri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>authorizationCallbackReceived</name>
            <anchorfile>qabstractoauth2.html</anchorfile>
            <anchor>authorizationCallbackReceived</anchor>
            <arglist>(const QVariantMap &amp;data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractOAuthReplyHandler</name>
        <filename>qabstractoauthreplyhandler.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractOAuthReplyHandler</name>
            <anchorfile>qabstractoauthreplyhandler.html</anchorfile>
            <anchor>QAbstractOAuthReplyHandler</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractOAuthReplyHandler</name>
            <anchorfile>qabstractoauthreplyhandler.html</anchorfile>
            <anchor>dtor.QAbstractOAuthReplyHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>callback</name>
            <anchorfile>qabstractoauthreplyhandler.html</anchorfile>
            <anchor>callback</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>networkReplyFinished</name>
            <anchorfile>qabstractoauthreplyhandler.html</anchorfile>
            <anchor>networkReplyFinished</anchor>
            <arglist>(QNetworkReply *reply) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>callbackReceived</name>
            <anchorfile>qabstractoauthreplyhandler.html</anchorfile>
            <anchor>callbackReceived</anchor>
            <arglist>(const QVariantMap &amp;values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tokensReceived</name>
            <anchorfile>qabstractoauthreplyhandler.html</anchorfile>
            <anchor>tokensReceived</anchor>
            <arglist>(const QVariantMap &amp;tokens)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replyDataReceived</name>
            <anchorfile>qabstractoauthreplyhandler.html</anchorfile>
            <anchor>replyDataReceived</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>callbackDataReceived</name>
            <anchorfile>qabstractoauthreplyhandler.html</anchorfile>
            <anchor>callbackDataReceived</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOAuth1</name>
        <filename>qoauth1.html</filename>
        <base>QAbstractOAuth</base>
        <member kind="enumeration">
            <name>SignatureMethod</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>SignatureMethod-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Hmac_Sha1</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>SignatureMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Rsa_Sha1</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>SignatureMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PlainText</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>SignatureMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOAuth1</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>QOAuth1</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOAuth1</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>QOAuth1-1</anchor>
            <arglist>(QNetworkAccessManager *manager, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOAuth1</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>QOAuth1-2</anchor>
            <arglist>(const QString &amp;clientIdentifier, const QString &amp;clientSharedSecret, QNetworkAccessManager *manager, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>clientSharedSecret</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>clientSharedSecret</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClientSharedSecret</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>setClientSharedSecret</anchor>
            <arglist>(const QString &amp;clientSharedSecret)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;QString, QString&gt;</type>
            <name>clientCredentials</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>clientCredentials</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClientCredentials</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>setClientCredentials</anchor>
            <arglist>(const QPair&lt;QString, QString&gt; &amp;clientCredentials)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClientCredentials</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>setClientCredentials-1</anchor>
            <arglist>(const QString &amp;clientIdentifier, const QString &amp;clientSharedSecret)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>tokenSecret</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>tokenSecret</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTokenSecret</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>setTokenSecret</anchor>
            <arglist>(const QString &amp;tokenSecret)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;QString, QString&gt;</type>
            <name>tokenCredentials</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>tokenCredentials</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTokenCredentials</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>setTokenCredentials</anchor>
            <arglist>(const QPair&lt;QString, QString&gt; &amp;tokenCredentials)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTokenCredentials</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>setTokenCredentials-1</anchor>
            <arglist>(const QString &amp;token, const QString &amp;tokenSecret)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>temporaryCredentialsUrl</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>temporaryCredentialsUrl</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTemporaryCredentialsUrl</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>setTemporaryCredentialsUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>tokenCredentialsUrl</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>tokenCredentialsUrl</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTokenCredentialsUrl</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>setTokenCredentialsUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOAuth1::SignatureMethod</type>
            <name>signatureMethod</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>signatureMethod</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSignatureMethod</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>setSignatureMethod</anchor>
            <arglist>(QOAuth1::SignatureMethod value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>head</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>head</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>get</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>post</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>post</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>put</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>put</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>deleteResource</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>deleteResource</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>grant</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>grant</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>continueGrantWithVerifier</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>continueGrantWithVerifier</anchor>
            <arglist>(const QString &amp;verifier)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>requestTemporaryCredentials</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>requestTemporaryCredentials</anchor>
            <arglist>(QNetworkAccessManager::Operation operation, const QUrl &amp;url, const QVariantMap &amp;parameters)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>requestTokenCredentials</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>requestTokenCredentials</anchor>
            <arglist>(QNetworkAccessManager::Operation operation, const QUrl &amp;url, const QPair&lt;QString, QString&gt; &amp;temporaryToken, const QVariantMap &amp;parameters)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setup</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>setup</anchor>
            <arglist>(QNetworkRequest *request, const QVariantMap &amp;signingParameters, QNetworkAccessManager::Operation operation)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setup</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>setup-1</anchor>
            <arglist>(QNetworkRequest *request, const QVariantMap &amp;signingParameters, const QByteArray &amp;operationVerb)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>nonce</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>nonce</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>generateAuthorizationHeader</name>
            <anchorfile>qoauth1.html</anchorfile>
            <anchor>generateAuthorizationHeader</anchor>
            <arglist>(const QVariantMap &amp;oauthParams)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOAuth1Signature</name>
        <filename>qoauth1signature.html</filename>
        <member kind="enumeration">
            <name>HttpRequestMethod</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>HttpRequestMethod-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Head</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>HttpRequestMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Get</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>HttpRequestMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Put</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>HttpRequestMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Post</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>HttpRequestMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Delete</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>HttpRequestMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Custom</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>HttpRequestMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unknown</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>HttpRequestMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOAuth1Signature</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>QOAuth1Signature</anchor>
            <arglist>(const QUrl &amp;url, QOAuth1Signature::HttpRequestMethod method, const QVariantMap &amp;parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOAuth1Signature</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>QOAuth1Signature-1</anchor>
            <arglist>(const QUrl &amp;url, const QString &amp;clientSharedKey, const QString &amp;tokenSecret, QOAuth1Signature::HttpRequestMethod method, const QVariantMap &amp;parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOAuth1Signature</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>QOAuth1Signature-2</anchor>
            <arglist>(const QOAuth1Signature &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOAuth1Signature</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>QOAuth1Signature-3</anchor>
            <arglist>(QOAuth1Signature &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOAuth1Signature</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>dtor.QOAuth1Signature</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOAuth1Signature::HttpRequestMethod</type>
            <name>httpRequestMethod</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>httpRequestMethod</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHttpRequestMethod</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>setHttpRequestMethod</anchor>
            <arglist>(QOAuth1Signature::HttpRequestMethod method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>customMethodString</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>customMethodString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCustomMethodString</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>setCustomMethodString</anchor>
            <arglist>(const QByteArray &amp;verb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>parameters</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParameters</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>setParameters</anchor>
            <arglist>(const QVariantMap &amp;parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRequestBody</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>addRequestBody</anchor>
            <arglist>(const QUrlQuery &amp;body)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const QString &amp;key, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QString&gt;</type>
            <name>keys</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>take</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>take</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp;key, const QVariant &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>clientSharedKey</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>clientSharedKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClientSharedKey</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>setClientSharedKey</anchor>
            <arglist>(const QString &amp;secret)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>tokenSecret</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>tokenSecret</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTokenSecret</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>setTokenSecret</anchor>
            <arglist>(const QString &amp;secret)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>hmacSha1</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>hmacSha1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>rsaSha1</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>rsaSha1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>plainText</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>plainText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>plainText</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>plainText-1</anchor>
            <arglist>(const QString &amp;clientSharedKey, const QString &amp;tokenSecret)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QOAuth1Signature &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOAuth1Signature &amp;</type>
            <name>operator=</name>
            <anchorfile>qoauth1signature.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QOAuth1Signature &amp;&amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOAuth2AuthorizationCodeFlow</name>
        <filename>qoauth2authorizationcodeflow.html</filename>
        <base>QAbstractOAuth2</base>
        <member kind="property" type="QUrl">
            <name>accessTokenUrl</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>accessTokenUrl-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOAuth2AuthorizationCodeFlow</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>QOAuth2AuthorizationCodeFlow</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOAuth2AuthorizationCodeFlow</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>QOAuth2AuthorizationCodeFlow-1</anchor>
            <arglist>(QNetworkAccessManager *manager, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOAuth2AuthorizationCodeFlow</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>QOAuth2AuthorizationCodeFlow-2</anchor>
            <arglist>(const QString &amp;clientIdentifier, QNetworkAccessManager *manager, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOAuth2AuthorizationCodeFlow</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>QOAuth2AuthorizationCodeFlow-3</anchor>
            <arglist>(const QUrl &amp;authenticateUrl, const QUrl &amp;accessTokenUrl, QNetworkAccessManager *manager, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOAuth2AuthorizationCodeFlow</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>QOAuth2AuthorizationCodeFlow-4</anchor>
            <arglist>(const QString &amp;clientIdentifier, const QUrl &amp;authenticateUrl, const QUrl &amp;accessTokenUrl, QNetworkAccessManager *manager, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOAuth2AuthorizationCodeFlow</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>dtor.QOAuth2AuthorizationCodeFlow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>accessTokenUrl</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>accessTokenUrl</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccessTokenUrl</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>setAccessTokenUrl</anchor>
            <arglist>(const QUrl &amp;accessTokenUrl)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>grant</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>grant</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refreshAccessToken</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>refreshAccessToken</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QUrl</type>
            <name>buildAuthenticateUrl</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>buildAuthenticateUrl</anchor>
            <arglist>(const QVariantMap &amp;parameters)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>requestAccessToken</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>requestAccessToken</anchor>
            <arglist>(const QString &amp;code)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resourceOwnerAuthorization</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>resourceOwnerAuthorization</anchor>
            <arglist>(const QUrl &amp;url, const QVariantMap &amp;parameters) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accessTokenUrlChanged</name>
            <anchorfile>qoauth2authorizationcodeflow.html</anchorfile>
            <anchor>accessTokenUrl-prop</anchor>
            <arglist>(const QUrl &amp;accessTokenUrl)</arglist>
        </member>
    </compound>
</tagfile>
