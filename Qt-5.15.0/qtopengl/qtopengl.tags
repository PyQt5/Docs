<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="namespace">
        <name>QGL</name>
        <filename>qgl.html</filename>
        <member kind="enumeration">
            <name>FormatOption</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DoubleBuffer</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DepthBuffer</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Rgba</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlphaChannel</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AccumBuffer</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StencilBuffer</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StereoBuffers</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirectRendering</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HasOverlay</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SampleBuffers</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeprecatedFunctions</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SingleBuffer</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoDepthBuffer</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColorIndex</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoAlphaChannel</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoAccumBuffer</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoStencilBuffer</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoStereoBuffers</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IndirectRendering</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoOverlay</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoSampleBuffers</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoDeprecatedFunctions</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGL::FormatOption">
            <name>FormatOptions</name>
            <anchorfile>qgl.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGLBuffer</name>
        <filename>qglbuffer.html</filename>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>VertexBuffer</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IndexBuffer</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PixelPackBuffer</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PixelUnpackBuffer</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLBuffer</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>QGLBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLBuffer</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>QGLBuffer-1</anchor>
            <arglist>(QGLBuffer::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLBuffer</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>QGLBuffer-2</anchor>
            <arglist>(const QGLBuffer &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGLBuffer</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>dtor.QGLBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLBuffer &amp;</type>
            <name>operator=</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGLBuffer &amp;other)</arglist>
        </member>
        <member kind="enumeration">
            <name>UsagePattern</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StreamDraw</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StreamRead</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StreamCopy</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticDraw</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticRead</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticCopy</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicDraw</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicRead</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicCopy</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Access</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>Access-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ReadOnly</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteOnly</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadWrite</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLBuffer::Type</type>
            <name>type</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLBuffer::UsagePattern</type>
            <name>usagePattern</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>usagePattern</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUsagePattern</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>setUsagePattern</anchor>
            <arglist>(QGLBuffer::UsagePattern value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>release</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>release-1</anchor>
            <arglist>(QGLBuffer::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bufferId</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>bufferId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>read</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(int offset, void *data, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>write</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(int offset, const void *data, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocate</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>allocate</anchor>
            <arglist>(const void *data, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocate</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>allocate-1</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>map</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(QGLBuffer::Access access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unmap</name>
            <anchorfile>qglbuffer.html</anchorfile>
            <anchor>unmap</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGLColormap</name>
        <filename>qglcolormap.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLColormap</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>QGLColormap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLColormap</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>QGLColormap-1</anchor>
            <arglist>(const QGLColormap &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGLColormap</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>dtor.QGLColormap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLColormap &amp;</type>
            <name>operator=</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGLColormap &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEntries</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>setEntries</anchor>
            <arglist>(int count, const QRgb *colors, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEntry</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>setEntry</anchor>
            <arglist>(int idx, QRgb color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEntry</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>setEntry-1</anchor>
            <arglist>(int idx, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>entryRgb</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>entryRgb</anchor>
            <arglist>(int idx) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>entryColor</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>entryColor</anchor>
            <arglist>(int idx) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>find</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(QRgb color) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>findNearest</name>
            <anchorfile>qglcolormap.html</anchorfile>
            <anchor>findNearest</anchor>
            <arglist>(QRgb color) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGLContext</name>
        <filename>qglcontext.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLContext</name>
            <anchorfile>qglcontext-obsolete.html</anchorfile>
            <anchor>QGLContext</anchor>
            <arglist>(const QGLFormat &amp;format, QPaintDevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLContext</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>QGLContext-1</anchor>
            <arglist>(const QGLFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGLContext</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>dtor.QGLContext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>create</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QGLContext *shareContext)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSharing</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>isSharing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>areSharing</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>areSharing</anchor>
            <arglist>(const QGLContext *context1, const QGLContext *context2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLFormat</type>
            <name>format</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLFormat</type>
            <name>requestedFormat</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>requestedFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QGLFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveToThread</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>moveToThread</anchor>
            <arglist>(QThread *thread)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>makeCurrent</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>makeCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>doneCurrent</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>doneCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>swapBuffers</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>swapBuffers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLFunctions *</type>
            <name>functions</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>functions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>BindOption</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>BindOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoBindOption</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>BindOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvertedYBindOption</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>BindOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MipmapBindOption</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>BindOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PremultipliedAlphaBindOption</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>BindOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinearFilteringBindOption</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>BindOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MemoryManagedBindOption</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>BindOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CanFlipNativePixmapBindOption</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>BindOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TemporarilyCachedBindOption</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>BindOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DefaultBindOption</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>BindOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InternalBindOption</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>BindOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGLContext::BindOption">
            <name>BindOptions</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>BindOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>bindTexture</anchor>
            <arglist>(const QImage &amp;image, GLenum target, GLint format, QGLContext::BindOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>bindTexture-1</anchor>
            <arglist>(const QPixmap &amp;pixmap, GLenum target, GLint format, QGLContext::BindOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>bindTexture-2</anchor>
            <arglist>(const QImage &amp;image, GLenum target, GLint format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>bindTexture-3</anchor>
            <arglist>(const QPixmap &amp;pixmap, GLenum target, GLint format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>bindTexture-4</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deleteTexture</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>deleteTexture</anchor>
            <arglist>(GLuint id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTexture</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>drawTexture</anchor>
            <arglist>(const QRectF &amp;target, GLuint textureId, GLenum textureTarget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTexture</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>drawTexture-1</anchor>
            <arglist>(const QPointF &amp;point, GLuint textureId, GLenum textureTarget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setTextureCacheLimit</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>setTextureCacheLimit</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>textureCacheLimit</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>textureCacheLimit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFunctionPointer</type>
            <name>getProcAddress</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>getProcAddress</anchor>
            <arglist>(const QString &amp;proc) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintDevice *</type>
            <name>device</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>overlayTransparentColor</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>overlayTransparentColor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QGLContext *</type>
            <name>currentContext</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>currentContext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGLContext *</type>
            <name>fromOpenGLContext</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>fromOpenGLContext</anchor>
            <arglist>(QOpenGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>contextHandle</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>contextHandle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>chooseContext</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>chooseContext</anchor>
            <arglist>(const QGLContext *shareContext)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>deviceIsPixmap</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>deviceIsPixmap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>windowCreated</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>windowCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowCreated</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>setWindowCreated</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>initialized</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>initialized</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setInitialized</name>
            <anchorfile>qglcontext.html</anchorfile>
            <anchor>setInitialized</anchor>
            <arglist>(bool on)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGLFormat</name>
        <filename>qglformat.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFormat</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>QGLFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFormat</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>QGLFormat-1</anchor>
            <arglist>(QGL::FormatOptions options, int plane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFormat</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>QGLFormat-2</anchor>
            <arglist>(const QGLFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLFormat &amp;</type>
            <name>operator=</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGLFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGLFormat</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>dtor.QGLFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setDepthBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depthBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>depthBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccumBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setAccumBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>accumBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>accumBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRedBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setRedBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>redBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>redBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGreenBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setGreenBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>greenBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>greenBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlueBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setBlueBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blueBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>blueBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setAlphaBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>alphaBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>alphaBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setStencilBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>stencilBufferSize</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>stencilBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleBuffers</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setSampleBuffers</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>sampleBuffers</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>sampleBuffers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSamples</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setSamples</anchor>
            <arglist>(int numSamples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>samples</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>samples</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSwapInterval</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setSwapInterval</anchor>
            <arglist>(int interval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>swapInterval</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>swapInterval</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>doubleBuffer</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>doubleBuffer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDoubleBuffer</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setDoubleBuffer</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>depth</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepth</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setDepth</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rgba</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>rgba</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRgba</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setRgba</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>alpha</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>alpha</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlpha</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setAlpha</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>accum</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>accum</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccum</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setAccum</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>stencil</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>stencil</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencil</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setStencil</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>stereo</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>stereo</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStereo</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setStereo</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>directRendering</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>directRendering</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirectRendering</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setDirectRendering</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasOverlay</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>hasOverlay</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOverlay</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setOverlay</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>plane</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>plane</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlane</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setPlane</anchor>
            <arglist>(int plane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(QGL::FormatOptions opt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testOption</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>testOption</anchor>
            <arglist>(QGL::FormatOptions opt) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGLFormat</type>
            <name>defaultFormat</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>defaultFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultFormat</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setDefaultFormat</anchor>
            <arglist>(const QGLFormat &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGLFormat</type>
            <name>defaultOverlayFormat</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>defaultOverlayFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultOverlayFormat</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setDefaultOverlayFormat</anchor>
            <arglist>(const QGLFormat &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGL</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>hasOpenGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLOverlays</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>hasOpenGLOverlays</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVersion</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setVersion</anchor>
            <arglist>(int major, int minor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>majorVersion</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>majorVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minorVersion</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>minorVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>OpenGLContextProfile</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLContextProfile-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoProfile</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLContextProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CoreProfile</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLContextProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompatibilityProfile</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLContextProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProfile</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>setProfile</anchor>
            <arglist>(QGLFormat::OpenGLContextProfile profile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLFormat::OpenGLContextProfile</type>
            <name>profile</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>profile</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>OpenGLVersionFlag</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_None</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_1_1</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_1_2</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_1_3</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_1_4</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_1_5</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_2_0</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_2_1</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_ES_Common_Version_1_0</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_ES_CommonLite_Version_1_0</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_ES_Common_Version_1_1</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_ES_CommonLite_Version_1_1</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_ES_Version_2_0</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_3_0</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_3_1</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_3_2</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_3_3</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_4_0</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_4_1</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_4_2</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL_Version_4_3</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGLFormat::OpenGLVersionFlag">
            <name>OpenGLVersionFlags</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>OpenGLVersionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGLFormat::OpenGLVersionFlags</type>
            <name>openGLVersionFlags</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>openGLVersionFlags</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGLFormat</type>
            <name>fromSurfaceFormat</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>fromSurfaceFormat</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSurfaceFormat</type>
            <name>toSurfaceFormat</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>toSurfaceFormat</anchor>
            <arglist>(const QGLFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGLFormat &amp;a, const QGLFormat &amp;b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qglformat.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGLFormat &amp;a, const QGLFormat &amp;b)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGLFramebufferObject</name>
        <filename>qglframebufferobject.html</filename>
        <base>QPaintDevice</base>
        <member kind="enumeration">
            <name>Attachment</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>Attachment-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoAttachment</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CombinedDepthStencil</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Depth</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFramebufferObject</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>QGLFramebufferObject</anchor>
            <arglist>(const QSize &amp;size, GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFramebufferObject</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>QGLFramebufferObject-1</anchor>
            <arglist>(int width, int height, GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFramebufferObject</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>QGLFramebufferObject-2</anchor>
            <arglist>(const QSize &amp;size, QGLFramebufferObject::Attachment attachment, GLenum target, GLenum internal_format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFramebufferObject</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>QGLFramebufferObject-3</anchor>
            <arglist>(int width, int height, QGLFramebufferObject::Attachment attachment, GLenum target, GLenum internal_format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFramebufferObject</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>QGLFramebufferObject-4</anchor>
            <arglist>(const QSize &amp;size, const QGLFramebufferObjectFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFramebufferObject</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>QGLFramebufferObject-5</anchor>
            <arglist>(int width, int height, const QGLFramebufferObjectFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGLFramebufferObject</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>dtor.QGLFramebufferObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLFramebufferObjectFormat</type>
            <name>format</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBound</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>isBound</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>release</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>texture</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>toImage</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>toImage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLFramebufferObject::Attachment</type>
            <name>attachment</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>attachment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>handle</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>bindDefault</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>bindDefault</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLFramebufferObjects</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>hasOpenGLFramebufferObjects</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTexture</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>drawTexture</anchor>
            <arglist>(const QRectF &amp;target, GLuint textureId, GLenum textureTarget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTexture</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>drawTexture-1</anchor>
            <arglist>(const QPointF &amp;point, GLuint textureId, GLenum textureTarget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLFramebufferBlit</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>hasOpenGLFramebufferBlit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>blitFramebuffer</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>blitFramebuffer</anchor>
            <arglist>(QGLFramebufferObject *target, const QRect &amp;targetRect, QGLFramebufferObject *source, const QRect &amp;sourceRect, GLbitfield buffers, GLenum filter)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>metric</name>
            <anchorfile>qglframebufferobject.html</anchorfile>
            <anchor>metric</anchor>
            <arglist>(QPaintDevice::PaintDeviceMetric metric) const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGLFramebufferObjectFormat</name>
        <filename>qglframebufferobjectformat.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFramebufferObjectFormat</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>QGLFramebufferObjectFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFramebufferObjectFormat</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>QGLFramebufferObjectFormat-1</anchor>
            <arglist>(const QGLFramebufferObjectFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLFramebufferObjectFormat &amp;</type>
            <name>operator=</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGLFramebufferObjectFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGLFramebufferObjectFormat</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>dtor.QGLFramebufferObjectFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSamples</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>setSamples</anchor>
            <arglist>(int samples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>samples</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>samples</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipmap</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>setMipmap</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mipmap</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>mipmap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttachment</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>setAttachment</anchor>
            <arglist>(QGLFramebufferObject::Attachment attachment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLFramebufferObject::Attachment</type>
            <name>attachment</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>attachment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureTarget</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>setTextureTarget</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>textureTarget</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>textureTarget</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInternalTextureFormat</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>setInternalTextureFormat</anchor>
            <arglist>(GLenum internalTextureFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>internalTextureFormat</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>internalTextureFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGLFramebufferObjectFormat &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qglframebufferobjectformat.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGLFramebufferObjectFormat &amp;other) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGLFunctions</name>
        <filename>qglfunctions.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFunctions</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>QGLFunctions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLFunctions</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>QGLFunctions-1</anchor>
            <arglist>(const QGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGLFunctions</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>dtor.QGLFunctions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>OpenGLFeature</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Multitexture</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Shaders</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Buffers</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Framebuffers</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendColor</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendEquation</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendEquationSeparate</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendFuncSeparate</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendSubtract</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompressedTextures</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Multisample</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StencilSeparate</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NPOTTextures</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGLFunctions::OpenGLFeature">
            <name>OpenGLFeatures</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLFunctions::OpenGLFeatures</type>
            <name>openGLFeatures</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>openGLFeatures</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasOpenGLFeature</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>hasOpenGLFeature</anchor>
            <arglist>(QGLFunctions::OpenGLFeature feature) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initializeGLFunctions</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>initializeGLFunctions</anchor>
            <arglist>(const QGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glActiveTexture</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glActiveTexture</anchor>
            <arglist>(GLenum texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glAttachShader</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glAttachShader</anchor>
            <arglist>(GLuint program, GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindAttribLocation</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glBindAttribLocation</anchor>
            <arglist>(GLuint program, GLuint index, const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindBuffer</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glBindBuffer</anchor>
            <arglist>(GLenum target, GLuint buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindFramebuffer</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glBindFramebuffer</anchor>
            <arglist>(GLenum target, GLuint framebuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindRenderbuffer</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glBindRenderbuffer</anchor>
            <arglist>(GLenum target, GLuint renderbuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendColor</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glBlendColor</anchor>
            <arglist>(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendEquation</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glBlendEquation</anchor>
            <arglist>(GLenum mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendEquationSeparate</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glBlendEquationSeparate</anchor>
            <arglist>(GLenum modeRGB, GLenum modeAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendFuncSeparate</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glBlendFuncSeparate</anchor>
            <arglist>(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBufferData</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glBufferData</anchor>
            <arglist>(GLenum target, qopengl_GLsizeiptr size, const void *data, GLenum usage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBufferSubData</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glBufferSubData</anchor>
            <arglist>(GLenum target, qopengl_GLintptr offset, qopengl_GLsizeiptr size, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>glCheckFramebufferStatus</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glCheckFramebufferStatus</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glClearDepthf</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glClearDepthf</anchor>
            <arglist>(GLclampf depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCompileShader</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glCompileShader</anchor>
            <arglist>(GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCompressedTexImage2D</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glCompressedTexImage2D</anchor>
            <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCompressedTexSubImage2D</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glCompressedTexSubImage2D</anchor>
            <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>glCreateProgram</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glCreateProgram</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>glCreateShader</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glCreateShader</anchor>
            <arglist>(GLenum type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteBuffers</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glDeleteBuffers</anchor>
            <arglist>(GLsizei n, const GLuint *buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteFramebuffers</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glDeleteFramebuffers</anchor>
            <arglist>(GLsizei n, const GLuint *framebuffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteProgram</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glDeleteProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteRenderbuffers</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glDeleteRenderbuffers</anchor>
            <arglist>(GLsizei n, const GLuint *renderbuffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteShader</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glDeleteShader</anchor>
            <arglist>(GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDepthRangef</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glDepthRangef</anchor>
            <arglist>(GLclampf zNear, GLclampf zFar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDetachShader</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glDetachShader</anchor>
            <arglist>(GLuint program, GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDisableVertexAttribArray</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glDisableVertexAttribArray</anchor>
            <arglist>(GLuint index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glEnableVertexAttribArray</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glEnableVertexAttribArray</anchor>
            <arglist>(GLuint index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFramebufferRenderbuffer</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glFramebufferRenderbuffer</anchor>
            <arglist>(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFramebufferTexture2D</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glFramebufferTexture2D</anchor>
            <arglist>(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenBuffers</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGenBuffers</anchor>
            <arglist>(GLsizei n, GLuint *buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenerateMipmap</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGenerateMipmap</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenFramebuffers</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGenFramebuffers</anchor>
            <arglist>(GLsizei n, GLuint *framebuffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenRenderbuffers</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGenRenderbuffers</anchor>
            <arglist>(GLsizei n, GLuint *renderbuffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetActiveAttrib</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetActiveAttrib</anchor>
            <arglist>(GLuint program, GLuint index, GLsizei bufsize, GLsizei *length, GLint *size, GLenum *type, char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetActiveUniform</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetActiveUniform</anchor>
            <arglist>(GLuint program, GLuint index, GLsizei bufsize, GLsizei *length, GLint *size, GLenum *type, char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetAttachedShaders</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetAttachedShaders</anchor>
            <arglist>(GLuint program, GLsizei maxcount, GLsizei *count, GLuint *shaders)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>glGetAttribLocation</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetAttribLocation</anchor>
            <arglist>(GLuint program, const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetBufferParameteriv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetBufferParameteriv</anchor>
            <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetFramebufferAttachmentParameteriv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetFramebufferAttachmentParameteriv</anchor>
            <arglist>(GLenum target, GLenum attachment, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetProgramiv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetProgramiv</anchor>
            <arglist>(GLuint program, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetProgramInfoLog</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetProgramInfoLog</anchor>
            <arglist>(GLuint program, GLsizei bufsize, GLsizei *length, char *infolog)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetRenderbufferParameteriv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetRenderbufferParameteriv</anchor>
            <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetShaderiv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetShaderiv</anchor>
            <arglist>(GLuint shader, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetShaderInfoLog</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetShaderInfoLog</anchor>
            <arglist>(GLuint shader, GLsizei bufsize, GLsizei *length, char *infolog)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetShaderPrecisionFormat</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetShaderPrecisionFormat</anchor>
            <arglist>(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetShaderSource</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetShaderSource</anchor>
            <arglist>(GLuint shader, GLsizei bufsize, GLsizei *length, char *source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetUniformfv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetUniformfv</anchor>
            <arglist>(GLuint program, GLint location, GLfloat *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetUniformiv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetUniformiv</anchor>
            <arglist>(GLuint program, GLint location, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>glGetUniformLocation</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetUniformLocation</anchor>
            <arglist>(GLuint program, const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetVertexAttribfv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetVertexAttribfv</anchor>
            <arglist>(GLuint index, GLenum pname, GLfloat *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetVertexAttribiv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetVertexAttribiv</anchor>
            <arglist>(GLuint index, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetVertexAttribPointerv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glGetVertexAttribPointerv</anchor>
            <arglist>(GLuint index, GLenum pname, void **pointer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsBuffer</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glIsBuffer</anchor>
            <arglist>(GLuint buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsFramebuffer</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glIsFramebuffer</anchor>
            <arglist>(GLuint framebuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsProgram</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glIsProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsRenderbuffer</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glIsRenderbuffer</anchor>
            <arglist>(GLuint renderbuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsShader</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glIsShader</anchor>
            <arglist>(GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glLinkProgram</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glLinkProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glReleaseShaderCompiler</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glReleaseShaderCompiler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glRenderbufferStorage</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glRenderbufferStorage</anchor>
            <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glSampleCoverage</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glSampleCoverage</anchor>
            <arglist>(GLclampf value, GLboolean invert)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glShaderBinary</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glShaderBinary</anchor>
            <arglist>(GLint n, const GLuint *shaders, GLenum binaryformat, const void *binary, GLint length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glShaderSource</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glShaderSource</anchor>
            <arglist>(GLuint shader, GLsizei count, const char **string, const GLint *length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glStencilFuncSeparate</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glStencilFuncSeparate</anchor>
            <arglist>(GLenum face, GLenum func, GLint ref, GLuint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glStencilMaskSeparate</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glStencilMaskSeparate</anchor>
            <arglist>(GLenum face, GLuint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glStencilOpSeparate</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glStencilOpSeparate</anchor>
            <arglist>(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1f</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform1f</anchor>
            <arglist>(GLint location, GLfloat x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1fv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform1fv</anchor>
            <arglist>(GLint location, GLsizei count, const GLfloat *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1i</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform1i</anchor>
            <arglist>(GLint location, GLint x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1iv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform1iv</anchor>
            <arglist>(GLint location, GLsizei count, const GLint *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2f</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform2f</anchor>
            <arglist>(GLint location, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2fv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform2fv</anchor>
            <arglist>(GLint location, GLsizei count, const GLfloat *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2i</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform2i</anchor>
            <arglist>(GLint location, GLint x, GLint y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2iv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform2iv</anchor>
            <arglist>(GLint location, GLsizei count, const GLint *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3f</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform3f</anchor>
            <arglist>(GLint location, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3fv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform3fv</anchor>
            <arglist>(GLint location, GLsizei count, const GLfloat *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3i</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform3i</anchor>
            <arglist>(GLint location, GLint x, GLint y, GLint z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3iv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform3iv</anchor>
            <arglist>(GLint location, GLsizei count, const GLint *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4f</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform4f</anchor>
            <arglist>(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4fv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform4fv</anchor>
            <arglist>(GLint location, GLsizei count, const GLfloat *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4i</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform4i</anchor>
            <arglist>(GLint location, GLint x, GLint y, GLint z, GLint w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4iv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniform4iv</anchor>
            <arglist>(GLint location, GLsizei count, const GLint *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix2fv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniformMatrix2fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix3fv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniformMatrix3fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix4fv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUniformMatrix4fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUseProgram</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glUseProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glValidateProgram</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glValidateProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib1f</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glVertexAttrib1f</anchor>
            <arglist>(GLuint indx, GLfloat x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib1fv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glVertexAttrib1fv</anchor>
            <arglist>(GLuint indx, const GLfloat *values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib2f</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glVertexAttrib2f</anchor>
            <arglist>(GLuint indx, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib2fv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glVertexAttrib2fv</anchor>
            <arglist>(GLuint indx, const GLfloat *values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib3f</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glVertexAttrib3f</anchor>
            <arglist>(GLuint indx, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib3fv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glVertexAttrib3fv</anchor>
            <arglist>(GLuint indx, const GLfloat *values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib4f</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glVertexAttrib4f</anchor>
            <arglist>(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib4fv</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glVertexAttrib4fv</anchor>
            <arglist>(GLuint indx, const GLfloat *values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttribPointer</name>
            <anchorfile>qglfunctions.html</anchorfile>
            <anchor>glVertexAttribPointer</anchor>
            <arglist>(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *ptr)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGLPixelBuffer</name>
        <filename>qglpixelbuffer.html</filename>
        <base>QPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLPixelBuffer</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>QGLPixelBuffer</anchor>
            <arglist>(const QSize &amp;size, const QGLFormat &amp;format, QGLWidget *shareWidget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLPixelBuffer</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>QGLPixelBuffer-1</anchor>
            <arglist>(int width, int height, const QGLFormat &amp;format, QGLWidget *shareWidget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGLPixelBuffer</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>dtor.QGLPixelBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>makeCurrent</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>makeCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>doneCurrent</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>doneCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLContext *</type>
            <name>context</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>context</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>generateDynamicTexture</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>generateDynamicTexture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bindToDynamicTexture</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>bindToDynamicTexture</anchor>
            <arglist>(GLuint texture_id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseFromDynamicTexture</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>releaseFromDynamicTexture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateDynamicTexture</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>updateDynamicTexture</anchor>
            <arglist>(GLuint texture_id) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>bindTexture</anchor>
            <arglist>(const QImage &amp;image, GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>bindTexture-1</anchor>
            <arglist>(const QPixmap &amp;pixmap, GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>bindTexture-2</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deleteTexture</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>deleteTexture</anchor>
            <arglist>(GLuint texture_id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTexture</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>drawTexture</anchor>
            <arglist>(const QRectF &amp;target, GLuint textureId, GLenum textureTarget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTexture</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>drawTexture-1</anchor>
            <arglist>(const QPointF &amp;point, GLuint textureId, GLenum textureTarget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::HANDLE</type>
            <name>handle</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>toImage</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>toImage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLFormat</type>
            <name>format</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLPbuffers</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>hasOpenGLPbuffers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>metric</name>
            <anchorfile>qglpixelbuffer.html</anchorfile>
            <anchor>metric</anchor>
            <arglist>(QPaintDevice::PaintDeviceMetric metric) const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGLShader</name>
        <filename>qglshader.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>ShaderTypeBit</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Vertex</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Fragment</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Geometry</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGLShader::ShaderTypeBit">
            <name>ShaderType</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLShader</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>QGLShader</anchor>
            <arglist>(QGLShader::ShaderType type, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLShader</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>QGLShader-1</anchor>
            <arglist>(QGLShader::ShaderType type, const QGLContext *context, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGLShader</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>dtor.QGLShader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLShader::ShaderType</type>
            <name>shaderType</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>shaderType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceCode</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>compileSourceCode</anchor>
            <arglist>(const char *source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceCode</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>compileSourceCode-1</anchor>
            <arglist>(const QByteArray &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceCode</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>compileSourceCode-2</anchor>
            <arglist>(const QString &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceFile</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>compileSourceFile</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>sourceCode</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>sourceCode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCompiled</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>isCompiled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>log</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>log</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>shaderId</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>shaderId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLShaders</name>
            <anchorfile>qglshader.html</anchorfile>
            <anchor>hasOpenGLShaders</anchor>
            <arglist>(QGLShader::ShaderType type, const QGLContext *context)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGLShaderProgram</name>
        <filename>qglshaderprogram.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLShaderProgram</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>QGLShaderProgram</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLShaderProgram</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>QGLShaderProgram-1</anchor>
            <arglist>(const QGLContext *context, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGLShaderProgram</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>dtor.QGLShaderProgram</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShader</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>addShader</anchor>
            <arglist>(QGLShader *shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeShader</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>removeShader</anchor>
            <arglist>(QGLShader *shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGLShader *&gt;</type>
            <name>shaders</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>shaders</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceCode</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceCode</anchor>
            <arglist>(QGLShader::ShaderType type, const char *source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceCode</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceCode-1</anchor>
            <arglist>(QGLShader::ShaderType type, const QByteArray &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceCode</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceCode-2</anchor>
            <arglist>(QGLShader::ShaderType type, const QString &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceFile</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceFile</anchor>
            <arglist>(QGLShader::ShaderType type, const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAllShaders</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>removeAllShaders</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>link</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>link</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLinked</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>isLinked</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>log</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>log</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>programId</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>programId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxGeometryOutputVertices</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>maxGeometryOutputVertices</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometryOutputVertexCount</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setGeometryOutputVertexCount</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>geometryOutputVertexCount</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>geometryOutputVertexCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometryInputType</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setGeometryInputType</anchor>
            <arglist>(GLenum inputType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>geometryInputType</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>geometryInputType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometryOutputType</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setGeometryOutputType</anchor>
            <arglist>(GLenum outputType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>geometryOutputType</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>geometryOutputType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindAttributeLocation</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>bindAttributeLocation</anchor>
            <arglist>(const char *name, int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindAttributeLocation</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>bindAttributeLocation-1</anchor>
            <arglist>(const QByteArray &amp;name, int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindAttributeLocation</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>bindAttributeLocation-2</anchor>
            <arglist>(const QString &amp;name, int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeLocation</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>attributeLocation</anchor>
            <arglist>(const char *name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeLocation</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>attributeLocation-1</anchor>
            <arglist>(const QByteArray &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeLocation</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>attributeLocation-2</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue</anchor>
            <arglist>(int location, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-1</anchor>
            <arglist>(int location, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-2</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-3</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-4</anchor>
            <arglist>(int location, const QVector2D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-5</anchor>
            <arglist>(int location, const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-6</anchor>
            <arglist>(int location, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-7</anchor>
            <arglist>(int location, const QColor &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-8</anchor>
            <arglist>(int location, const GLfloat *values, int columns, int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-9</anchor>
            <arglist>(const char *name, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-10</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-11</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-12</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-13</anchor>
            <arglist>(const char *name, const QVector2D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-14</anchor>
            <arglist>(const char *name, const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-15</anchor>
            <arglist>(const char *name, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-16</anchor>
            <arglist>(const char *name, const QColor &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-17</anchor>
            <arglist>(const char *name, const GLfloat *values, int columns, int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray</anchor>
            <arglist>(int location, const GLfloat *values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-1</anchor>
            <arglist>(int location, const QVector2D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-2</anchor>
            <arglist>(int location, const QVector3D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-3</anchor>
            <arglist>(int location, const QVector4D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-4</anchor>
            <arglist>(int location, GLenum type, const void *values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-5</anchor>
            <arglist>(const char *name, const GLfloat *values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-6</anchor>
            <arglist>(const char *name, const QVector2D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-7</anchor>
            <arglist>(const char *name, const QVector3D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-8</anchor>
            <arglist>(const char *name, const QVector4D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-9</anchor>
            <arglist>(const char *name, GLenum type, const void *values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeBuffer</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeBuffer</anchor>
            <arglist>(int location, GLenum type, int offset, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeBuffer</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setAttributeBuffer-1</anchor>
            <arglist>(const char *name, GLenum type, int offset, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>enableAttributeArray</anchor>
            <arglist>(int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>enableAttributeArray-1</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>disableAttributeArray</anchor>
            <arglist>(int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableAttributeArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>disableAttributeArray-1</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>uniformLocation</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>uniformLocation</anchor>
            <arglist>(const char *name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>uniformLocation</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>uniformLocation-1</anchor>
            <arglist>(const QByteArray &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>uniformLocation</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>uniformLocation-2</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue</anchor>
            <arglist>(int location, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-1</anchor>
            <arglist>(int location, GLint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-2</anchor>
            <arglist>(int location, GLuint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-3</anchor>
            <arglist>(int location, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-4</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-5</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-6</anchor>
            <arglist>(int location, const QVector2D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-7</anchor>
            <arglist>(int location, const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-8</anchor>
            <arglist>(int location, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-9</anchor>
            <arglist>(int location, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-10</anchor>
            <arglist>(int location, const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-11</anchor>
            <arglist>(int location, const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-12</anchor>
            <arglist>(int location, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-13</anchor>
            <arglist>(int location, const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-14</anchor>
            <arglist>(int location, const QMatrix2x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-15</anchor>
            <arglist>(int location, const QMatrix2x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-16</anchor>
            <arglist>(int location, const QMatrix2x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-17</anchor>
            <arglist>(int location, const QMatrix3x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-18</anchor>
            <arglist>(int location, const QMatrix3x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-19</anchor>
            <arglist>(int location, const QMatrix3x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-20</anchor>
            <arglist>(int location, const QMatrix4x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-21</anchor>
            <arglist>(int location, const QMatrix4x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-22</anchor>
            <arglist>(int location, const QMatrix4x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-23</anchor>
            <arglist>(int location, const GLfloat [2][2] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-24</anchor>
            <arglist>(int location, const GLfloat [3][3] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-25</anchor>
            <arglist>(int location, const GLfloat [4][4] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-26</anchor>
            <arglist>(int location, const QTransform &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-27</anchor>
            <arglist>(const char *name, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-28</anchor>
            <arglist>(const char *name, GLint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-29</anchor>
            <arglist>(const char *name, GLuint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-30</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-31</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-32</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-33</anchor>
            <arglist>(const char *name, const QVector2D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-34</anchor>
            <arglist>(const char *name, const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-35</anchor>
            <arglist>(const char *name, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-36</anchor>
            <arglist>(const char *name, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-37</anchor>
            <arglist>(const char *name, const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-38</anchor>
            <arglist>(const char *name, const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-39</anchor>
            <arglist>(const char *name, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-40</anchor>
            <arglist>(const char *name, const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-41</anchor>
            <arglist>(const char *name, const QMatrix2x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-42</anchor>
            <arglist>(const char *name, const QMatrix2x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-43</anchor>
            <arglist>(const char *name, const QMatrix2x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-44</anchor>
            <arglist>(const char *name, const QMatrix3x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-45</anchor>
            <arglist>(const char *name, const QMatrix3x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-46</anchor>
            <arglist>(const char *name, const QMatrix3x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-47</anchor>
            <arglist>(const char *name, const QMatrix4x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-48</anchor>
            <arglist>(const char *name, const QMatrix4x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-49</anchor>
            <arglist>(const char *name, const QMatrix4x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-50</anchor>
            <arglist>(const char *name, const GLfloat [2][2] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-51</anchor>
            <arglist>(const char *name, const GLfloat [3][3] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-52</anchor>
            <arglist>(const char *name, const GLfloat [4][4] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-53</anchor>
            <arglist>(const char *name, const QTransform &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray</anchor>
            <arglist>(int location, const GLfloat *values, int count, int tupleSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-1</anchor>
            <arglist>(int location, const GLint *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-2</anchor>
            <arglist>(int location, const GLuint *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-3</anchor>
            <arglist>(int location, const QVector2D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-4</anchor>
            <arglist>(int location, const QVector3D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-5</anchor>
            <arglist>(int location, const QVector4D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-6</anchor>
            <arglist>(int location, const QMatrix2x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-7</anchor>
            <arglist>(int location, const QMatrix2x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-8</anchor>
            <arglist>(int location, const QMatrix2x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-9</anchor>
            <arglist>(int location, const QMatrix3x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-10</anchor>
            <arglist>(int location, const QMatrix3x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-11</anchor>
            <arglist>(int location, const QMatrix3x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-12</anchor>
            <arglist>(int location, const QMatrix4x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-13</anchor>
            <arglist>(int location, const QMatrix4x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-14</anchor>
            <arglist>(int location, const QMatrix4x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-15</anchor>
            <arglist>(const char *name, const GLfloat *values, int count, int tupleSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-16</anchor>
            <arglist>(const char *name, const GLint *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-17</anchor>
            <arglist>(const char *name, const GLuint *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-18</anchor>
            <arglist>(const char *name, const QVector2D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-19</anchor>
            <arglist>(const char *name, const QVector3D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-20</anchor>
            <arglist>(const char *name, const QVector4D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-21</anchor>
            <arglist>(const char *name, const QMatrix2x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-22</anchor>
            <arglist>(const char *name, const QMatrix2x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-23</anchor>
            <arglist>(const char *name, const QMatrix2x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-24</anchor>
            <arglist>(const char *name, const QMatrix3x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-25</anchor>
            <arglist>(const char *name, const QMatrix3x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-26</anchor>
            <arglist>(const char *name, const QMatrix3x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-27</anchor>
            <arglist>(const char *name, const QMatrix4x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-28</anchor>
            <arglist>(const char *name, const QMatrix4x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-29</anchor>
            <arglist>(const char *name, const QMatrix4x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLShaderPrograms</name>
            <anchorfile>qglshaderprogram.html</anchorfile>
            <anchor>hasOpenGLShaderPrograms</anchor>
            <arglist>(const QGLContext *context)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGLWidget</name>
        <filename>qglwidget.html</filename>
        <base>QWidget</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLWidget</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>QGLWidget</anchor>
            <arglist>(QWidget *parent, const QGLWidget *shareWidget, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLWidget</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>QGLWidget-1</anchor>
            <arglist>(QGLContext *context, QWidget *parent, const QGLWidget *shareWidget, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGLWidget</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>QGLWidget-2</anchor>
            <arglist>(const QGLFormat &amp;format, QWidget *parent, const QGLWidget *shareWidget, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGLWidget</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>dtor.QGLWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>qglColor</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>qglColor</anchor>
            <arglist>(const QColor &amp;c) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>qglClearColor</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>qglClearColor</anchor>
            <arglist>(const QColor &amp;c) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSharing</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>isSharing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>makeCurrent</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>makeCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doneCurrent</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>doneCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>doubleBuffer</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>doubleBuffer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swapBuffers</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>swapBuffers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLFormat</type>
            <name>format</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qglwidget-obsolete.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QGLFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGLContext *</type>
            <name>context</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>context</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContext</name>
            <anchorfile>qglwidget-obsolete.html</anchorfile>
            <anchor>setContext</anchor>
            <arglist>(QGLContext *context, const QGLContext *shareContext, bool deleteOldContext)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>renderPixmap</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>renderPixmap</anchor>
            <arglist>(int w, int h, bool useContext)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grabFrameBuffer</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>grabFrameBuffer</anchor>
            <arglist>(bool withAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>makeOverlayCurrent</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>makeOverlayCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QGLContext *</type>
            <name>overlayContext</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>overlayContext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QImage</type>
            <name>convertToGLFormat</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>convertToGLFormat</anchor>
            <arglist>(const QImage &amp;img)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QGLColormap &amp;</type>
            <name>colormap</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>colormap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColormap</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>setColormap</anchor>
            <arglist>(const QGLColormap &amp;cmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderText</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>renderText</anchor>
            <arglist>(int x, int y, const QString &amp;str, const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderText</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>renderText-1</anchor>
            <arglist>(double x, double y, double z, const QString &amp;str, const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>bindTexture-1</anchor>
            <arglist>(const QImage &amp;image, GLenum target, GLint format, QGLContext::BindOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>bindTexture-2</anchor>
            <arglist>(const QPixmap &amp;pixmap, GLenum target, GLint format, QGLContext::BindOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>bindTexture</anchor>
            <arglist>(const QImage &amp;image, GLenum target, GLint format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>bindTexture-3</anchor>
            <arglist>(const QPixmap &amp;pixmap, GLenum target, GLint format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bindTexture</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>bindTexture-4</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deleteTexture</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>deleteTexture</anchor>
            <arglist>(GLuint id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTexture</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>drawTexture</anchor>
            <arglist>(const QRectF &amp;target, GLuint textureId, GLenum textureTarget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTexture</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>drawTexture-1</anchor>
            <arglist>(const QPointF &amp;point, GLuint textureId, GLenum textureTarget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateGL</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>updateGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateOverlayGL</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>updateOverlayGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initializeGL</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>initializeGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeGL</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>resizeGL</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintGL</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>paintGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initializeOverlayGL</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>initializeOverlayGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeOverlayGL</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>resizeOverlayGL</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintOverlayGL</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>paintOverlayGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoBufferSwap</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>setAutoBufferSwap</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>autoBufferSwap</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>autoBufferSwap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>glInit</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>glInit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>glDraw</name>
            <anchorfile>qglwidget.html</anchorfile>
            <anchor>glDraw</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
</tagfile>
