<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="namespace">
        <name>QDBus</name>
        <filename>qdbus.html</filename>
        <member kind="enumeration">
            <name>CallMode</name>
            <anchorfile>qdbus.html</anchorfile>
            <anchor>CallMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoBlock</name>
            <anchorfile>qdbus.html</anchorfile>
            <anchor>CallMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Block</name>
            <anchorfile>qdbus.html</anchorfile>
            <anchor>CallMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockWithGui</name>
            <anchorfile>qdbus.html</anchorfile>
            <anchor>CallMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AutoDetect</name>
            <anchorfile>qdbus.html</anchorfile>
            <anchor>CallMode-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusAbstractAdaptor</name>
        <filename>qdbusabstractadaptor.html</filename>
        <base>QObject</base>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QDBusAbstractAdaptor</name>
            <anchorfile>qdbusabstractadaptor.html</anchorfile>
            <anchor>QDBusAbstractAdaptor</anchor>
            <arglist>(QObject *obj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDBusAbstractAdaptor</name>
            <anchorfile>qdbusabstractadaptor.html</anchorfile>
            <anchor>dtor.QDBusAbstractAdaptor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoRelaySignals</name>
            <anchorfile>qdbusabstractadaptor.html</anchorfile>
            <anchor>setAutoRelaySignals</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>autoRelaySignals</name>
            <anchorfile>qdbusabstractadaptor.html</anchorfile>
            <anchor>autoRelaySignals</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_NOREPLY</name>
            <anchorfile>qdbusabstractadaptor.html</anchorfile>
            <anchor>Q_NOREPLY</anchor>
            <arglist>Q_NOREPLY</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusAbstractInterface</name>
        <filename>qdbusabstractinterface.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDBusAbstractInterface</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>dtor.QDBusAbstractInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusConnection</type>
            <name>connection</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>connection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>service</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>service</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>interface</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>interface</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusError</type>
            <name>lastError</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>lastError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeout</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>setTimeout</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timeout</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>timeout</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage</type>
            <name>call</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>call-1</anchor>
            <arglist>(const QString &amp;method, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage</type>
            <name>call</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>call-3</anchor>
            <arglist>(QDBus::CallMode mode, const QString &amp;method, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage</type>
            <name>callWithArgumentList</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>callWithArgumentList</anchor>
            <arglist>(QDBus::CallMode mode, const QString &amp;method, const QList&lt;QVariant&gt; &amp;args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>callWithCallback</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>callWithCallback</anchor>
            <arglist>(const QString &amp;method, const QList&lt;QVariant&gt; &amp;args, QObject *receiver, const char *returnMethod, const char *errorMethod)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>callWithCallback</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>callWithCallback-1</anchor>
            <arglist>(const QString &amp;method, const QList&lt;QVariant&gt; &amp;args, QObject *receiver, const char *slot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusPendingCall</type>
            <name>asyncCall</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>asyncCall-1</anchor>
            <arglist>(const QString &amp;method, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusPendingCall</type>
            <name>asyncCallWithArgumentList</name>
            <anchorfile>qdbusabstractinterface.html</anchorfile>
            <anchor>asyncCallWithArgumentList</anchor>
            <arglist>(const QString &amp;method, const QList&lt;QVariant&gt; &amp;args)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusAbstractInterfaceBase</name>
        <filename>qdbusabstractinterfacebase.html</filename>
        <base>QObject</base>
    </compound>
    <compound kind="class">
        <name>QDBusArgument</name>
        <filename>qdbusargument.html</filename>
        <member kind="enumeration">
            <name>ElementType</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>ElementType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BasicType</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VariantType</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArrayType</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StructureType</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MapType</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MapEntryType</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownType</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusArgument</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>QDBusArgument</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusArgument</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>QDBusArgument-1</anchor>
            <arglist>(const QDBusArgument &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDBusArgument &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDBusArgument</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>dtor.QDBusArgument</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDBusArgument &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(uchar arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(bool arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(short arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(ushort arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt-4</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt-5</anchor>
            <arglist>(uint arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt-6</anchor>
            <arglist>(qlonglong arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt-7</anchor>
            <arglist>(qulonglong arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt-8</anchor>
            <arglist>(double arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt-9</anchor>
            <arglist>(const QString &amp;arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt-10</anchor>
            <arglist>(const QDBusVariant &amp;arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const QStringList &amp;arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-lt-lt-11</anchor>
            <arglist>(const QByteArray &amp;arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginStructure</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>beginStructure</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endStructure</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>endStructure</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginArray</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>beginArray</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endArray</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>endArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginMap</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>beginMap</anchor>
            <arglist>(int kid, int vid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endMap</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>endMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginMapEntry</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>beginMapEntry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endMapEntry</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>endMapEntry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusArgument::ElementType</type>
            <name>currentType</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>currentType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(uchar &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt-1</anchor>
            <arglist>(bool &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt-2</anchor>
            <arglist>(short &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt-3</anchor>
            <arglist>(ushort &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt-4</anchor>
            <arglist>(int &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt-5</anchor>
            <arglist>(uint &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt-6</anchor>
            <arglist>(qlonglong &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt-7</anchor>
            <arglist>(qulonglong &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt-8</anchor>
            <arglist>(double &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt-9</anchor>
            <arglist>(QString &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt-10</anchor>
            <arglist>(QDBusVariant &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QStringList &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusArgument &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>operator-gt-gt-11</anchor>
            <arglist>(QByteArray &amp;arg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginStructure</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>beginStructure-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endStructure</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>endStructure-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginArray</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>beginArray-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endArray</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>endArray-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginMap</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>beginMap-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endMap</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>endMap-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginMapEntry</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>beginMapEntry-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endMapEntry</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>endMapEntry-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>asVariant</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>asVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>qdbus_cast</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>qdbus_cast</anchor>
            <arglist>(const QDBusArgument &amp;arg, T *)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qDBusRegisterMetaType</name>
            <anchorfile>qdbusargument.html</anchorfile>
            <anchor>qDBusRegisterMetaType</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusConnection</name>
        <filename>qdbusconnection.html</filename>
        <member kind="enumeration">
            <name>BusType</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>BusType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SessionBus</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>BusType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SystemBus</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>BusType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ActivationBus</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>BusType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RegisterOption</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ExportAdaptors</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportScriptableSlots</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportScriptableSignals</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportScriptableProperties</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportScriptableInvokables</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportScriptableContents</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportNonScriptableSlots</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportNonScriptableSignals</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportNonScriptableProperties</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportNonScriptableInvokables</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportNonScriptableContents</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportAllSlots</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportAllSignals</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportAllProperties</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportAllInvokables</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportAllContents</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportChildObjects</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QDBusConnection::RegisterOption">
            <name>RegisterOptions</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>RegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>UnregisterMode</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>UnregisterMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnregisterNode</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>UnregisterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnregisterTree</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>UnregisterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QDBusConnection::VirtualObjectRegisterOption">
            <name>VirtualObjectRegisterOptions</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>VirtualObjectRegisterOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ConnectionCapability</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>ConnectionCapability-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnixFileDescriptorPassing</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>ConnectionCapability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QDBusConnection::ConnectionCapability">
            <name>ConnectionCapabilities</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>ConnectionCapability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusConnection</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>QDBusConnection</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusConnection</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>QDBusConnection-1</anchor>
            <arglist>(const QDBusConnection &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusConnection &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDBusConnection &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDBusConnection</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>dtor.QDBusConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDBusConnection &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isConnected</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>isConnected</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>baseService</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>baseService</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusError</type>
            <name>lastError</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>lastError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusConnection::ConnectionCapabilities</type>
            <name>connectionCapabilities</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>connectionCapabilities</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>send</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>send</anchor>
            <arglist>(const QDBusMessage &amp;message) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>callWithCallback</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>callWithCallback</anchor>
            <arglist>(const QDBusMessage &amp;message, QObject *receiver, const char *returnMethod, const char *errorMethod, int timeout) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>callWithCallback</name>
            <anchorfile>qdbusconnection-obsolete.html</anchorfile>
            <anchor>callWithCallback-1</anchor>
            <arglist>(const QDBusMessage &amp;message, QObject *receiver, const char *returnMethod, int timeout) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage</type>
            <name>call</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>call</anchor>
            <arglist>(const QDBusMessage &amp;message, QDBus::CallMode mode, int timeout) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusPendingCall</type>
            <name>asyncCall</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>asyncCall</anchor>
            <arglist>(const QDBusMessage &amp;message, int timeout) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>connect</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>connect</anchor>
            <arglist>(const QString &amp;service, const QString &amp;path, const QString &amp;interface, const QString &amp;name, QObject *receiver, const char *slot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>connect</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>connect-1</anchor>
            <arglist>(const QString &amp;service, const QString &amp;path, const QString &amp;interface, const QString &amp;name, const QString &amp;signature, QObject *receiver, const char *slot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>connect</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>connect-2</anchor>
            <arglist>(const QString &amp;service, const QString &amp;path, const QString &amp;interface, const QString &amp;name, const QStringList &amp;argumentMatch, const QString &amp;signature, QObject *receiver, const char *slot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>disconnect</anchor>
            <arglist>(const QString &amp;service, const QString &amp;path, const QString &amp;interface, const QString &amp;name, QObject *receiver, const char *slot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>disconnect-1</anchor>
            <arglist>(const QString &amp;service, const QString &amp;path, const QString &amp;interface, const QString &amp;name, const QString &amp;signature, QObject *receiver, const char *slot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>disconnect-2</anchor>
            <arglist>(const QString &amp;service, const QString &amp;path, const QString &amp;interface, const QString &amp;name, const QStringList &amp;argumentMatch, const QString &amp;signature, QObject *receiver, const char *slot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>registerObject</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>registerObject</anchor>
            <arglist>(const QString &amp;path, QObject *object, QDBusConnection::RegisterOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>registerObject</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>registerObject-1</anchor>
            <arglist>(const QString &amp;path, const QString &amp;interface, QObject *object, QDBusConnection::RegisterOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterObject</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>unregisterObject</anchor>
            <arglist>(const QString &amp;path, QDBusConnection::UnregisterMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>objectRegisteredAt</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>objectRegisteredAt</anchor>
            <arglist>(const QString &amp;path) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>registerService</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>registerService</anchor>
            <arglist>(const QString &amp;serviceName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unregisterService</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>unregisterService</anchor>
            <arglist>(const QString &amp;serviceName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusConnectionInterface *</type>
            <name>interface</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>interface</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusConnection</type>
            <name>connectToBus</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>connectToBus</anchor>
            <arglist>(QDBusConnection::BusType type, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusConnection</type>
            <name>connectToBus</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>connectToBus-1</anchor>
            <arglist>(const QString &amp;address, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusConnection</type>
            <name>connectToPeer</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>connectToPeer</anchor>
            <arglist>(const QString &amp;address, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>disconnectFromBus</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>disconnectFromBus</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>disconnectFromPeer</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>disconnectFromPeer</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>localMachineId</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>localMachineId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusConnection</type>
            <name>sessionBus</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>sessionBus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusConnection</type>
            <name>systemBus</name>
            <anchorfile>qdbusconnection.html</anchorfile>
            <anchor>systemBus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusConnection</type>
            <name>sender</name>
            <anchorfile>qdbusconnection-obsolete.html</anchorfile>
            <anchor>sender</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusConnectionInterface</name>
        <filename>qdbusconnectioninterface.html</filename>
        <base>QDBusAbstractInterface</base>
        <member kind="property" type="QDBusReply&lt;QStringList&gt;">
            <name>registeredServiceNames</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>registeredServiceNames-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QDBusReply&lt;QStringList&gt;">
            <name>activatableServiceNames</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>activatableServiceNames-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ServiceQueueOptions</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>ServiceQueueOptions-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DontQueueService</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>ServiceQueueOptions-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QueueService</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>ServiceQueueOptions-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReplaceExistingService</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>ServiceQueueOptions-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ServiceReplacementOptions</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>ServiceReplacementOptions-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DontAllowReplacement</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>ServiceReplacementOptions-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllowReplacement</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>ServiceReplacementOptions-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RegisterServiceReply</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>RegisterServiceReply-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ServiceNotRegistered</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>RegisterServiceReply-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServiceRegistered</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>RegisterServiceReply-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServiceQueued</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>RegisterServiceReply-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;QStringList&gt;</type>
            <name>registeredServiceNames</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>registeredServiceNames-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;QStringList&gt;</type>
            <name>activatableServiceNames</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>activatableServiceNames-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;bool&gt;</type>
            <name>isServiceRegistered</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>isServiceRegistered</anchor>
            <arglist>(const QString &amp;serviceName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;QString&gt;</type>
            <name>serviceOwner</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>serviceOwner</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;bool&gt;</type>
            <name>unregisterService</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>unregisterService</anchor>
            <arglist>(const QString &amp;serviceName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;QDBusConnectionInterface::RegisterServiceReply&gt;</type>
            <name>registerService</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>registerService</anchor>
            <arglist>(const QString &amp;serviceName, QDBusConnectionInterface::ServiceQueueOptions qoption, QDBusConnectionInterface::ServiceReplacementOptions roption)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;uint&gt;</type>
            <name>servicePid</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>servicePid</anchor>
            <arglist>(const QString &amp;serviceName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;uint&gt;</type>
            <name>serviceUid</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>serviceUid</anchor>
            <arglist>(const QString &amp;serviceName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;void&gt;</type>
            <name>startService</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>startService</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>serviceRegistered</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>serviceRegistered</anchor>
            <arglist>(const QString &amp;service)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>serviceUnregistered</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>serviceUnregistered</anchor>
            <arglist>(const QString &amp;service)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>serviceOwnerChanged</name>
            <anchorfile>qdbusconnectioninterface-obsolete.html</anchorfile>
            <anchor>serviceOwnerChanged</anchor>
            <arglist>(const QString &amp;name, const QString &amp;oldOwner, const QString &amp;newOwner)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>callWithCallbackFailed</name>
            <anchorfile>qdbusconnectioninterface.html</anchorfile>
            <anchor>callWithCallbackFailed</anchor>
            <arglist>(const QDBusError &amp;error, const QDBusMessage &amp;call)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusContext</name>
        <filename>qdbuscontext.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusContext</name>
            <anchorfile>qdbuscontext.html</anchorfile>
            <anchor>QDBusContext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDBusContext</name>
            <anchorfile>qdbuscontext.html</anchorfile>
            <anchor>dtor.QDBusContext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>calledFromDBus</name>
            <anchorfile>qdbuscontext.html</anchorfile>
            <anchor>calledFromDBus</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusConnection</type>
            <name>connection</name>
            <anchorfile>qdbuscontext.html</anchorfile>
            <anchor>connection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusMessage &amp;</type>
            <name>message</name>
            <anchorfile>qdbuscontext.html</anchorfile>
            <anchor>message</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDelayedReply</name>
            <anchorfile>qdbuscontext.html</anchorfile>
            <anchor>isDelayedReply</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDelayedReply</name>
            <anchorfile>qdbuscontext.html</anchorfile>
            <anchor>setDelayedReply</anchor>
            <arglist>(bool enable) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sendErrorReply</name>
            <anchorfile>qdbuscontext.html</anchorfile>
            <anchor>sendErrorReply</anchor>
            <arglist>(const QString &amp;name, const QString &amp;msg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sendErrorReply</name>
            <anchorfile>qdbuscontext.html</anchorfile>
            <anchor>sendErrorReply-1</anchor>
            <arglist>(QDBusError::ErrorType type, const QString &amp;msg) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusError</name>
        <filename>qdbuserror.html</filename>
        <member kind="enumeration">
            <name>ErrorType</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Other</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Failed</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoMemory</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServiceUnknown</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoReply</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BadAddress</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotSupported</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LimitsExceeded</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AccessDenied</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoServer</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Timeout</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoNetwork</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AddressInUse</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Disconnected</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidArgs</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownMethod</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TimedOut</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidSignature</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownInterface</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownObject</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownProperty</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PropertyReadOnly</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InternalError</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidService</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidObjectPath</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidInterface</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidMember</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDBusError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusError::ErrorType</type>
            <name>type</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>message</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>message</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qdbuserror.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>(QDBusError::ErrorType error)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusInterface</name>
        <filename>qdbusinterface.html</filename>
        <base>QDBusAbstractInterface</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusInterface</name>
            <anchorfile>qdbusinterface.html</anchorfile>
            <anchor>QDBusInterface-1</anchor>
            <arglist>(const QString &amp;service, const QString &amp;path, const QString &amp;interface, const QDBusConnection &amp;connection, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDBusInterface</name>
            <anchorfile>qdbusinterface.html</anchorfile>
            <anchor>dtor.QDBusInterface</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusMessage</name>
        <filename>qdbusmessage.html</filename>
        <member kind="enumeration">
            <name>MessageType</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>MessageType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InvalidMessage</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>MessageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MethodCallMessage</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>MessageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReplyMessage</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>MessageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ErrorMessage</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>MessageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SignalMessage</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>MessageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusMessage</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>QDBusMessage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusMessage</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>QDBusMessage-1</anchor>
            <arglist>(const QDBusMessage &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDBusMessage &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDBusMessage</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>dtor.QDBusMessage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDBusMessage &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusMessage</type>
            <name>createSignal</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>createSignal</anchor>
            <arglist>(const QString &amp;path, const QString &amp;interface, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusMessage</type>
            <name>createTargetedSignal</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>createTargetedSignal</anchor>
            <arglist>(const QString &amp;service, const QString &amp;path, const QString &amp;interface, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusMessage</type>
            <name>createMethodCall</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>createMethodCall</anchor>
            <arglist>(const QString &amp;service, const QString &amp;path, const QString &amp;interface, const QString &amp;method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusMessage</type>
            <name>createError</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>createError</anchor>
            <arglist>(const QString &amp;name, const QString &amp;msg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusMessage</type>
            <name>createError</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>createError-1</anchor>
            <arglist>(const QDBusError &amp;error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusMessage</type>
            <name>createError</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>createError-2</anchor>
            <arglist>(QDBusError::ErrorType type, const QString &amp;msg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage</type>
            <name>createReply</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>createReply</anchor>
            <arglist>(const QList&lt;QVariant&gt; &amp;arguments) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage</type>
            <name>createReply</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>createReply-1</anchor>
            <arglist>(const QVariant &amp;argument) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage</type>
            <name>createErrorReply</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>createErrorReply</anchor>
            <arglist>(const QString name, const QString &amp;msg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage</type>
            <name>createErrorReply</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>createErrorReply-1</anchor>
            <arglist>(const QDBusError &amp;error) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage</type>
            <name>createErrorReply</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>createErrorReply-2</anchor>
            <arglist>(QDBusError::ErrorType type, const QString &amp;msg) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>service</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>service</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>interface</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>interface</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>member</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>member</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorName</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>errorName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorMessage</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>errorMessage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage::MessageType</type>
            <name>type</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>signature</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>signature</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReplyRequired</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>isReplyRequired</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDelayedReply</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>setDelayedReply</anchor>
            <arglist>(bool enable) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDelayedReply</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>isDelayedReply</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoStartService</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>setAutoStartService</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoStartService</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>autoStartService</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInteractiveAuthorizationAllowed</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>setInteractiveAuthorizationAllowed</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInteractiveAuthorizationAllowed</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>isInteractiveAuthorizationAllowed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setArguments</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>setArguments</anchor>
            <arglist>(const QList&lt;QVariant&gt; &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QVariant&gt;</type>
            <name>arguments</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>arguments</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdbusmessage.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const QVariant &amp;arg)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusObjectPath</name>
        <filename>qdbusobjectpath.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusObjectPath</name>
            <anchorfile>qdbusobjectpath.html</anchorfile>
            <anchor>QDBusObjectPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusObjectPath</name>
            <anchorfile>qdbusobjectpath.html</anchorfile>
            <anchor>QDBusObjectPath-1</anchor>
            <arglist>(const char *path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusObjectPath</name>
            <anchorfile>qdbusobjectpath.html</anchorfile>
            <anchor>QDBusObjectPath-2</anchor>
            <arglist>(QLatin1String path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusObjectPath</name>
            <anchorfile>qdbusobjectpath.html</anchorfile>
            <anchor>QDBusObjectPath-3</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdbusobjectpath.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDBusObjectPath &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qdbusobjectpath.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qdbusobjectpath.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qdbusobjectpath.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusPendingCall</name>
        <filename>qdbuspendingcall.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusPendingCall</name>
            <anchorfile>qdbuspendingcall.html</anchorfile>
            <anchor>QDBusPendingCall</anchor>
            <arglist>(const QDBusPendingCall &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDBusPendingCall</name>
            <anchorfile>qdbuspendingcall.html</anchorfile>
            <anchor>dtor.QDBusPendingCall</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusPendingCall &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbuspendingcall.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDBusPendingCall &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdbuspendingcall.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDBusPendingCall &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusPendingCall</type>
            <name>fromError</name>
            <anchorfile>qdbuspendingcall.html</anchorfile>
            <anchor>fromError</anchor>
            <arglist>(const QDBusError &amp;error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDBusPendingCall</type>
            <name>fromCompletedCall</name>
            <anchorfile>qdbuspendingcall.html</anchorfile>
            <anchor>fromCompletedCall</anchor>
            <arglist>(const QDBusMessage &amp;msg)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusPendingCallWatcher</name>
        <filename>qdbuspendingcallwatcher.html</filename>
        <base>QObject</base>
        <base>QDBusPendingCall</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusPendingCallWatcher</name>
            <anchorfile>qdbuspendingcallwatcher.html</anchorfile>
            <anchor>QDBusPendingCallWatcher</anchor>
            <arglist>(const QDBusPendingCall &amp;call, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDBusPendingCallWatcher</name>
            <anchorfile>qdbuspendingcallwatcher.html</anchorfile>
            <anchor>dtor.QDBusPendingCallWatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qdbuspendingcallwatcher.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>waitForFinished</name>
            <anchorfile>qdbuspendingcallwatcher.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qdbuspendingcallwatcher.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QDBusPendingCallWatcher *self)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusPendingReply</name>
        <filename>qdbuspendingreply.html</filename>
        <base>QDBusPendingCall</base>
        <member kind="enumeration">
            <name>anonymous</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>anonymous-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Count</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>anonymous-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusPendingReply</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>QDBusPendingReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusPendingReply</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>QDBusPendingReply-1</anchor>
            <arglist>(const QDBusPendingReply&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusPendingReply</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>QDBusPendingReply-2</anchor>
            <arglist>(const QDBusPendingCall &amp;call)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusPendingReply</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>QDBusPendingReply-3</anchor>
            <arglist>(const QDBusMessage &amp;message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusPendingReply&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QDBusPendingReply&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusPendingReply&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDBusPendingCall &amp;call)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusPendingReply&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QDBusMessage &amp;message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>argumentAt</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>argumentAt</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>waitForFinished</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isError</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>isError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusError</type>
            <name>error</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusMessage</type>
            <name>reply</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>reply</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T1</type>
            <name>value</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T1</type>
            <name>operator T1</name>
            <anchorfile>qdbuspendingreply.html</anchorfile>
            <anchor>operator-T1</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusPendingReplyData</name>
        <filename>qdbuspendingreplydata.html</filename>
        <base>QDBusPendingCall</base>
    </compound>
    <compound kind="class">
        <name>QDBusReply</name>
        <filename>qdbusreply.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusReply</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>QDBusReply</anchor>
            <arglist>(const QDBusMessage &amp;reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusReply</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>QDBusReply-1</anchor>
            <arglist>(const QDBusReply&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QDBusMessage &amp;reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusReply</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>QDBusReply-2</anchor>
            <arglist>(const QDBusPendingCall &amp;pcall)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDBusPendingCall &amp;pcall)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusReply</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>QDBusReply-3</anchor>
            <arglist>(const QDBusPendingReply&lt;T&gt; &amp;reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusReply</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>QDBusReply-4</anchor>
            <arglist>(const QDBusError &amp;error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QDBusError &amp;dbusError)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>operator-eq-3</anchor>
            <arglist>(const QDBusReply&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusError &amp;</type>
            <name>error</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>error-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QDBusError &amp;</type>
            <name>error</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply::Type</type>
            <name>value</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusReply::Type</type>
            <name>operator QDBusReply::Type</name>
            <anchorfile>qdbusreply.html</anchorfile>
            <anchor>operator-QDBusReply::Type</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusServer</name>
        <filename>qdbusserver.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusServer</name>
            <anchorfile>qdbusserver.html</anchorfile>
            <anchor>QDBusServer</anchor>
            <arglist>(const QString &amp;address, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusServer</name>
            <anchorfile>qdbusserver.html</anchorfile>
            <anchor>QDBusServer-1</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDBusServer</name>
            <anchorfile>qdbusserver.html</anchorfile>
            <anchor>dtor.QDBusServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isConnected</name>
            <anchorfile>qdbusserver.html</anchorfile>
            <anchor>isConnected</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusError</type>
            <name>lastError</name>
            <anchorfile>qdbusserver.html</anchorfile>
            <anchor>lastError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>address</name>
            <anchorfile>qdbusserver.html</anchorfile>
            <anchor>address</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnonymousAuthenticationAllowed</name>
            <anchorfile>qdbusserver.html</anchorfile>
            <anchor>setAnonymousAuthenticationAllowed</anchor>
            <arglist>(bool value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAnonymousAuthenticationAllowed</name>
            <anchorfile>qdbusserver.html</anchorfile>
            <anchor>isAnonymousAuthenticationAllowed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>newConnection</name>
            <anchorfile>qdbusserver.html</anchorfile>
            <anchor>newConnection</anchor>
            <arglist>(const QDBusConnection &amp;connection)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusServiceWatcher</name>
        <filename>qdbusservicewatcher.html</filename>
        <base>QObject</base>
        <member kind="property" type="QStringList">
            <name>watchedServices</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>watchedServices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="WatchMode">
            <name>watchMode</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>watchMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>WatchModeFlag</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>WatchModeFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>WatchForRegistration</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>WatchModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WatchForUnregistration</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>WatchModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WatchForOwnerChange</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>WatchModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QDBusServiceWatcher::WatchModeFlag">
            <name>WatchMode</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>WatchModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusServiceWatcher</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>QDBusServiceWatcher</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusServiceWatcher</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>QDBusServiceWatcher-1</anchor>
            <arglist>(const QString &amp;service, const QDBusConnection &amp;connection, QDBusServiceWatcher::WatchMode watchMode, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDBusServiceWatcher</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>dtor.QDBusServiceWatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>watchedServices</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>watchedServices</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWatchedServices</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>setWatchedServices</anchor>
            <arglist>(const QStringList &amp;services)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addWatchedService</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>addWatchedService</anchor>
            <arglist>(const QString &amp;newService)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeWatchedService</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>removeWatchedService</anchor>
            <arglist>(const QString &amp;service)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusServiceWatcher::WatchMode</type>
            <name>watchMode</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>watchMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWatchMode</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>watchMode-prop</anchor>
            <arglist>(QDBusServiceWatcher::WatchMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusConnection</type>
            <name>connection</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>connection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConnection</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>setConnection</anchor>
            <arglist>(const QDBusConnection &amp;connection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>serviceRegistered</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>serviceRegistered</anchor>
            <arglist>(const QString &amp;serviceName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>serviceUnregistered</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>serviceUnregistered</anchor>
            <arglist>(const QString &amp;serviceName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>serviceOwnerChanged</name>
            <anchorfile>qdbusservicewatcher.html</anchorfile>
            <anchor>serviceOwnerChanged</anchor>
            <arglist>(const QString &amp;serviceName, const QString &amp;oldOwner, const QString &amp;newOwner)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusSignature</name>
        <filename>qdbussignature.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusSignature</name>
            <anchorfile>qdbussignature.html</anchorfile>
            <anchor>QDBusSignature</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusSignature</name>
            <anchorfile>qdbussignature.html</anchorfile>
            <anchor>QDBusSignature-1</anchor>
            <arglist>(const char *signature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusSignature</name>
            <anchorfile>qdbussignature.html</anchorfile>
            <anchor>QDBusSignature-2</anchor>
            <arglist>(QLatin1String signature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusSignature</name>
            <anchorfile>qdbussignature.html</anchorfile>
            <anchor>QDBusSignature-3</anchor>
            <arglist>(const QString &amp;signature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdbussignature.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDBusSignature &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSignature</name>
            <anchorfile>qdbussignature.html</anchorfile>
            <anchor>setSignature</anchor>
            <arglist>(const QString &amp;signature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>signature</name>
            <anchorfile>qdbussignature.html</anchorfile>
            <anchor>signature</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusUnixFileDescriptor</name>
        <filename>qdbusunixfiledescriptor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusUnixFileDescriptor</name>
            <anchorfile>qdbusunixfiledescriptor.html</anchorfile>
            <anchor>QDBusUnixFileDescriptor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusUnixFileDescriptor</name>
            <anchorfile>qdbusunixfiledescriptor.html</anchorfile>
            <anchor>QDBusUnixFileDescriptor-1</anchor>
            <arglist>(int fileDescriptor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusUnixFileDescriptor</name>
            <anchorfile>qdbusunixfiledescriptor.html</anchorfile>
            <anchor>QDBusUnixFileDescriptor-2</anchor>
            <arglist>(const QDBusUnixFileDescriptor &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusUnixFileDescriptor &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbusunixfiledescriptor.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QDBusUnixFileDescriptor &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDBusUnixFileDescriptor &amp;</type>
            <name>operator=</name>
            <anchorfile>qdbusunixfiledescriptor.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDBusUnixFileDescriptor &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDBusUnixFileDescriptor</name>
            <anchorfile>qdbusunixfiledescriptor.html</anchorfile>
            <anchor>dtor.QDBusUnixFileDescriptor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdbusunixfiledescriptor.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDBusUnixFileDescriptor &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qdbusunixfiledescriptor.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>fileDescriptor</name>
            <anchorfile>qdbusunixfiledescriptor.html</anchorfile>
            <anchor>fileDescriptor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileDescriptor</name>
            <anchorfile>qdbusunixfiledescriptor.html</anchorfile>
            <anchor>setFileDescriptor</anchor>
            <arglist>(int fileDescriptor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isSupported</name>
            <anchorfile>qdbusunixfiledescriptor.html</anchorfile>
            <anchor>isSupported</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusVariant</name>
        <filename>qdbusvariant.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusVariant</name>
            <anchorfile>qdbusvariant.html</anchorfile>
            <anchor>QDBusVariant</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusVariant</name>
            <anchorfile>qdbusvariant.html</anchorfile>
            <anchor>QDBusVariant-1</anchor>
            <arglist>(const QVariant &amp;variant)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdbusvariant.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDBusVariant &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVariant</name>
            <anchorfile>qdbusvariant.html</anchorfile>
            <anchor>setVariant</anchor>
            <arglist>(const QVariant &amp;variant)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>variant</name>
            <anchorfile>qdbusvariant.html</anchorfile>
            <anchor>variant</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDBusVirtualObject</name>
        <filename>qdbusvirtualobject.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDBusVirtualObject</name>
            <anchorfile>qdbusvirtualobject.html</anchorfile>
            <anchor>QDBusVirtualObject</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDBusVirtualObject</name>
            <anchorfile>qdbusvirtualobject.html</anchorfile>
            <anchor>dtor.QDBusVirtualObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>introspect</name>
            <anchorfile>qdbusvirtualobject.html</anchorfile>
            <anchor>introspect</anchor>
            <arglist>(const QString &amp;path) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>handleMessage</name>
            <anchorfile>qdbusvirtualobject.html</anchorfile>
            <anchor>handleMessage</anchor>
            <arglist>(const QDBusMessage &amp;message, const QDBusConnection &amp;connection) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaTypeId</name>
        <filename>qmetatypeid.html</filename>
    </compound>
    <compound kind="class">
        <name>QMetaTypeId2</name>
        <filename>qmetatypeid2.html</filename>
    </compound>
    <compound kind="class">
        <name>QTypeInfo</name>
        <filename>qtypeinfo.html</filename>
    </compound>
</tagfile>
