<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QtScxml.EventConnection</name>
        <filename>qml-qtscxml-eventconnection.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>occurred</name>
            <anchorfile>qml-qtscxml-eventconnection.html</anchorfile>
            <anchor>occurred-signal</anchor>
            <arglist>( event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtScxml.InvokedServices</name>
        <filename>qml-qtscxml-invokedservices.html</filename>
    </compound>
    <compound kind="class">
        <name>QScxmlCompiler</name>
        <filename>qscxmlcompiler.html</filename>
        <class>QScxmlCompiler::Loader</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlCompiler</name>
            <anchorfile>qscxmlcompiler.html</anchorfile>
            <anchor>QScxmlCompiler</anchor>
            <arglist>(QXmlStreamReader *reader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScxmlCompiler</name>
            <anchorfile>qscxmlcompiler.html</anchorfile>
            <anchor>dtor.QScxmlCompiler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qscxmlcompiler.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qscxmlcompiler.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlCompiler::Loader *</type>
            <name>loader</name>
            <anchorfile>qscxmlcompiler.html</anchorfile>
            <anchor>loader</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoader</name>
            <anchorfile>qscxmlcompiler.html</anchorfile>
            <anchor>setLoader</anchor>
            <arglist>(QScxmlCompiler::Loader *newLoader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlStateMachine *</type>
            <name>compile</name>
            <anchorfile>qscxmlcompiler.html</anchorfile>
            <anchor>compile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QScxmlError&gt;</type>
            <name>errors</name>
            <anchorfile>qscxmlcompiler.html</anchorfile>
            <anchor>errors</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlCompiler::Loader</name>
        <filename>qscxmlcompiler-loader.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Loader</name>
            <anchorfile>qscxmlcompiler-loader.html</anchorfile>
            <anchor>Loader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~Loader</name>
            <anchorfile>qscxmlcompiler-loader.html</anchorfile>
            <anchor>dtor.Loader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QByteArray</type>
            <name>load</name>
            <anchorfile>qscxmlcompiler-loader.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QString &amp;name, const QString &amp;baseDir, QStringList *errors) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlCppDataModel</name>
        <filename>qscxmlcppdatamodel.html</filename>
        <base>QScxmlDataModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlCppDataModel</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>QScxmlCppDataModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setup</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>setup</anchor>
            <arglist>(const QVariantMap &amp;initialDataValues) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>evaluateAssignment</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>evaluateAssignment</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>evaluateInitialization</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>evaluateInitialization</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>evaluateForeach</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>evaluateForeach</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok, QScxmlDataModel::ForeachLoopBody *body) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setScxmlEvent</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>setScxmlEvent</anchor>
            <arglist>(const QScxmlEvent &amp;event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QScxmlEvent &amp;</type>
            <name>scxmlEvent</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>scxmlEvent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>scxmlProperty</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>scxmlProperty</anchor>
            <arglist>(const QString &amp;name) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasScxmlProperty</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>hasScxmlProperty</anchor>
            <arglist>(const QString &amp;name) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setScxmlProperty</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>setScxmlProperty</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value, const QString &amp;context) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inState</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>inState</anchor>
            <arglist>(const QString &amp;stateName) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlDataModel</name>
        <filename>qscxmldatamodel.html</filename>
        <base>QObject</base>
        <member kind="property" type="QScxmlStateMachine*">
            <name>stateMachine</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>stateMachine-prop</anchor>
            <arglist></arglist>
        </member>
        <class>QScxmlDataModel::ForeachLoopBody</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlDataModel</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>QScxmlDataModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStateMachine</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>setStateMachine</anchor>
            <arglist>(QScxmlStateMachine *stateMachine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlStateMachine *</type>
            <name>stateMachine</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>stateMachine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>setup</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>setup</anchor>
            <arglist>(const QVariantMap &amp;initialDataValues) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>evaluateToString</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>evaluateToString</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>evaluateToBool</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>evaluateToBool</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVariant</type>
            <name>evaluateToVariant</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>evaluateToVariant</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>evaluateToVoid</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>evaluateToVoid</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>evaluateAssignment</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>evaluateAssignment</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>evaluateInitialization</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>evaluateInitialization</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>evaluateForeach</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>evaluateForeach</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok, QScxmlDataModel::ForeachLoopBody *body) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setScxmlEvent</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>setScxmlEvent</anchor>
            <arglist>(const QScxmlEvent &amp;event) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVariant</type>
            <name>scxmlProperty</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>scxmlProperty</anchor>
            <arglist>(const QString &amp;name) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>hasScxmlProperty</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>hasScxmlProperty</anchor>
            <arglist>(const QString &amp;name) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>setScxmlProperty</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>setScxmlProperty</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value, const QString &amp;context) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateMachineChanged</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>stateMachine-prop</anchor>
            <arglist>(QScxmlStateMachine *stateMachine)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QScxmlDataModel</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>QScxmlDataModel-1</anchor>
            <arglist>(QScxmlDataModelPrivate &amp;dd, QObject *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlDataModel::ForeachLoopBody</name>
        <filename>qscxmldatamodel-foreachloopbody.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>ForeachLoopBody</name>
            <anchorfile>qscxmldatamodel-foreachloopbody.html</anchorfile>
            <anchor>ForeachLoopBody-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~ForeachLoopBody</name>
            <anchorfile>qscxmldatamodel-foreachloopbody.html</anchorfile>
            <anchor>dtor.ForeachLoopBody</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qscxmldatamodel-foreachloopbody.html</anchorfile>
            <anchor>run</anchor>
            <arglist>(bool *ok) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlDynamicScxmlServiceFactory</name>
        <filename>qscxmldynamicscxmlservicefactory.html</filename>
        <base>QScxmlInvokableServiceFactory</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlDynamicScxmlServiceFactory</name>
            <anchorfile>qscxmldynamicscxmlservicefactory.html</anchorfile>
            <anchor>QScxmlDynamicScxmlServiceFactory</anchor>
            <arglist>(const QScxmlExecutableContent::InvokeInfo &amp;invokeInfo, const QVector&lt;QScxmlExecutableContent::StringId&gt; &amp;names, const QVector&lt;QScxmlExecutableContent::ParameterInfo&gt; &amp;parameters, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QScxmlInvokableService *</type>
            <name>invoke</name>
            <anchorfile>qscxmldynamicscxmlservicefactory.html</anchorfile>
            <anchor>invoke</anchor>
            <arglist>(QScxmlStateMachine *parentStateMachine) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlEcmaScriptDataModel</name>
        <filename>qscxmlecmascriptdatamodel.html</filename>
        <base>QScxmlDataModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlEcmaScriptDataModel</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>QScxmlEcmaScriptDataModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setup</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>setup</anchor>
            <arglist>(const QVariantMap &amp;initialDataValues) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>evaluateToString</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>evaluateToString</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>evaluateToBool</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>evaluateToBool</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>evaluateToVariant</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>evaluateToVariant</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>evaluateToVoid</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>evaluateToVoid</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>evaluateAssignment</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>evaluateAssignment</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>evaluateInitialization</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>evaluateInitialization</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>evaluateForeach</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>evaluateForeach</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok, QScxmlDataModel::ForeachLoopBody *body) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setScxmlEvent</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>setScxmlEvent</anchor>
            <arglist>(const QScxmlEvent &amp;event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>scxmlProperty</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>scxmlProperty</anchor>
            <arglist>(const QString &amp;name) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasScxmlProperty</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>hasScxmlProperty</anchor>
            <arglist>(const QString &amp;name) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setScxmlProperty</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>setScxmlProperty</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value, const QString &amp;context) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlError</name>
        <filename>qscxmlerror.html</filename>
        <member kind="property" type="bool">
            <name>valid</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>valid-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>fileName</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>line</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>line-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>column</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>column-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>description</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>description-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlError</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>QScxmlError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlError</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>QScxmlError-1</anchor>
            <arglist>(const QString &amp;fileName, int line, int column, const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlError</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>QScxmlError-2</anchor>
            <arglist>(const QScxmlError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlError &amp;</type>
            <name>operator=</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QScxmlError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScxmlError</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>dtor.QScxmlError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>line</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>line</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlEvent</name>
        <filename>qscxmlevent.html</filename>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="EventType">
            <name>eventType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>eventType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>scxmlType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>scxmlType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>sendId</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>sendId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>origin</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>originType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>originType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>invokeId</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>invokeId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>delay</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>delay-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>data</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>data-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>errorEvent</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>errorEvent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>errorMessage</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>errorMessage-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlEvent</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>QScxmlEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScxmlEvent</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>dtor.QScxmlEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlEvent &amp;</type>
            <name>operator=</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QScxmlEvent &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlEvent</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>QScxmlEvent-1</anchor>
            <arglist>(const QScxmlEvent &amp;other)</arglist>
        </member>
        <member kind="enumeration">
            <name>EventType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>EventType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PlatformEvent</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InternalEvent</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExternalEvent</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlEvent::EventType</type>
            <name>eventType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>eventType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEventType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setEventType</anchor>
            <arglist>(const QScxmlEvent::EventType &amp;type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>scxmlType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>scxmlType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sendId</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>sendId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSendId</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setSendId</anchor>
            <arglist>(const QString &amp;sendid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>origin</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>origin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrigin</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setOrigin</anchor>
            <arglist>(const QString &amp;origin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>originType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>originType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOriginType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setOriginType</anchor>
            <arglist>(const QString &amp;origintype)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>invokeId</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>invokeId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInvokeId</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setInvokeId</anchor>
            <arglist>(const QString &amp;invokeid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>delay</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>delay</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDelay</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setDelay</anchor>
            <arglist>(int delayInMiliSecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>data</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QVariant &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isErrorEvent</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>isErrorEvent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorMessage</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>errorMessage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setErrorMessage</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setErrorMessage</anchor>
            <arglist>(const QString &amp;message)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QScxmlExecutableContent</name>
        <filename>qscxmlexecutablecontent.html</filename>
        <member kind="typedef" type="">
            <name>ContainerId</name>
            <anchorfile>qscxmlexecutablecontent.html</anchorfile>
            <anchor>ContainerId-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>anonymous</name>
            <anchorfile>qscxmlexecutablecontent.html</anchorfile>
            <anchor>anonymous-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoContainer</name>
            <anchorfile>qscxmlexecutablecontent.html</anchorfile>
            <anchor>anonymous-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoString</name>
            <anchorfile>qscxmlexecutablecontent.html</anchorfile>
            <anchor>anonymous-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoInstruction</name>
            <anchorfile>qscxmlexecutablecontent.html</anchorfile>
            <anchor>anonymous-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoEvaluator</name>
            <anchorfile>qscxmlexecutablecontent.html</anchorfile>
            <anchor>anonymous-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>StringId</name>
            <anchorfile>qscxmlexecutablecontent.html</anchorfile>
            <anchor>StringId-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>InstructionId</name>
            <anchorfile>qscxmlexecutablecontent.html</anchorfile>
            <anchor>InstructionId-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>EvaluatorId</name>
            <anchorfile>qscxmlexecutablecontent.html</anchorfile>
            <anchor>EvaluatorId-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>QScxmlExecutableContent::EvaluatorInfo</class>
        <class>QScxmlExecutableContent::AssignmentInfo</class>
        <class>QScxmlExecutableContent::ForeachInfo</class>
        <class>QScxmlExecutableContent::ParameterInfo</class>
        <class>QScxmlExecutableContent::InvokeInfo</class>
    </compound>
    <compound kind="class">
        <name>QScxmlExecutableContent::AssignmentInfo</name>
        <filename>qscxmlexecutablecontent-assignmentinfo.html</filename>
    </compound>
    <compound kind="class">
        <name>QScxmlExecutableContent::EvaluatorInfo</name>
        <filename>qscxmlexecutablecontent-evaluatorinfo.html</filename>
    </compound>
    <compound kind="class">
        <name>QScxmlExecutableContent::ForeachInfo</name>
        <filename>qscxmlexecutablecontent-foreachinfo.html</filename>
    </compound>
    <compound kind="class">
        <name>QScxmlExecutableContent::InvokeInfo</name>
        <filename>qscxmlexecutablecontent-invokeinfo.html</filename>
    </compound>
    <compound kind="class">
        <name>QScxmlExecutableContent::ParameterInfo</name>
        <filename>qscxmlexecutablecontent-parameterinfo.html</filename>
    </compound>
    <compound kind="class">
        <name>QScxmlInvokableService</name>
        <filename>qscxmlinvokableservice.html</filename>
        <base>QObject</base>
        <member kind="property" type="QScxmlStateMachine*">
            <name>parentStateMachine</name>
            <anchorfile>qscxmlinvokableservice.html</anchorfile>
            <anchor>parentStateMachine-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>id</name>
            <anchorfile>qscxmlinvokableservice.html</anchorfile>
            <anchor>id-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qscxmlinvokableservice.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlStateMachine *</type>
            <name>parentStateMachine</name>
            <anchorfile>qscxmlinvokableservice.html</anchorfile>
            <anchor>parentStateMachine-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>start</name>
            <anchorfile>qscxmlinvokableservice.html</anchorfile>
            <anchor>start</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>id</name>
            <anchorfile>qscxmlinvokableservice.html</anchorfile>
            <anchor>id-prop</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>name</name>
            <anchorfile>qscxmlinvokableservice.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>postEvent</name>
            <anchorfile>qscxmlinvokableservice.html</anchorfile>
            <anchor>postEvent</anchor>
            <arglist>(QScxmlEvent *event) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlInvokableServiceFactory</name>
        <filename>qscxmlinvokableservicefactory.html</filename>
        <base>QObject</base>
        <member kind="property" type="QScxmlExecutableContent::InvokeInfo">
            <name>invokeInfo</name>
            <anchorfile>qscxmlinvokableservicefactory.html</anchorfile>
            <anchor>invokeInfo-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector&lt;QScxmlExecutableContent::ParameterInfo&gt;">
            <name>parameters</name>
            <anchorfile>qscxmlinvokableservicefactory.html</anchorfile>
            <anchor>parameters-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector&lt;QScxmlExecutableContent::StringId&gt;">
            <name>names</name>
            <anchorfile>qscxmlinvokableservicefactory.html</anchorfile>
            <anchor>names-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QScxmlInvokableService *</type>
            <name>invoke</name>
            <anchorfile>qscxmlinvokableservicefactory.html</anchorfile>
            <anchor>invoke</anchor>
            <arglist>(QScxmlStateMachine *parentStateMachine) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QScxmlExecutableContent::InvokeInfo &amp;</type>
            <name>invokeInfo</name>
            <anchorfile>qscxmlinvokableservicefactory.html</anchorfile>
            <anchor>invokeInfo-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector&lt;QScxmlExecutableContent::ParameterInfo&gt; &amp;</type>
            <name>parameters</name>
            <anchorfile>qscxmlinvokableservicefactory.html</anchorfile>
            <anchor>parameters-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector&lt;QScxmlExecutableContent::StringId&gt; &amp;</type>
            <name>names</name>
            <anchorfile>qscxmlinvokableservicefactory.html</anchorfile>
            <anchor>names-prop</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlNullDataModel</name>
        <filename>qscxmlnulldatamodel.html</filename>
        <base>QScxmlDataModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlNullDataModel</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>QScxmlNullDataModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QScxmlNullDataModel</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>dtor.QScxmlNullDataModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setup</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>setup</anchor>
            <arglist>(const QVariantMap &amp;initialDataValues) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>evaluateToString</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>evaluateToString</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>evaluateToBool</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>evaluateToBool</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>evaluateToVariant</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>evaluateToVariant</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>evaluateToVoid</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>evaluateToVoid</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>evaluateAssignment</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>evaluateAssignment</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>evaluateInitialization</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>evaluateInitialization</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>evaluateForeach</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>evaluateForeach</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId id, bool *ok, QScxmlDataModel::ForeachLoopBody *body) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setScxmlEvent</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>setScxmlEvent</anchor>
            <arglist>(const QScxmlEvent &amp;event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>scxmlProperty</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>scxmlProperty</anchor>
            <arglist>(const QString &amp;name) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasScxmlProperty</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>hasScxmlProperty</anchor>
            <arglist>(const QString &amp;name) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setScxmlProperty</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>setScxmlProperty</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value, const QString &amp;context) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlStateMachine</name>
        <filename>qscxmlstatemachine.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>running</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>initialized</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialized-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QScxmlDataModel*">
            <name>dataModel</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>dataModel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariantMap">
            <name>initialValues</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialValues-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector&lt;QScxmlInvokableService*&gt;">
            <name>invokedServices</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>invokedServices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>sessionId</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>sessionId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>invoked</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>invoked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector&lt;QScxmlError&gt;">
            <name>parseErrors</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>parseErrors-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QScxmlCompiler::Loader*">
            <name>loader</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>loader-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QScxmlTableData*">
            <name>tableData</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>tableData-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QScxmlStateMachine *</type>
            <name>fromFile</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>fromFile</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QScxmlStateMachine *</type>
            <name>fromData</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>fromData</anchor>
            <arglist>(QIODevice *data, const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QScxmlError&gt;</type>
            <name>parseErrors</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>parseErrors-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sessionId</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>sessionId-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInvoked</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>invoked-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInitialized</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialized-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataModel</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>setDataModel</anchor>
            <arglist>(QScxmlDataModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlDataModel *</type>
            <name>dataModel</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>dataModel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoader</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>loader-prop</anchor>
            <arglist>(QScxmlCompiler::Loader *loader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlCompiler::Loader *</type>
            <name>loader</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>loader-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRunning</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>setRunning</anchor>
            <arglist>(bool running)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>initialValues</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialValues-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInitialValues</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialValues-prop</anchor>
            <arglist>(const QVariantMap &amp;initialValues)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>stateNames</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>stateNames</anchor>
            <arglist>(bool compress) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>activeStateNames</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>activeStateNames</anchor>
            <arglist>(bool compress) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>(const QString &amp;scxmlStateName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaObject::Connection</type>
            <name>connectToState</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>connectToState</anchor>
            <arglist>(const QString &amp;scxmlStateName, const QObject *receiver, const char *method, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaObject::Connection</type>
            <name>connectToState</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>connectToState-1</anchor>
            <arglist>(const QString &amp;scxmlStateName, const typename QtPrivate::FunctionPointer&lt;PointerToMemberFunction&gt;::Object *receiver, PointerToMemberFunction method, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>typename QtPrivate::QEnableIf&lt;!QtPrivate::FunctionPointer&lt;Functor&gt;::IsPointerToMemberFunction &amp;&amp; !std::is_same&lt;const char *, Functor&gt;::value, QMetaObject::Connection&gt;::Type</type>
            <name>connectToState</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>connectToState-2</anchor>
            <arglist>(const QString &amp;scxmlStateName, Functor functor, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>typename QtPrivate::QEnableIf&lt;!QtPrivate::FunctionPointer&lt;Functor&gt;::IsPointerToMemberFunction &amp;&amp; !std::is_same&lt;const char *, Functor&gt;::value, QMetaObject::Connection&gt;::Type</type>
            <name>connectToState</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>connectToState-3</anchor>
            <arglist>(const QString &amp;scxmlStateName, const QObject *context, Functor functor, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>std::function&lt;void (bool)&gt;</type>
            <name>onEntry</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>onEntry</anchor>
            <arglist>(bool)&gt; onEntry(const QObject *, const char *receiver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>std::function&lt;void (bool)&gt;</type>
            <name>onExit</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>onExit</anchor>
            <arglist>(bool)&gt; onExit(const QObject *, const char *receiver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>std::function&lt;void (bool)&gt;</type>
            <name>onEntry</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>onEntry-1</anchor>
            <arglist>(bool)&gt; onEntry(Functor )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>std::function&lt;void (bool)&gt;</type>
            <name>onExit</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>onExit-1</anchor>
            <arglist>(bool)&gt; onExit(Functor )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>std::function&lt;void (bool)&gt;</type>
            <name>onEntry</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>onEntry-2</anchor>
            <arglist>(bool)&gt; onEntry(const typename QtPrivate::FunctionPointer&lt;PointerToMemberFunction&gt;::Object *, PointerToMemberFunction receiver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>std::function&lt;void (bool)&gt;</type>
            <name>onExit</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>onExit-2</anchor>
            <arglist>(bool)&gt; onExit(const typename QtPrivate::FunctionPointer&lt;PointerToMemberFunction&gt;::Object *, PointerToMemberFunction receiver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaObject::Connection</type>
            <name>connectToEvent</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>connectToEvent</anchor>
            <arglist>(const QString &amp;scxmlEventSpec, const QObject *receiver, const char *method, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaObject::Connection</type>
            <name>connectToEvent</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>connectToEvent-1</anchor>
            <arglist>(const QString &amp;scxmlEventSpec, const typename QtPrivate::FunctionPointer&lt;PointerToMemberFunction&gt;::Object *receiver, PointerToMemberFunction method, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>typename QtPrivate::QEnableIf&lt;!QtPrivate::FunctionPointer&lt;Functor&gt;::IsPointerToMemberFunction &amp;&amp; !std::is_same&lt;const char *, Functor&gt;::value, QMetaObject::Connection&gt;::Type</type>
            <name>connectToEvent</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>connectToEvent-2</anchor>
            <arglist>(const QString &amp;scxmlEventSpec, Functor functor, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>typename QtPrivate::QEnableIf&lt;!QtPrivate::FunctionPointer&lt;Functor&gt;::IsPointerToMemberFunction &amp;&amp; !std::is_same&lt;const char *, Functor&gt;::value, QMetaObject::Connection&gt;::Type</type>
            <name>connectToEvent</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>connectToEvent-3</anchor>
            <arglist>(const QString &amp;scxmlEventSpec, const QObject *context, Functor functor, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>submitEvent</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>submitEvent</anchor>
            <arglist>(QScxmlEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>submitEvent</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>submitEvent-1</anchor>
            <arglist>(const QString &amp;eventName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>submitEvent</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>submitEvent-2</anchor>
            <arglist>(const QString &amp;eventName, const QVariant &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancelDelayedEvent</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>cancelDelayedEvent</anchor>
            <arglist>(const QString &amp;sendId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDispatchableTarget</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>isDispatchableTarget</anchor>
            <arglist>(const QString &amp;target) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QScxmlInvokableService *&gt;</type>
            <name>invokedServices</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>invokedServices-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlTableData *</type>
            <name>tableData</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>tableData-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTableData</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>tableData-prop</anchor>
            <arglist>(QScxmlTableData *tableData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>runningChanged</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>runningChanged</anchor>
            <arglist>(bool running)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invokedServicesChanged</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>invokedServices-prop</anchor>
            <arglist>(const QVector&lt;QScxmlInvokableService *&gt; &amp;invokedServices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>log</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>log</anchor>
            <arglist>(const QString &amp;label, const QString &amp;msg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reachedStableState</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>reachedStableState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataModelChanged</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>dataModel-prop</anchor>
            <arglist>(QScxmlDataModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initialValuesChanged</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialValues-prop</anchor>
            <arglist>(const QVariantMap &amp;initialValues)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initializedChanged</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialized-prop</anchor>
            <arglist>(bool initialized)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loaderChanged</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>loader-prop</anchor>
            <arglist>(QScxmlCompiler::Loader *loader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tableDataChanged</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>tableData-prop</anchor>
            <arglist>(QScxmlTableData *tableData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>init</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>init</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>isActive-1</anchor>
            <arglist>(int stateIndex) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlStaticScxmlServiceFactory</name>
        <filename>qscxmlstaticscxmlservicefactory.html</filename>
        <base>QScxmlInvokableServiceFactory</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QScxmlInvokableService *</type>
            <name>invoke</name>
            <anchorfile>qscxmlstaticscxmlservicefactory.html</anchorfile>
            <anchor>invoke</anchor>
            <arglist>(QScxmlStateMachine *parentStateMachine) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlTableData</name>
        <filename>qscxmltabledata.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QScxmlTableData</name>
            <anchorfile>qscxmltabledata.html</anchorfile>
            <anchor>dtor.QScxmlTableData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>string</name>
            <anchorfile>qscxmltabledata.html</anchorfile>
            <anchor>string</anchor>
            <arglist>(QScxmlExecutableContent::StringId id) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QScxmlExecutableContent::InstructionId *</type>
            <name>instructions</name>
            <anchorfile>qscxmltabledata.html</anchorfile>
            <anchor>instructions</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QScxmlExecutableContent::EvaluatorInfo</type>
            <name>evaluatorInfo</name>
            <anchorfile>qscxmltabledata.html</anchorfile>
            <anchor>evaluatorInfo</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId evaluatorId) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QScxmlExecutableContent::AssignmentInfo</type>
            <name>assignmentInfo</name>
            <anchorfile>qscxmltabledata.html</anchorfile>
            <anchor>assignmentInfo</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId assignmentId) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QScxmlExecutableContent::ForeachInfo</type>
            <name>foreachInfo</name>
            <anchorfile>qscxmltabledata.html</anchorfile>
            <anchor>foreachInfo</anchor>
            <arglist>(QScxmlExecutableContent::EvaluatorId foreachId) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QScxmlExecutableContent::StringId *</type>
            <name>dataNames</name>
            <anchorfile>qscxmltabledata.html</anchorfile>
            <anchor>dataNames</anchor>
            <arglist>(int *count) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QScxmlExecutableContent::ContainerId</type>
            <name>initialSetup</name>
            <anchorfile>qscxmltabledata.html</anchorfile>
            <anchor>initialSetup</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>name</name>
            <anchorfile>qscxmltabledata.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual const qint32 *</type>
            <name>stateMachineTable</name>
            <anchorfile>qscxmltabledata.html</anchorfile>
            <anchor>stateMachineTable</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QScxmlInvokableServiceFactory *</type>
            <name>serviceFactory</name>
            <anchorfile>qscxmltabledata.html</anchorfile>
            <anchor>serviceFactory</anchor>
            <arglist>(int id) const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtScxml.ScxmlStateMachine</name>
        <filename>qml-qtscxml-scxmlstatemachine.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>stateNames</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>stateNames-method</anchor>
            <arglist>( compress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>activeStateNames</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>activeStateNames-method</anchor>
            <arglist>( compress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>isActive</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>isActive-method</anchor>
            <arglist>( scxmlStateName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>init</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>init-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>submitEvent</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>submitEvent-method</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>submitEvent</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>submitEvent-method</anchor>
            <arglist>( eventName,  var data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>cancelDelayedEvent</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>cancelDelayedEvent-method</anchor>
            <arglist>( sendId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>isDispatchableTarget</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>isDispatchableTarget-method</anchor>
            <arglist>( target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>log</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>log-signal</anchor>
            <arglist>( label,  string msg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>reachedStableState</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>reachedStableState-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>finished</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>finished-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>start</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>start-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>stop</name>
            <anchorfile>qml-qtscxml-scxmlstatemachine.html</anchorfile>
            <anchor>stop-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtScxml.StateMachineLoader</name>
        <filename>qml-qtscxml-statemachineloader.html</filename>
    </compound>
    <compound kind="class">
        <name>mediaplayer-qml-dynamic</name>
        <filename>qml-mediaplayer-qml-dynamic.html</filename>
    </compound>
</tagfile>
