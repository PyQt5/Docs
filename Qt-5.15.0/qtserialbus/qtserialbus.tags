<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QCanBus</name>
        <filename>qcanbus.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCanBus *</type>
            <name>instance</name>
            <anchorfile>qcanbus.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>plugins</name>
            <anchorfile>qcanbus.html</anchorfile>
            <anchor>plugins</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QCanBusDeviceInfo&gt;</type>
            <name>availableDevices</name>
            <anchorfile>qcanbus.html</anchorfile>
            <anchor>availableDevices</anchor>
            <arglist>(const QString &amp;plugin, QString *errorMessage) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusDevice *</type>
            <name>createDevice</name>
            <anchorfile>qcanbus.html</anchorfile>
            <anchor>createDevice</anchor>
            <arglist>(const QString &amp;plugin, const QString &amp;interfaceName, QString *errorMessage) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusDevice</name>
        <filename>qcanbusdevice.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>CanBusError</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadError</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteError</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectionError</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConfigurationError</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownError</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OperationError</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TimeoutError</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CanBusDeviceState</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusDeviceState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnconnectedState</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusDeviceState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectingState</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusDeviceState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectedState</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusDeviceState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClosingState</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusDeviceState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CanBusStatus</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusStatus-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Unknown</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Good</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Warning</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BusOff</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>CanBusStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ConfigurationKey</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>ConfigurationKey-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>RawFilterKey</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ErrorFilterKey</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LoopbackKey</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReceiveOwnKey</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BitRateKey</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CanFdKey</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DataBitRateKey</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProtocolKey</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserKey</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>ConfigurationKey-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QCanBusDevice::Filter</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCanBusDevice</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>QCanBusDevice-1</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setConfigurationParameter</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>setConfigurationParameter</anchor>
            <arglist>(int key, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>configurationParameter</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>configurationParameter</anchor>
            <arglist>(int key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;int&gt;</type>
            <name>configurationKeys</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>configurationKeys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>writeFrame</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>writeFrame</anchor>
            <arglist>(const QCanBusFrame &amp;frame) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusFrame</type>
            <name>readFrame</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>readFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QCanBusFrame&gt;</type>
            <name>readAllFrames</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>readAllFrames</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>framesAvailable</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>framesAvailable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>framesToWrite</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>framesToWrite</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetController</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>resetController</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasBusStatus</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>hasBusStatus</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusDevice::CanBusStatus</type>
            <name>busStatus</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>busStatus</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>Direction</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>Direction-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Input</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Output</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllDirections</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QCanBusDevice::Direction">
            <name>Directions</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>(QCanBusDevice::Directions direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForFramesWritten</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>waitForFramesWritten</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForFramesReceived</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>waitForFramesReceived</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>connectDevice</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>connectDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnectDevice</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>disconnectDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusDevice::CanBusDeviceState</type>
            <name>state</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusDevice::CanBusError</type>
            <name>error</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>interpretErrorFrame</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>interpretErrorFrame</anchor>
            <arglist>(const QCanBusFrame &amp;frame) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>errorOccurred</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>errorOccurred</anchor>
            <arglist>(QCanBusDevice::CanBusError )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>framesReceived</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>framesReceived</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>framesWritten</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>framesWritten</anchor>
            <arglist>(qint64 framesCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QCanBusDevice::CanBusDeviceState state)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setState</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>setState</anchor>
            <arglist>(QCanBusDevice::CanBusDeviceState newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(const QString &amp;errorText, QCanBusDevice::CanBusError errorId)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>clearError</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>clearError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>enqueueReceivedFrames</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>enqueueReceivedFrames</anchor>
            <arglist>(const QVector&lt;QCanBusFrame&gt; &amp;newFrames)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>enqueueOutgoingFrame</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>enqueueOutgoingFrame</anchor>
            <arglist>(const QCanBusFrame &amp;newFrame)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QCanBusFrame</type>
            <name>dequeueOutgoingFrame</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>dequeueOutgoingFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>hasOutgoingFrames</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>hasOutgoingFrames</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>open</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setResetControllerFunction</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>setResetControllerFunction</anchor>
            <arglist>(std::function&lt;void ()&gt; resetter)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setCanBusStatusGetter</name>
            <anchorfile>qcanbusdevice.html</anchorfile>
            <anchor>setCanBusStatusGetter</anchor>
            <arglist>(std::function&lt;CanBusStatus ()&gt; busStatusGetter)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusDevice::Filter</name>
        <filename>qcanbusdevice-filter.html</filename>
        <member kind="enumeration">
            <name>FormatFilter</name>
            <anchorfile>qcanbusdevice-filter.html</anchorfile>
            <anchor>FormatFilter-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MatchBaseFormat</name>
            <anchorfile>qcanbusdevice-filter.html</anchorfile>
            <anchor>FormatFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchExtendedFormat</name>
            <anchorfile>qcanbusdevice-filter.html</anchorfile>
            <anchor>FormatFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchBaseAndExtendedFormat</name>
            <anchorfile>qcanbusdevice-filter.html</anchorfile>
            <anchor>FormatFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QCanBusDevice::Filter::FormatFilter">
            <name>FormatFilters</name>
            <anchorfile>qcanbusdevice-filter.html</anchorfile>
            <anchor>FormatFilter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcanbusdevice-filter.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QCanBusDevice::Filter &amp;a, const QCanBusDevice::Filter &amp;b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcanbusdevice-filter.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QCanBusDevice::Filter &amp;a, const QCanBusDevice::Filter &amp;b)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusDeviceInfo</name>
        <filename>qcanbusdeviceinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCanBusDeviceInfo</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>QCanBusDeviceInfo-1</anchor>
            <arglist>(const QCanBusDeviceInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCanBusDeviceInfo</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>dtor.QCanBusDeviceInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCanBusDeviceInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusDeviceInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCanBusDeviceInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusDeviceInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QCanBusDeviceInfo &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>serialNumber</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>serialNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>channel</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>channel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFlexibleDataRate</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>hasFlexibleDataRate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVirtual</name>
            <anchorfile>qcanbusdeviceinfo.html</anchorfile>
            <anchor>isVirtual</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusFactory</name>
        <filename>qcanbusfactory.html</filename>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QCanBusDevice *</type>
            <name>createDevice</name>
            <anchorfile>qcanbusfactory.html</anchorfile>
            <anchor>createDevice</anchor>
            <arglist>(const QString &amp;interfaceName, QString *errorMessage) const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusFactoryV2</name>
        <filename>qcanbusfactoryv2.html</filename>
        <base>QCanBusFactory</base>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QCanBusDevice *</type>
            <name>createDevice</name>
            <anchorfile>qcanbusfactoryv2.html</anchorfile>
            <anchor>createDevice</anchor>
            <arglist>(const QString &amp;interfaceName, QString *errorMessage) const const override = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QList&lt;QCanBusDeviceInfo&gt;</type>
            <name>availableDevices</name>
            <anchorfile>qcanbusfactoryv2.html</anchorfile>
            <anchor>availableDevices</anchor>
            <arglist>(QString *errorMessage) const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusFrame</name>
        <filename>qcanbusframe.html</filename>
        <class>QCanBusFrame::TimeStamp</class>
        <member kind="enumeration">
            <name>FrameType</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownFrame</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DataFrame</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ErrorFrame</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemoteRequestFrame</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidFrame</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCanBusFrame</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>QCanBusFrame</anchor>
            <arglist>(QCanBusFrame::FrameType type)</arglist>
        </member>
        <member kind="enumeration">
            <name>FrameError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransmissionTimeoutError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LostArbitrationError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ControllerError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProtocolViolationError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransceiverError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MissingAcknowledgmentError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BusOffError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BusError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ControllerRestartError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnyError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QCanBusFrame::FrameError">
            <name>FrameErrors</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>FrameError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCanBusFrame</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>QCanBusFrame-1</anchor>
            <arglist>(quint32 identifier, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusFrame::FrameType</type>
            <name>frameType</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>frameType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameType</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setFrameType</anchor>
            <arglist>(QCanBusFrame::FrameType newType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasExtendedFrameFormat</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>hasExtendedFrameFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtendedFrameFormat</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setExtendedFrameFormat</anchor>
            <arglist>(bool isExtended)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>frameId</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>frameId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameId</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setFrameId</anchor>
            <arglist>(quint32 newFrameId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPayload</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setPayload</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeStamp</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setTimeStamp</anchor>
            <arglist>(QCanBusFrame::TimeStamp ts)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>payload</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>payload</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusFrame::TimeStamp</type>
            <name>timeStamp</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>timeStamp</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCanBusFrame::FrameErrors</type>
            <name>error</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(QCanBusFrame::FrameErrors error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFlexibleDataRateFormat</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>hasFlexibleDataRateFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlexibleDataRateFormat</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setFlexibleDataRateFormat</anchor>
            <arglist>(bool isFlexibleData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasBitrateSwitch</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>hasBitrateSwitch</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBitrateSwitch</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setBitrateSwitch</anchor>
            <arglist>(bool bitrateSwitch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasErrorStateIndicator</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>hasErrorStateIndicator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setErrorStateIndicator</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setErrorStateIndicator</anchor>
            <arglist>(bool errorStateIndicator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasLocalEcho</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>hasLocalEcho</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalEcho</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>setLocalEcho</anchor>
            <arglist>(bool echo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;out, const QCanBusFrame &amp;frame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qcanbusframe.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;in, QCanBusFrame &amp;frame)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCanBusFrame::TimeStamp</name>
        <filename>qcanbusframe-timestamp.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>TimeStamp</name>
            <anchorfile>qcanbusframe-timestamp.html</anchorfile>
            <anchor>TimeStamp</anchor>
            <arglist>(qint64 s, qint64 usec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>TimeStamp</type>
            <name>fromMicroSeconds</name>
            <anchorfile>qcanbusframe-timestamp.html</anchorfile>
            <anchor>fromMicroSeconds</anchor>
            <arglist>(qint64 usec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>seconds</name>
            <anchorfile>qcanbusframe-timestamp.html</anchorfile>
            <anchor>seconds</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>microSeconds</name>
            <anchorfile>qcanbusframe-timestamp.html</anchorfile>
            <anchor>microSeconds</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusClient</name>
        <filename>qmodbusclient.html</filename>
        <base>QModbusDevice</base>
        <member kind="property" type="int">
            <name>timeout</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusClient</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>QModbusClient</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusReply *</type>
            <name>sendReadRequest</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>sendReadRequest</anchor>
            <arglist>(const QModbusDataUnit &amp;read, int serverAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusReply *</type>
            <name>sendWriteRequest</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>sendWriteRequest</anchor>
            <arglist>(const QModbusDataUnit &amp;write, int serverAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusReply *</type>
            <name>sendReadWriteRequest</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>sendReadWriteRequest</anchor>
            <arglist>(const QModbusDataUnit &amp;read, const QModbusDataUnit &amp;write, int serverAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusReply *</type>
            <name>sendRawRequest</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>sendRawRequest</anchor>
            <arglist>(const QModbusRequest &amp;request, int serverAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timeout</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeout</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>setTimeout</anchor>
            <arglist>(int newTimeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>numberOfRetries</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>numberOfRetries</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumberOfRetries</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>setNumberOfRetries</anchor>
            <arglist>(int number)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>timeoutChanged</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>timeoutChanged</anchor>
            <arglist>(int newTimeout)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>processResponse</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>processResponse</anchor>
            <arglist>(const QModbusResponse &amp;response, QModbusDataUnit *data)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>processPrivateResponse</name>
            <anchorfile>qmodbusclient.html</anchorfile>
            <anchor>processPrivateResponse</anchor>
            <arglist>(const QModbusResponse &amp;response, QModbusDataUnit *data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusDataUnit</name>
        <filename>qmodbusdataunit.html</filename>
        <member kind="enumeration">
            <name>RegisterType</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>RegisterType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Invalid</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>RegisterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DiscreteInputs</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>RegisterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Coils</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>RegisterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InputRegisters</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>RegisterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HoldingRegisters</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>RegisterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusDataUnit</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>QModbusDataUnit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusDataUnit</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>QModbusDataUnit-1</anchor>
            <arglist>(QModbusDataUnit::RegisterType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusDataUnit</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>QModbusDataUnit-2</anchor>
            <arglist>(QModbusDataUnit::RegisterType type, int address, quint16 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusDataUnit</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>QModbusDataUnit-3</anchor>
            <arglist>(QModbusDataUnit::RegisterType type, int address, const QVector&lt;quint16&gt; &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusDataUnit::RegisterType</type>
            <name>registerType</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>registerType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRegisterType</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>setRegisterType</anchor>
            <arglist>(QModbusDataUnit::RegisterType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startAddress</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>startAddress</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartAddress</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>setStartAddress</anchor>
            <arglist>(int address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;quint16&gt;</type>
            <name>values</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>values</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValues</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>setValues</anchor>
            <arglist>(const QVector&lt;quint16&gt; &amp;values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>valueCount</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>valueCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValueCount</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>setValueCount</anchor>
            <arglist>(uint newCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(int index, quint16 value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>value</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QModbusDataUnitMap</name>
            <anchorfile>qmodbusdataunit.html</anchorfile>
            <anchor>QModbusDataUnitMap-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusDevice</name>
        <filename>qmodbusdevice.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>Error</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>Error-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadError</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteError</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectionError</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConfigurationError</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TimeoutError</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProtocolError</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReplyAbortedError</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownError</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>State</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>State-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnconnectedState</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectingState</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectedState</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClosingState</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ConnectionParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>ConnectionParameter-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SerialPortNameParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SerialParityParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SerialBaudRateParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SerialDataBitsParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SerialStopBitsParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NetworkPortParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NetworkAddressParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>ConnectionParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusDevice</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>QModbusDevice</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QModbusDevice</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>dtor.QModbusDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>connectionParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>connectionParameter</anchor>
            <arglist>(int parameter) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConnectionParameter</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>setConnectionParameter</anchor>
            <arglist>(int parameter, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>connectDevice</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>connectDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnectDevice</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>disconnectDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusDevice::State</type>
            <name>state</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusDevice::Error</type>
            <name>error</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>errorOccurred</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>errorOccurred</anchor>
            <arglist>(QModbusDevice::Error error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QModbusDevice::State state)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setState</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>setState</anchor>
            <arglist>(QModbusDevice::State newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(const QString &amp;errorText, QModbusDevice::Error error)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>open</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qmodbusdevice.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusDeviceIdentification</name>
        <filename>qmodbusdeviceidentification.html</filename>
        <member kind="enumeration">
            <name>ObjectId</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ObjectId-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>VendorNameObjectId</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProductCodeObjectId</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MajorMinorRevisionObjectId</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VendorUrlObjectId</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProductNameObjectId</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ModelNameObjectId</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserApplicationNameObjectId</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReservedObjectId</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProductDependentObjectId</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UndefinedObjectId</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ObjectId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ReadDeviceIdCode</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ReadDeviceIdCode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BasicReadDeviceIdCode</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ReadDeviceIdCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RegularReadDeviceIdCode</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ReadDeviceIdCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtendedReadDeviceIdCode</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ReadDeviceIdCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IndividualReadDeviceIdCode</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ReadDeviceIdCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ConformityLevel</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ConformityLevel-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BasicConformityLevel</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RegularConformityLevel</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtendedConformityLevel</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BasicIndividualConformityLevel</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RegularIndividualConformityLevel</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtendedIndividualConformityLevel</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>ConformityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusDeviceIdentification</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>QModbusDeviceIdentification</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>objectIds</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>objectIds</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(uint objectId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(uint objectId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insert</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(uint objectId, const QByteArray &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>value</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(uint objectId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusDeviceIdentification::ConformityLevel</type>
            <name>conformityLevel</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>conformityLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConformityLevel</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>setConformityLevel</anchor>
            <arglist>(QModbusDeviceIdentification::ConformityLevel level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QModbusDeviceIdentification</type>
            <name>fromByteArray</name>
            <anchorfile>qmodbusdeviceidentification.html</anchorfile>
            <anchor>fromByteArray</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusExceptionResponse</name>
        <filename>qmodbusexceptionresponse.html</filename>
        <base>QModbusResponse</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusExceptionResponse</name>
            <anchorfile>qmodbusexceptionresponse.html</anchorfile>
            <anchor>QModbusExceptionResponse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusExceptionResponse</name>
            <anchorfile>qmodbusexceptionresponse.html</anchorfile>
            <anchor>QModbusExceptionResponse-1</anchor>
            <arglist>(const QModbusPdu &amp;pdu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusExceptionResponse</name>
            <anchorfile>qmodbusexceptionresponse.html</anchorfile>
            <anchor>QModbusExceptionResponse-2</anchor>
            <arglist>(QModbusPdu::FunctionCode code, QModbusPdu::ExceptionCode ec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setFunctionCode</name>
            <anchorfile>qmodbusexceptionresponse.html</anchorfile>
            <anchor>setFunctionCode</anchor>
            <arglist>(QModbusPdu::FunctionCode c) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExceptionCode</name>
            <anchorfile>qmodbusexceptionresponse.html</anchorfile>
            <anchor>setExceptionCode</anchor>
            <arglist>(QModbusPdu::ExceptionCode ec)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusPdu</name>
        <filename>qmodbuspdu.html</filename>
        <member kind="enumeration">
            <name>ExceptionCode</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>ExceptionCode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>IllegalFunction</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IllegalDataAddress</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IllegalDataValue</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServerDeviceFailure</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Acknowledge</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServerDeviceBusy</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NegativeAcknowledge</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MemoryParityError</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GatewayPathUnavailable</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GatewayTargetDeviceFailedToRespond</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtendedException</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>ExceptionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FunctionCode</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Invalid</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadCoils</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadDiscreteInputs</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadHoldingRegisters</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadInputRegisters</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteSingleCoil</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteSingleRegister</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadExceptionStatus</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Diagnostics</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GetCommEventCounter</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GetCommEventLog</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteMultipleCoils</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteMultipleRegisters</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReportServerId</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadFileRecord</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteFileRecord</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MaskWriteRegister</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadWriteMultipleRegisters</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadFifoQueue</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EncapsulatedInterfaceTransport</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UndefinedFunctionCode</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>FunctionCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusPdu</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>QModbusPdu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QModbusPdu</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>dtor.QModbusPdu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusPdu::ExceptionCode</type>
            <name>exceptionCode</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>exceptionCode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isException</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>isException</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint16</type>
            <name>size</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint16</type>
            <name>dataSize</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>dataSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusPdu::FunctionCode</type>
            <name>functionCode</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>functionCode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setFunctionCode</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>setFunctionCode</anchor>
            <arglist>(QModbusPdu::FunctionCode code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>encodeData</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>encodeData</anchor>
            <arglist>(Args... data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>decodeData</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>decodeData</anchor>
            <arglist>(Args &amp;&amp;... data) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QModbusPdu</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>QModbusPdu-1</anchor>
            <arglist>(QModbusPdu::FunctionCode code, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QModbusPdu</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>QModbusPdu-2</anchor>
            <arglist>(const QModbusPdu &amp;other)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QModbusPdu &amp;</type>
            <name>operator=</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QModbusPdu &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDebug debug, const QModbusPdu &amp;pdu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qmodbuspdu.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDataStream &amp;stream, const QModbusPdu &amp;pdu)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusReply</name>
        <filename>qmodbusreply.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>ReplyType</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>ReplyType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Raw</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>ReplyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Common</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>ReplyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Broadcast</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>ReplyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusReply</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>QModbusReply</anchor>
            <arglist>(QModbusReply::ReplyType type, int serverAddress, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusReply::ReplyType</type>
            <name>type</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serverAddress</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>serverAddress</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusDataUnit</type>
            <name>result</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>result</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusResponse</type>
            <name>rawResult</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>rawResult</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModbusDevice::Error</type>
            <name>error</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>errorOccurred</name>
            <anchorfile>qmodbusreply.html</anchorfile>
            <anchor>errorOccurred</anchor>
            <arglist>(QModbusDevice::Error error)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusRequest</name>
        <filename>qmodbusrequest.html</filename>
        <base>QModbusPdu</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusRequest</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>QModbusRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusRequest</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>QModbusRequest-1</anchor>
            <arglist>(const QModbusPdu &amp;pdu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusRequest</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>QModbusRequest-2</anchor>
            <arglist>(QModbusPdu::FunctionCode code, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>minimumDataSize</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>minimumDataSize</anchor>
            <arglist>(const QModbusRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>calculateDataSize</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>calculateDataSize</anchor>
            <arglist>(const QModbusRequest &amp;request)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>CalcFuncPtr</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>CalcFuncPtr-alias</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>registerDataSizeCalculator</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>registerDataSizeCalculator</anchor>
            <arglist>(QModbusPdu::FunctionCode fc, QModbusRequest::CalcFuncPtr calculator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusRequest</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>QModbusRequest-3</anchor>
            <arglist>(QModbusPdu::FunctionCode code, Args... data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qmodbusrequest.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QModbusRequest &amp;pdu)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusResponse</name>
        <filename>qmodbusresponse.html</filename>
        <base>QModbusPdu</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusResponse</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>QModbusResponse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusResponse</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>QModbusResponse-1</anchor>
            <arglist>(const QModbusPdu &amp;pdu)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusResponse</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>QModbusResponse-2</anchor>
            <arglist>(QModbusPdu::FunctionCode code, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>minimumDataSize</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>minimumDataSize</anchor>
            <arglist>(const QModbusResponse &amp;response)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>calculateDataSize</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>calculateDataSize</anchor>
            <arglist>(const QModbusResponse &amp;response)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>CalcFuncPtr</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>CalcFuncPtr-alias</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>registerDataSizeCalculator</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>registerDataSizeCalculator</anchor>
            <arglist>(QModbusPdu::FunctionCode fc, QModbusResponse::CalcFuncPtr calculator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusResponse</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>QModbusResponse-3</anchor>
            <arglist>(QModbusPdu::FunctionCode code, Args... data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qmodbusresponse.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QModbusResponse &amp;pdu)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusRtuSerialMaster</name>
        <filename>qmodbusrtuserialmaster.html</filename>
        <base>QModbusClient</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusRtuSerialMaster</name>
            <anchorfile>qmodbusrtuserialmaster.html</anchorfile>
            <anchor>QModbusRtuSerialMaster</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>interFrameDelay</name>
            <anchorfile>qmodbusrtuserialmaster.html</anchorfile>
            <anchor>interFrameDelay</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInterFrameDelay</name>
            <anchorfile>qmodbusrtuserialmaster.html</anchorfile>
            <anchor>setInterFrameDelay</anchor>
            <arglist>(int microseconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>turnaroundDelay</name>
            <anchorfile>qmodbusrtuserialmaster.html</anchorfile>
            <anchor>turnaroundDelay</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTurnaroundDelay</name>
            <anchorfile>qmodbusrtuserialmaster.html</anchorfile>
            <anchor>setTurnaroundDelay</anchor>
            <arglist>(int turnaroundDelay)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qmodbusrtuserialmaster.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qmodbusrtuserialmaster.html</anchorfile>
            <anchor>open</anchor>
            <arglist>() override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusRtuSerialSlave</name>
        <filename>qmodbusrtuserialslave.html</filename>
        <base>QModbusServer</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusRtuSerialSlave</name>
            <anchorfile>qmodbusrtuserialslave.html</anchorfile>
            <anchor>QModbusRtuSerialSlave</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QModbusRtuSerialSlave</name>
            <anchorfile>qmodbusrtuserialslave.html</anchorfile>
            <anchor>dtor.QModbusRtuSerialSlave</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>processesBroadcast</name>
            <anchorfile>qmodbusrtuserialslave.html</anchorfile>
            <anchor>processesBroadcast</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qmodbusrtuserialslave.html</anchorfile>
            <anchor>open</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qmodbusrtuserialslave.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModbusResponse</type>
            <name>processRequest</name>
            <anchorfile>qmodbusrtuserialslave.html</anchorfile>
            <anchor>processRequest</anchor>
            <arglist>(const QModbusPdu &amp;request) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusServer</name>
        <filename>qmodbusserver.html</filename>
        <base>QModbusDevice</base>
        <member kind="enumeration">
            <name>Option</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>Option-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DiagnosticRegister</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExceptionStatusOffset</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeviceBusy</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AsciiInputDelimiter</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListenOnlyMode</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServerIdentifier</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RunIndicatorStatus</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AdditionalData</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeviceIdentification</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserOption</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusServer</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>QModbusServer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serverAddress</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>serverAddress</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setServerAddress</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>setServerAddress</anchor>
            <arglist>(int serverAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setMap</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>setMap</anchor>
            <arglist>(const QModbusDataUnitMap &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>processesBroadcast</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>processesBroadcast</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>value</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(int option) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setValue</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(int option, const QVariant &amp;newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>data</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(QModbusDataUnit *newData) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setData</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModbusDataUnit &amp;newData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setData</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>setData-1</anchor>
            <arglist>(QModbusDataUnit::RegisterType table, quint16 address, quint16 data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>data</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>data-1</anchor>
            <arglist>(QModbusDataUnit::RegisterType table, quint16 address, quint16 *data) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataWritten</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>dataWritten</anchor>
            <arglist>(QModbusDataUnit::RegisterType table, int address, int size)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>writeData</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const QModbusDataUnit &amp;newData)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>readData</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(QModbusDataUnit *newData) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModbusResponse</type>
            <name>processRequest</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>processRequest</anchor>
            <arglist>(const QModbusPdu &amp;request)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModbusResponse</type>
            <name>processPrivateRequest</name>
            <anchorfile>qmodbusserver.html</anchorfile>
            <anchor>processPrivateRequest</anchor>
            <arglist>(const QModbusPdu &amp;request)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusTcpClient</name>
        <filename>qmodbustcpclient.html</filename>
        <base>QModbusClient</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusTcpClient</name>
            <anchorfile>qmodbustcpclient.html</anchorfile>
            <anchor>QModbusTcpClient</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QModbusTcpClient</name>
            <anchorfile>qmodbustcpclient.html</anchorfile>
            <anchor>dtor.QModbusTcpClient</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qmodbustcpclient.html</anchorfile>
            <anchor>open</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qmodbustcpclient.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusTcpConnectionObserver</name>
        <filename>qmodbustcpconnectionobserver.html</filename>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>acceptNewConnection</name>
            <anchorfile>qmodbustcpconnectionobserver.html</anchorfile>
            <anchor>acceptNewConnection</anchor>
            <arglist>(QTcpSocket *newClient) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModbusTcpServer</name>
        <filename>qmodbustcpserver.html</filename>
        <base>QModbusServer</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModbusTcpServer</name>
            <anchorfile>qmodbustcpserver.html</anchorfile>
            <anchor>QModbusTcpServer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QModbusTcpServer</name>
            <anchorfile>qmodbustcpserver.html</anchorfile>
            <anchor>dtor.QModbusTcpServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>installConnectionObserver</name>
            <anchorfile>qmodbustcpserver.html</anchorfile>
            <anchor>installConnectionObserver</anchor>
            <arglist>(QModbusTcpConnectionObserver *observer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modbusClientDisconnected</name>
            <anchorfile>qmodbustcpserver.html</anchorfile>
            <anchor>modbusClientDisconnected</anchor>
            <arglist>(QTcpSocket *modbusClient)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qmodbustcpserver.html</anchorfile>
            <anchor>open</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qmodbustcpserver.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QModbusResponse</type>
            <name>processRequest</name>
            <anchorfile>qmodbustcpserver.html</anchorfile>
            <anchor>processRequest</anchor>
            <arglist>(const QModbusPdu &amp;request) override</arglist>
        </member>
    </compound>
</tagfile>
