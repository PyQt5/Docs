<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QtQuick.Accessible</name>
        <filename>qml-qtquick-accessible.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pressAction</name>
            <anchorfile>qml-qtquick-accessible.html</anchorfile>
            <anchor>pressAction-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>toggleAction</name>
            <anchorfile>qml-qtquick-accessible.html</anchorfile>
            <anchor>toggleAction-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>increaseAction</name>
            <anchorfile>qml-qtquick-accessible.html</anchorfile>
            <anchor>increaseAction-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>decreaseAction</name>
            <anchorfile>qml-qtquick-accessible.html</anchorfile>
            <anchor>decreaseAction-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>scrollUpAction</name>
            <anchorfile>qml-qtquick-accessible.html</anchorfile>
            <anchor>scrollUpAction-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>scrollDownAction</name>
            <anchorfile>qml-qtquick-accessible.html</anchorfile>
            <anchor>scrollDownAction-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>scrollLeftAction</name>
            <anchorfile>qml-qtquick-accessible.html</anchorfile>
            <anchor>scrollLeftAction-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>scrollRightAction</name>
            <anchorfile>qml-qtquick-accessible.html</anchorfile>
            <anchor>scrollRightAction-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>previousPageAction</name>
            <anchorfile>qml-qtquick-accessible.html</anchorfile>
            <anchor>previousPageAction-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>nextPageAction</name>
            <anchorfile>qml-qtquick-accessible.html</anchorfile>
            <anchor>nextPageAction-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Affector</name>
        <filename>qml-qtquick-particles-affector.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>affected</name>
            <anchorfile>qml-qtquick-particles-affector.html</anchorfile>
            <anchor>affected-signal</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Age</name>
        <filename>qml-qtquick-particles-age.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.AnchorAnimation</name>
        <filename>qml-qtquick-anchoranimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.AnchorChanges</name>
        <filename>qml-qtquick-anchorchanges.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.AngleDirection</name>
        <filename>qml-qtquick-particles-angledirection.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.AnimatedImage</name>
        <filename>qml-qtquick-animatedimage.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.AnimatedSprite</name>
        <filename>qml-qtquick-animatedsprite.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>restart</name>
            <anchorfile>qml-qtquick-animatedsprite.html</anchorfile>
            <anchor>restart-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>finished</name>
            <anchorfile>qml-qtquick-animatedsprite.html</anchorfile>
            <anchor>finished-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>start</name>
            <anchorfile>qml-qtquick-animatedsprite.html</anchorfile>
            <anchor>start-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>stop</name>
            <anchorfile>qml-qtquick-animatedsprite.html</anchorfile>
            <anchor>stop-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>advance</name>
            <anchorfile>qml-qtquick-animatedsprite.html</anchorfile>
            <anchor>advance-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pause</name>
            <anchorfile>qml-qtquick-animatedsprite.html</anchorfile>
            <anchor>pause-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>resume</name>
            <anchorfile>qml-qtquick-animatedsprite.html</anchorfile>
            <anchor>resume-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Animation</name>
        <filename>qml-qtquick-animation.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>started</name>
            <anchorfile>qml-qtquick-animation.html</anchorfile>
            <anchor>started-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>stopped</name>
            <anchorfile>qml-qtquick-animation.html</anchorfile>
            <anchor>stopped-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>finished</name>
            <anchorfile>qml-qtquick-animation.html</anchorfile>
            <anchor>finished-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>start</name>
            <anchorfile>qml-qtquick-animation.html</anchorfile>
            <anchor>start-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pause</name>
            <anchorfile>qml-qtquick-animation.html</anchorfile>
            <anchor>pause-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>resume</name>
            <anchorfile>qml-qtquick-animation.html</anchorfile>
            <anchor>resume-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>stop</name>
            <anchorfile>qml-qtquick-animation.html</anchorfile>
            <anchor>stop-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>restart</name>
            <anchorfile>qml-qtquick-animation.html</anchorfile>
            <anchor>restart-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>complete</name>
            <anchorfile>qml-qtquick-animation.html</anchorfile>
            <anchor>complete-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.AnimationController</name>
        <filename>qml-qtquick-animationcontroller.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>reload</name>
            <anchorfile>qml-qtquick-animationcontroller.html</anchorfile>
            <anchor>reload-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>completeToBeginning</name>
            <anchorfile>qml-qtquick-animationcontroller.html</anchorfile>
            <anchor>completeToBeginning-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>completeToEnd</name>
            <anchorfile>qml-qtquick-animationcontroller.html</anchorfile>
            <anchor>completeToEnd-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Animator</name>
        <filename>qml-qtquick-animator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Attractor</name>
        <filename>qml-qtquick-particles-attractor.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Behavior</name>
        <filename>qml-qtquick-behavior.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.BorderImage</name>
        <filename>qml-qtquick-borderimage.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.BorderImageMesh</name>
        <filename>qml-qtquick-borderimagemesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt.labs.animation.BoundaryRule</name>
        <filename>qml-qt-labs-animation-boundaryrule.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>returnToBounds</name>
            <anchorfile>qml-qt-labs-animation-boundaryrule.html</anchorfile>
            <anchor>returnToBounds-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Canvas</name>
        <filename>qml-qtquick-canvas.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>getContext</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>getContext-method</anchor>
            <arglist>( contextId,  ... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>requestAnimationFrame</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>requestAnimationFrame-method</anchor>
            <arglist>( callback)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>cancelRequestAnimationFrame</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>cancelRequestAnimationFrame-method</anchor>
            <arglist>( handle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>requestPaint</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>requestPaint-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>markDirty</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>markDirty-method</anchor>
            <arglist>( area)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>save-method</anchor>
            <arglist>( filename)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>imageLoaded</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>imageLoaded-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>loadImage</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>loadImage-method</anchor>
            <arglist>( image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>unloadImage</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>unloadImage-method</anchor>
            <arglist>( image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>isImageError</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>isImageError-method</anchor>
            <arglist>( image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>isImageLoading</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>isImageLoading-method</anchor>
            <arglist>( image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>isImageLoaded</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>isImageLoaded-method</anchor>
            <arglist>( image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>string</type>
            <name>toDataURL</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>toDataURL-method</anchor>
            <arglist>( mimeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>paint</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>paint-signal</anchor>
            <arglist>( region)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>painted</name>
            <anchorfile>qml-qtquick-canvas.html</anchorfile>
            <anchor>painted-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.CanvasGradient</name>
        <filename>qml-qtquick-canvasgradient.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CanvasGradient</type>
            <name>addColorStop</name>
            <anchorfile>qml-qtquick-canvasgradient.html</anchorfile>
            <anchor>addColorStop-method</anchor>
            <arglist>( offset,  string color)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.CanvasImageData</name>
        <filename>qml-qtquick-canvasimagedata.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.CanvasPixelArray</name>
        <filename>qml-qtquick-canvaspixelarray.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Window.CloseEvent</name>
        <filename>qml-qtquick-window-closeevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ColorAnimation</name>
        <filename>qml-qtquick-coloranimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Column</name>
        <filename>qml-qtquick-column.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>forceLayout</name>
            <anchorfile>qml-qtquick-column.html</anchorfile>
            <anchor>forceLayout-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positioningComplete</name>
            <anchorfile>qml-qtquick-column.html</anchorfile>
            <anchor>positioningComplete-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Layouts.ColumnLayout</name>
        <filename>qml-qtquick-layouts-columnlayout.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Shapes.ConicalGradient</name>
        <filename>qml-qtquick-shapes-conicalgradient.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Context2D</name>
        <filename>qml-qtquick-context2d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>restore</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>restore-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>reset</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>reset-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>save</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>save-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>rotate</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>rotate-method</anchor>
            <arglist>( angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>scale</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>scale-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>setTransform</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>setTransform-method</anchor>
            <arglist>( a,  real b,  real c,  real d,  real e,  real f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>transform</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>transform-method</anchor>
            <arglist>( a,  real b,  real c,  real d,  real e,  real f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>translate</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>translate-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>resetTransform</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>resetTransform-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>shear</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>shear-method</anchor>
            <arglist>( sh,  real sv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>createLinearGradient</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>createLinearGradient-method</anchor>
            <arglist>( x0,  real y0,  real x1,  real y1)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>createRadialGradient</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>createRadialGradient-method</anchor>
            <arglist>( x0,  real y0,  real r0,  real x1,  real y1,  real r1)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>createConicalGradient</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>createConicalGradient-method</anchor>
            <arglist>( x,  real y,  real angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>variant</type>
            <name>createPattern</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>createPattern-method</anchor>
            <arglist>( color,  enumeration patternMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>variant</type>
            <name>createPattern</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>createPattern-method</anchor>
            <arglist>( image,  string repetition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>array</type>
            <name>getLineDash</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>getLineDash-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>setLineDash</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>setLineDash-method</anchor>
            <arglist>( pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>clearRect</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>clearRect-method</anchor>
            <arglist>( x,  real y,  real w,  real h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>fillRect</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>fillRect-method</anchor>
            <arglist>( x,  real y,  real w,  real h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>strokeRect</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>strokeRect-method</anchor>
            <arglist>( x,  real y,  real w,  real h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>arc</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>arc-method</anchor>
            <arglist>( x,  real y,  real radius,  real startAngle,  real endAngle,  bool anticlockwise)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>arcTo</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>arcTo-method</anchor>
            <arglist>( x1,  real y1,  real x2,  real y2,  real radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>beginPath</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>beginPath-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>bezierCurveTo</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>bezierCurveTo-method</anchor>
            <arglist>( cp1x,  real cp1y,  real cp2x,  real cp2y,  real x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>clip</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>clip-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>closePath</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>closePath-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>fill</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>fill-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>lineTo</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>lineTo-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>moveTo</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>moveTo-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>quadraticCurveTo</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>quadraticCurveTo-method</anchor>
            <arglist>( cpx,  real cpy,  real x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>rect</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>rect-method</anchor>
            <arglist>( x,  real y,  real w,  real h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>roundedRect</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>roundedRect-method</anchor>
            <arglist>( x,  real y,  real w,  real h,  real xRadius,  real yRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>ellipse</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>ellipse-method</anchor>
            <arglist>( x,  real y,  real w,  real h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>text</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>text-method</anchor>
            <arglist>( text,  real x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>stroke</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>stroke-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>isPointInPath</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>isPointInPath-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>fillText</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>fillText-method</anchor>
            <arglist>( text,  x,  y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>strokeText</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>strokeText-method</anchor>
            <arglist>( text,  x,  y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>measureText</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>measureText-method</anchor>
            <arglist>( text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>drawImage</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>drawImage-method</anchor>
            <arglist>( image,  real dx,  real dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>drawImage</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>drawImage-method</anchor>
            <arglist>( image,  real dx,  real dy,  real dw,  real dh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>drawImage</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>drawImage-method</anchor>
            <arglist>( image,  real sx,  real sy,  real sw,  real sh,  real dx,  real dy,  real dw,  real dh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CanvasImageData</type>
            <name>createImageData</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>createImageData-method</anchor>
            <arglist>( sw,  real sh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CanvasImageData</type>
            <name>createImageData</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>createImageData-method</anchor>
            <arglist>( imageData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CanvasImageData</type>
            <name>createImageData</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>createImageData-method</anchor>
            <arglist>( imageUrl)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CanvasImageData</type>
            <name>getImageData</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>getImageData-method</anchor>
            <arglist>( x,  real y,  real w,  real h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>putImageData</name>
            <anchorfile>qml-qtquick-context2d.html</anchorfile>
            <anchor>putImageData-method</anchor>
            <arglist>( imageData,  real dx,  real dy,  real dirtyX,  real dirtyY,  real dirtyWidth,  real dirtyHeight)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.CumulativeDirection</name>
        <filename>qml-qtquick-particles-cumulativedirection.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.CustomParticle</name>
        <filename>qml-qtquick-particles-customparticle.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Direction</name>
        <filename>qml-qtquick-particles-direction.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.DoubleValidator</name>
        <filename>qml-qtquick-doublevalidator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Drag</name>
        <filename>qml-qtquick-drag.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qml-qtquick-drag.html</anchorfile>
            <anchor>start-method</anchor>
            <arglist>( supportedActions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>enumeration</type>
            <name>drop</name>
            <anchorfile>qml-qtquick-drag.html</anchorfile>
            <anchor>drop-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qml-qtquick-drag.html</anchorfile>
            <anchor>cancel-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>dragStarted</name>
            <anchorfile>qml-qtquick-drag.html</anchorfile>
            <anchor>dragStarted-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>dragFinished</name>
            <anchorfile>qml-qtquick-drag.html</anchorfile>
            <anchor>dragFinished-signal</anchor>
            <arglist>( dropAction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startDrag</name>
            <anchorfile>qml-qtquick-drag.html</anchorfile>
            <anchor>startDrag-method</anchor>
            <arglist>( supportedActions)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.DragEvent</name>
        <filename>qml-qtquick-dragevent.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>accept</name>
            <anchorfile>qml-qtquick-dragevent.html</anchorfile>
            <anchor>accept-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>accept</name>
            <anchorfile>qml-qtquick-dragevent.html</anchorfile>
            <anchor>accept-method</anchor>
            <arglist>( action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>acceptProposedAction</name>
            <anchorfile>qml-qtquick-dragevent.html</anchorfile>
            <anchor>acceptProposedAction-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>string</type>
            <name>getDataAsString</name>
            <anchorfile>qml-qtquick-dragevent.html</anchorfile>
            <anchor>getDataAsString-method</anchor>
            <arglist>( format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>string</type>
            <name>getDataAsArrayBuffer</name>
            <anchorfile>qml-qtquick-dragevent.html</anchorfile>
            <anchor>getDataAsArrayBuffer-method</anchor>
            <arglist>( format)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.DragHandler</name>
        <filename>qml-qtquick-draghandler.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.DropArea</name>
        <filename>qml-qtquick-droparea.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positionChanged</name>
            <anchorfile>qml-qtquick-droparea.html</anchorfile>
            <anchor>positionChanged-signal</anchor>
            <arglist>( drag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>entered</name>
            <anchorfile>qml-qtquick-droparea.html</anchorfile>
            <anchor>entered-signal</anchor>
            <arglist>( drag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>exited</name>
            <anchorfile>qml-qtquick-droparea.html</anchorfile>
            <anchor>exited-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>dropped</name>
            <anchorfile>qml-qtquick-droparea.html</anchorfile>
            <anchor>dropped-signal</anchor>
            <arglist>( drop)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.EllipseShape</name>
        <filename>qml-qtquick-particles-ellipseshape.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Emitter</name>
        <filename>qml-qtquick-particles-emitter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>emitParticles</name>
            <anchorfile>qml-qtquick-particles-emitter.html</anchorfile>
            <anchor>emitParticles-signal</anchor>
            <arglist>( particles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>burst</name>
            <anchorfile>qml-qtquick-particles-emitter.html</anchorfile>
            <anchor>burst-method</anchor>
            <arglist>( count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>burst</name>
            <anchorfile>qml-qtquick-particles-emitter.html</anchorfile>
            <anchor>burst-method</anchor>
            <arglist>( count,  int x,  int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pulse</name>
            <anchorfile>qml-qtquick-particles-emitter.html</anchorfile>
            <anchor>pulse-method</anchor>
            <arglist>( duration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.EnterKey</name>
        <filename>qml-qtquick-enterkey.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.EventPoint</name>
        <filename>qml-qtquick-eventpoint.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.EventTouchPoint</name>
        <filename>qml-qtquick-eventtouchpoint.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Flickable</name>
        <filename>qml-qtquick-flickable.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>movementStarted</name>
            <anchorfile>qml-qtquick-flickable.html</anchorfile>
            <anchor>movementStarted-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>movementEnded</name>
            <anchorfile>qml-qtquick-flickable.html</anchorfile>
            <anchor>movementEnded-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>flickStarted</name>
            <anchorfile>qml-qtquick-flickable.html</anchorfile>
            <anchor>flickStarted-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>flickEnded</name>
            <anchorfile>qml-qtquick-flickable.html</anchorfile>
            <anchor>flickEnded-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>flick</name>
            <anchorfile>qml-qtquick-flickable.html</anchorfile>
            <anchor>flick-method</anchor>
            <arglist>( xVelocity,  qreal yVelocity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>cancelFlick</name>
            <anchorfile>qml-qtquick-flickable.html</anchorfile>
            <anchor>cancelFlick-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>resizeContent</name>
            <anchorfile>qml-qtquick-flickable.html</anchorfile>
            <anchor>resizeContent-method</anchor>
            <arglist>( width,  real height,  QPointF center)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>returnToBounds</name>
            <anchorfile>qml-qtquick-flickable.html</anchorfile>
            <anchor>returnToBounds-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Flipable</name>
        <filename>qml-qtquick-flipable.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Flow</name>
        <filename>qml-qtquick-flow.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>forceLayout</name>
            <anchorfile>qml-qtquick-flow.html</anchorfile>
            <anchor>forceLayout-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positioningComplete</name>
            <anchorfile>qml-qtquick-flow.html</anchorfile>
            <anchor>positioningComplete-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.FocusScope</name>
        <filename>qml-qtquick-focusscope.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt.labs.folderlistmodel.FolderListModel</name>
        <filename>qml-qt-labs-folderlistmodel-folderlistmodel.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFolder</name>
            <anchorfile>qml-qt-labs-folderlistmodel-folderlistmodel.html</anchorfile>
            <anchor>isFolder-method</anchor>
            <arglist>( index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>var</type>
            <name>get</name>
            <anchorfile>qml-qt-labs-folderlistmodel-folderlistmodel.html</anchorfile>
            <anchor>get-method</anchor>
            <arglist>( index,  string property)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOf</name>
            <anchorfile>qml-qt-labs-folderlistmodel-folderlistmodel.html</anchorfile>
            <anchor>indexOf-method</anchor>
            <arglist>( file)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.FontLoader</name>
        <filename>qml-qtquick-fontloader.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.FontMetrics</name>
        <filename>qml-qtquick-fontmetrics.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>advanceWidth</name>
            <anchorfile>qml-qtquick-fontmetrics.html</anchorfile>
            <anchor>advanceWidth-method</anchor>
            <arglist>( text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>rect</type>
            <name>boundingRect</name>
            <anchorfile>qml-qtquick-fontmetrics.html</anchorfile>
            <anchor>boundingRect-method</anchor>
            <arglist>( text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>rect</type>
            <name>tightBoundingRect</name>
            <anchorfile>qml-qtquick-fontmetrics.html</anchorfile>
            <anchor>tightBoundingRect-method</anchor>
            <arglist>( text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>string</type>
            <name>elidedText</name>
            <anchorfile>qml-qtquick-fontmetrics.html</anchorfile>
            <anchor>elidedText-method</anchor>
            <arglist>( text,  enumeration mode,  real width,  int flags)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Friction</name>
        <filename>qml-qtquick-particles-friction.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.GestureEvent</name>
        <filename>qml-qtquick-gestureevent.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>grab</name>
            <anchorfile>qml-qtquick-gestureevent.html</anchorfile>
            <anchor>grab-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Gradient</name>
        <filename>qml-qtquick-gradient.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.GradientStop</name>
        <filename>qml-qtquick-gradientstop.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.GraphicsInfo</name>
        <filename>qml-qtquick-graphicsinfo.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Gravity</name>
        <filename>qml-qtquick-particles-gravity.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Grid</name>
        <filename>qml-qtquick-grid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>forceLayout</name>
            <anchorfile>qml-qtquick-grid.html</anchorfile>
            <anchor>forceLayout-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positioningComplete</name>
            <anchorfile>qml-qtquick-grid.html</anchorfile>
            <anchor>positioningComplete-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Layouts.GridLayout</name>
        <filename>qml-qtquick-layouts-gridlayout.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.GridMesh</name>
        <filename>qml-qtquick-gridmesh.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.GridView</name>
        <filename>qml-qtquick-gridview.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>add</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>add-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>remove</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>remove-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>moveCurrentIndexUp</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>moveCurrentIndexUp-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>moveCurrentIndexDown</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>moveCurrentIndexDown-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>moveCurrentIndexLeft</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>moveCurrentIndexLeft-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>moveCurrentIndexRight</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>moveCurrentIndexRight-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positionViewAtIndex</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>positionViewAtIndex-method</anchor>
            <arglist>( index,  PositionMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positionViewAtBeginning</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>positionViewAtBeginning-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positionViewAtEnd</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>positionViewAtEnd-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexAt</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>indexAt-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>itemAt</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>itemAt-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>itemAtIndex</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>itemAtIndex-method</anchor>
            <arglist>( index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>forceLayout</name>
            <anchorfile>qml-qtquick-gridview.html</anchorfile>
            <anchor>forceLayout-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.GroupGoal</name>
        <filename>qml-qtquick-particles-groupgoal.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.HandlerPoint</name>
        <filename>qml-qtquick-handlerpoint.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.HoverHandler</name>
        <filename>qml-qtquick-hoverhandler.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Image</name>
        <filename>qml-qtquick-image.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.ImageParticle</name>
        <filename>qml-qtquick-particles-imageparticle.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.IntValidator</name>
        <filename>qml-qtquick-intvalidator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Item</name>
        <filename>qml-qtquick-item.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>mapFromItem</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>mapFromItem-method</anchor>
            <arglist>( item,  real x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>mapFromItem</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>mapFromItem-method</anchor>
            <arglist>( item,  point p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>mapFromItem</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>mapFromItem-method</anchor>
            <arglist>( item,  real x,  real y,  real width,  real height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>mapFromItem</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>mapFromItem-method</anchor>
            <arglist>( item,  rect r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>mapToItem</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>mapToItem-method</anchor>
            <arglist>( item,  real x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>mapToItem</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>mapToItem-method</anchor>
            <arglist>( item,  point p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>mapToItem</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>mapToItem-method</anchor>
            <arglist>( item,  real x,  real y,  real width,  real height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>mapToItem</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>mapToItem-method</anchor>
            <arglist>( item,  rect r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>mapFromGlobal</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>mapFromGlobal-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>mapToGlobal</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>mapToGlobal-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>forceActiveFocus</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>forceActiveFocus-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>forceActiveFocus</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>forceActiveFocus-method</anchor>
            <arglist>( reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>nextItemInFocusChain</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>nextItemInFocusChain-method</anchor>
            <arglist>( forward)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>childAt</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>childAt-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>contains-method</anchor>
            <arglist>( point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>grabToImage</name>
            <anchorfile>qml-qtquick-item.html</anchorfile>
            <anchor>grabToImage-method</anchor>
            <arglist>( callback,  targetSize)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.ItemGrabResult</name>
        <filename>qml-qtquick-itemgrabresult.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveToFile</name>
            <anchorfile>qml-qtquick-itemgrabresult.html</anchorfile>
            <anchor>saveToFile-method</anchor>
            <arglist>( fileName)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.ItemParticle</name>
        <filename>qml-qtquick-particles-itemparticle.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>freeze</name>
            <anchorfile>qml-qtquick-particles-itemparticle.html</anchorfile>
            <anchor>freeze-method</anchor>
            <arglist>( item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>unfreeze</name>
            <anchorfile>qml-qtquick-particles-itemparticle.html</anchorfile>
            <anchor>unfreeze-method</anchor>
            <arglist>( item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>take</name>
            <anchorfile>qml-qtquick-particles-itemparticle.html</anchorfile>
            <anchor>take-method</anchor>
            <arglist>( item,  bool prioritize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>give</name>
            <anchorfile>qml-qtquick-particles-itemparticle.html</anchorfile>
            <anchor>give-method</anchor>
            <arglist>( item)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.KeyEvent</name>
        <filename>qml-qtquick-keyevent.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matches</name>
            <anchorfile>qml-qtquick-keyevent.html</anchorfile>
            <anchor>matches-method</anchor>
            <arglist>( key)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.KeyNavigation</name>
        <filename>qml-qtquick-keynavigation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Keys</name>
        <filename>qml-qtquick-keys.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>released</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>released-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>shortcutOverride</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>shortcutOverride-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit0Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>digit0Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit1Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>digit1Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit2Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>digit2Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit3Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>digit3Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit4Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>digit4Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit5Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>digit5Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit6Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>digit6Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit7Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>digit7Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit8Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>digit8Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit9Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>digit9Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>leftPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>leftPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>rightPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>rightPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>upPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>upPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>downPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>downPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>tabPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>tabPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>backtabPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>backtabPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>asteriskPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>asteriskPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>escapePressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>escapePressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>returnPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>returnPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>enterPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>enterPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>deletePressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>deletePressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>spacePressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>spacePressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>backPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>backPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>cancelPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>cancelPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>selectPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>selectPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>yesPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>yesPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>noPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>noPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>context1Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>context1Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>context2Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>context2Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>context3Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>context3Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>context4Pressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>context4Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>callPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>callPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>hangupPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>hangupPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>flipPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>flipPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>menuPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>menuPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>volumeUpPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>volumeUpPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>volumeDownPressed</name>
            <anchorfile>qml-qtquick-keys.html</anchorfile>
            <anchor>volumeDownPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Layouts.Layout</name>
        <filename>qml-qtquick-layouts-layout.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.LayoutMirroring</name>
        <filename>qml-qtquick-layoutmirroring.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.LineShape</name>
        <filename>qml-qtquick-particles-lineshape.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Shapes.LinearGradient</name>
        <filename>qml-qtquick-shapes-lineargradient.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ListView</name>
        <filename>qml-qtquick-listview.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>add</name>
            <anchorfile>qml-qtquick-listview.html</anchorfile>
            <anchor>add-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>remove</name>
            <anchorfile>qml-qtquick-listview.html</anchorfile>
            <anchor>remove-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>incrementCurrentIndex</name>
            <anchorfile>qml-qtquick-listview.html</anchorfile>
            <anchor>incrementCurrentIndex-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>decrementCurrentIndex</name>
            <anchorfile>qml-qtquick-listview.html</anchorfile>
            <anchor>decrementCurrentIndex-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positionViewAtIndex</name>
            <anchorfile>qml-qtquick-listview.html</anchorfile>
            <anchor>positionViewAtIndex-method</anchor>
            <arglist>( index,  PositionMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positionViewAtBeginning</name>
            <anchorfile>qml-qtquick-listview.html</anchorfile>
            <anchor>positionViewAtBeginning-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positionViewAtEnd</name>
            <anchorfile>qml-qtquick-listview.html</anchorfile>
            <anchor>positionViewAtEnd-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexAt</name>
            <anchorfile>qml-qtquick-listview.html</anchorfile>
            <anchor>indexAt-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>itemAt</name>
            <anchorfile>qml-qtquick-listview.html</anchorfile>
            <anchor>itemAt-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>itemAtIndex</name>
            <anchorfile>qml-qtquick-listview.html</anchorfile>
            <anchor>itemAtIndex-method</anchor>
            <arglist>( index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>forceLayout</name>
            <anchorfile>qml-qtquick-listview.html</anchorfile>
            <anchor>forceLayout-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Loader</name>
        <filename>qml-qtquick-loader.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>setSource</name>
            <anchorfile>qml-qtquick-loader.html</anchorfile>
            <anchor>setSource-method</anchor>
            <arglist>( source,  object properties)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>loaded</name>
            <anchorfile>qml-qtquick-loader.html</anchorfile>
            <anchor>loaded-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.MaskShape</name>
        <filename>qml-qtquick-particles-maskshape.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Matrix4x4</name>
        <filename>qml-qtquick-matrix4x4.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.MouseArea</name>
        <filename>qml-qtquick-mousearea.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>entered</name>
            <anchorfile>qml-qtquick-mousearea.html</anchorfile>
            <anchor>entered-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>exited</name>
            <anchorfile>qml-qtquick-mousearea.html</anchorfile>
            <anchor>exited-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positionChanged</name>
            <anchorfile>qml-qtquick-mousearea.html</anchorfile>
            <anchor>positionChanged-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>clicked</name>
            <anchorfile>qml-qtquick-mousearea.html</anchorfile>
            <anchor>clicked-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pressed</name>
            <anchorfile>qml-qtquick-mousearea.html</anchorfile>
            <anchor>pressed-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>released</name>
            <anchorfile>qml-qtquick-mousearea.html</anchorfile>
            <anchor>released-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pressAndHold</name>
            <anchorfile>qml-qtquick-mousearea.html</anchorfile>
            <anchor>pressAndHold-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>doubleClicked</name>
            <anchorfile>qml-qtquick-mousearea.html</anchorfile>
            <anchor>doubleClicked-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>canceled</name>
            <anchorfile>qml-qtquick-mousearea.html</anchorfile>
            <anchor>canceled-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>wheel</name>
            <anchorfile>qml-qtquick-mousearea.html</anchorfile>
            <anchor>wheel-signal</anchor>
            <arglist>( wheel)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.MouseEvent</name>
        <filename>qml-qtquick-mouseevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.MultiPointHandler</name>
        <filename>qml-qtquick-multipointhandler.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.MultiPointTouchArea</name>
        <filename>qml-qtquick-multipointtoucharea.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pressed</name>
            <anchorfile>qml-qtquick-multipointtoucharea.html</anchorfile>
            <anchor>pressed-signal</anchor>
            <arglist>( touchPoints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>updated</name>
            <anchorfile>qml-qtquick-multipointtoucharea.html</anchorfile>
            <anchor>updated-signal</anchor>
            <arglist>( touchPoints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>released</name>
            <anchorfile>qml-qtquick-multipointtoucharea.html</anchorfile>
            <anchor>released-signal</anchor>
            <arglist>( touchPoints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>canceled</name>
            <anchorfile>qml-qtquick-multipointtoucharea.html</anchorfile>
            <anchor>canceled-signal</anchor>
            <arglist>( touchPoints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>gestureStarted</name>
            <anchorfile>qml-qtquick-multipointtoucharea.html</anchorfile>
            <anchor>gestureStarted-signal</anchor>
            <arglist>( gesture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>touchUpdated</name>
            <anchorfile>qml-qtquick-multipointtoucharea.html</anchorfile>
            <anchor>touchUpdated-signal</anchor>
            <arglist>( touchPoints)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.NumberAnimation</name>
        <filename>qml-qtquick-numberanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.OpacityAnimator</name>
        <filename>qml-qtquick-opacityanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.OpenGLInfo</name>
        <filename>qml-qtquick-openglinfo.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ParallelAnimation</name>
        <filename>qml-qtquick-parallelanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ParentAnimation</name>
        <filename>qml-qtquick-parentanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ParentChange</name>
        <filename>qml-qtquick-parentchange.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Particle</name>
        <filename>qml-qtquick-particles-particle.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.ParticleExtruder</name>
        <filename>qml-qtquick-particles-particleextruder.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.ParticleGroup</name>
        <filename>qml-qtquick-particles-particlegroup.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.ParticlePainter</name>
        <filename>qml-qtquick-particles-particlepainter.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.ParticleSystem</name>
        <filename>qml-qtquick-particles-particlesystem.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pause</name>
            <anchorfile>qml-qtquick-particles-particlesystem.html</anchorfile>
            <anchor>pause-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>resume</name>
            <anchorfile>qml-qtquick-particles-particlesystem.html</anchorfile>
            <anchor>resume-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>start</name>
            <anchorfile>qml-qtquick-particles-particlesystem.html</anchorfile>
            <anchor>start-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>stop</name>
            <anchorfile>qml-qtquick-particles-particlesystem.html</anchorfile>
            <anchor>stop-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>restart</name>
            <anchorfile>qml-qtquick-particles-particlesystem.html</anchorfile>
            <anchor>restart-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>reset</name>
            <anchorfile>qml-qtquick-particles-particlesystem.html</anchorfile>
            <anchor>reset-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Path</name>
        <filename>qml-qtquick-path.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>point</type>
            <name>pointAtPercent</name>
            <anchorfile>qml-qtquick-path.html</anchorfile>
            <anchor>pointAtPercent-method</anchor>
            <arglist>( t)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathAngleArc</name>
        <filename>qml-qtquick-pathanglearc.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathAnimation</name>
        <filename>qml-qtquick-pathanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathArc</name>
        <filename>qml-qtquick-patharc.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathAttribute</name>
        <filename>qml-qtquick-pathattribute.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathCubic</name>
        <filename>qml-qtquick-pathcubic.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathCurve</name>
        <filename>qml-qtquick-pathcurve.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathElement</name>
        <filename>qml-qtquick-pathelement.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathInterpolator</name>
        <filename>qml-qtquick-pathinterpolator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathLine</name>
        <filename>qml-qtquick-pathline.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathMove</name>
        <filename>qml-qtquick-pathmove.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathMultiline</name>
        <filename>qml-qtquick-pathmultiline.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathPercent</name>
        <filename>qml-qtquick-pathpercent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathPolyline</name>
        <filename>qml-qtquick-pathpolyline.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathQuad</name>
        <filename>qml-qtquick-pathquad.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathSvg</name>
        <filename>qml-qtquick-pathsvg.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathText</name>
        <filename>qml-qtquick-pathtext.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PathView</name>
        <filename>qml-qtquick-pathview.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>incrementCurrentIndex</name>
            <anchorfile>qml-qtquick-pathview.html</anchorfile>
            <anchor>incrementCurrentIndex-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>decrementCurrentIndex</name>
            <anchorfile>qml-qtquick-pathview.html</anchorfile>
            <anchor>decrementCurrentIndex-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>movementStarted</name>
            <anchorfile>qml-qtquick-pathview.html</anchorfile>
            <anchor>movementStarted-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>movementEnded</name>
            <anchorfile>qml-qtquick-pathview.html</anchorfile>
            <anchor>movementEnded-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>flickStarted</name>
            <anchorfile>qml-qtquick-pathview.html</anchorfile>
            <anchor>flickStarted-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>flickEnded</name>
            <anchorfile>qml-qtquick-pathview.html</anchorfile>
            <anchor>flickEnded-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>dragStarted</name>
            <anchorfile>qml-qtquick-pathview.html</anchorfile>
            <anchor>dragStarted-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>dragEnded</name>
            <anchorfile>qml-qtquick-pathview.html</anchorfile>
            <anchor>dragEnded-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positionViewAtIndex</name>
            <anchorfile>qml-qtquick-pathview.html</anchorfile>
            <anchor>positionViewAtIndex-method</anchor>
            <arglist>( index,  PositionMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexAt</name>
            <anchorfile>qml-qtquick-pathview.html</anchorfile>
            <anchor>indexAt-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>itemAt</name>
            <anchorfile>qml-qtquick-pathview.html</anchorfile>
            <anchor>itemAt-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.PauseAnimation</name>
        <filename>qml-qtquick-pauseanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PinchArea</name>
        <filename>qml-qtquick-pincharea.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pinchStarted</name>
            <anchorfile>qml-qtquick-pincharea.html</anchorfile>
            <anchor>pinchStarted-signal</anchor>
            <arglist>( pinch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pinchUpdated</name>
            <anchorfile>qml-qtquick-pincharea.html</anchorfile>
            <anchor>pinchUpdated-signal</anchor>
            <arglist>( pinch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pinchFinished</name>
            <anchorfile>qml-qtquick-pincharea.html</anchorfile>
            <anchor>pinchFinished-signal</anchor>
            <arglist>( pinch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>smartZoom</name>
            <anchorfile>qml-qtquick-pincharea.html</anchorfile>
            <anchor>smartZoom-signal</anchor>
            <arglist>( pinch)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.PinchEvent</name>
        <filename>qml-qtquick-pinchevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PinchHandler</name>
        <filename>qml-qtquick-pinchhandler.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.PointDirection</name>
        <filename>qml-qtquick-particles-pointdirection.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PointHandler</name>
        <filename>qml-qtquick-pointhandler.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PointerDevice</name>
        <filename>qml-qtquick-pointerdevice.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PointerDeviceHandler</name>
        <filename>qml-qtquick-pointerdevicehandler.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PointerEvent</name>
        <filename>qml-qtquick-pointerevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PointerHandler</name>
        <filename>qml-qtquick-pointerhandler.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>grabChanged</name>
            <anchorfile>qml-qtquick-pointerhandler.html</anchorfile>
            <anchor>grabChanged-signal</anchor>
            <arglist>( transition,  EventPoint point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>canceled</name>
            <anchorfile>qml-qtquick-pointerhandler.html</anchorfile>
            <anchor>canceled-signal</anchor>
            <arglist>( point)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.PointerScrollEvent</name>
        <filename>qml-qtquick-pointerscrollevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Positioner</name>
        <filename>qml-qtquick-positioner.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PropertyAction</name>
        <filename>qml-qtquick-propertyaction.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PropertyAnimation</name>
        <filename>qml-qtquick-propertyanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.PropertyChanges</name>
        <filename>qml-qtquick-propertychanges.html</filename>
    </compound>
    <compound kind="class">
        <name>QQuickAsyncImageProvider</name>
        <filename>qquickasyncimageprovider.html</filename>
        <base>QQuickImageProvider</base>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QQuickImageResponse *</type>
            <name>requestImageResponse</name>
            <anchorfile>qquickasyncimageprovider.html</anchorfile>
            <anchor>requestImageResponse</anchor>
            <arglist>(const QString &amp;id, const QSize &amp;requestedSize) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickFramebufferObject</name>
        <filename>qquickframebufferobject.html</filename>
        <base>QQuickItem</base>
        <member kind="property" type="bool">
            <name>textureFollowsItemSize</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>textureFollowsItemSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>mirrorVertically</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>mirrorVertically-prop</anchor>
            <arglist></arglist>
        </member>
        <class>QQuickFramebufferObject::Renderer</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickFramebufferObject</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>QQuickFramebufferObject</anchor>
            <arglist>(QQuickItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>textureFollowsItemSize</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>textureFollowsItemSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureFollowsItemSize</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>textureFollowsItemSize-prop</anchor>
            <arglist>(bool follows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mirrorVertically</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>mirrorVertically-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMirrorVertically</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>mirrorVertically-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QQuickFramebufferObject::Renderer *</type>
            <name>createRenderer</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>createRenderer</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isTextureProvider</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>isTextureProvider</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSGTextureProvider *</type>
            <name>textureProvider</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>textureProvider</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>releaseResources</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>releaseResources</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureFollowsItemSizeChanged</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>textureFollowsItemSize-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mirrorVerticallyChanged</name>
            <anchorfile>qquickframebufferobject.html</anchorfile>
            <anchor>mirrorVertically-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickFramebufferObject::Renderer</name>
        <filename>qquickframebufferobject-renderer.html</filename>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>Renderer</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>Renderer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~Renderer</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>dtor.Renderer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>render</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>render</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QOpenGLFramebufferObject *</type>
            <name>createFramebufferObject</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>createFramebufferObject</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>synchronize</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>synchronize</anchor>
            <arglist>(QQuickFramebufferObject *item)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QOpenGLFramebufferObject *</type>
            <name>framebufferObject</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>framebufferObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>update</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>invalidateFramebufferObject</name>
            <anchorfile>qquickframebufferobject-renderer.html</anchorfile>
            <anchor>invalidateFramebufferObject</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickImageProvider</name>
        <filename>qquickimageprovider.html</filename>
        <base>QQmlImageProviderBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickImageProvider</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>QQuickImageProvider</anchor>
            <arglist>(QQmlImageProviderBase::ImageType type, QQmlImageProviderBase::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickImageProvider</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>dtor.QQuickImageProvider</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QQmlImageProviderBase::ImageType</type>
            <name>imageType</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>imageType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QQmlImageProviderBase::Flags</type>
            <name>flags</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QImage</type>
            <name>requestImage</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>requestImage</anchor>
            <arglist>(const QString &amp;id, QSize *size, const QSize &amp;requestedSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPixmap</type>
            <name>requestPixmap</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>requestPixmap</anchor>
            <arglist>(const QString &amp;id, QSize *size, const QSize &amp;requestedSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QQuickTextureFactory *</type>
            <name>requestTexture</name>
            <anchorfile>qquickimageprovider.html</anchorfile>
            <anchor>requestTexture</anchor>
            <arglist>(const QString &amp;id, QSize *size, const QSize &amp;requestedSize)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickImageResponse</name>
        <filename>qquickimageresponse.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickImageResponse</name>
            <anchorfile>qquickimageresponse.html</anchorfile>
            <anchor>QQuickImageResponse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickImageResponse</name>
            <anchorfile>qquickimageresponse.html</anchorfile>
            <anchor>dtor.QQuickImageResponse</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QQuickTextureFactory *</type>
            <name>textureFactory</name>
            <anchorfile>qquickimageresponse.html</anchorfile>
            <anchor>textureFactory</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>errorString</name>
            <anchorfile>qquickimageresponse.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>cancel</name>
            <anchorfile>qquickimageresponse.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qquickimageresponse.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickItem</name>
        <filename>qquickitem.html</filename>
        <base>QObject</base>
        <base>QQmlParserStatus</base>
        <member kind="property" type="QQuickItem*">
            <name>parent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>x</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>y</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>z</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>width</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>height</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>opacity</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>visible</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>state</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>childrenRect</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>childrenRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>baselineOffset</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>baselineOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>clip</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>focus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>activeFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>activeFocus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>activeFocusOnTab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>activeFocusOnTab-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>rotation</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>scale</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="TransformOrigin">
            <name>transformOrigin</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>transformOrigin-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>smooth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>smooth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>antialiasing</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>antialiasing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>implicitWidth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>implicitHeight</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitHeight-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Flag</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>Flag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ItemClipsChildrenToShape</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemAcceptsInputMethod</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemIsFocusScope</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemHasContents</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemAcceptsDrops</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QQuickItem::Flag">
            <name>Flags</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ItemChange</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ItemChange-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ItemChildAddedChange</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemChildRemovedChange</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemSceneChange</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemVisibleHasChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemParentHasChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemOpacityHasChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemActiveFocusHasChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemRotationHasChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemAntialiasingHasChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemDevicePixelRatioHasChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemEnabledHasChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ItemChange-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QQuickItem::ItemChangeData</class>
        <member kind="enumeration">
            <name>TransformOrigin</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>TransformOrigin-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TopLeft</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Top</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TopRight</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Left</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Center</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Right</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BottomLeft</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bottom</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BottomRight</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>TransformOrigin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>QQuickItem</anchor>
            <arglist>(QQuickItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>dtor.QQuickItem</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickWindow *</type>
            <name>window</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>parentItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParentItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>(QQuickItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stackBefore</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>stackBefore</anchor>
            <arglist>(const QQuickItem *sibling)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stackAfter</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>stackAfter</anchor>
            <arglist>(const QQuickItem *sibling)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>childrenRect</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>childrenRect-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QQuickItem *&gt;</type>
            <name>childItems</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>childItems</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>clip</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClip</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>state</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setState</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>baselineOffset</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>baselineOffset-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaselineOffset</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>baselineOffset-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetWidth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImplicitWidth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitWidth-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>implicitWidth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetHeight</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImplicitHeight</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitHeight-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>implicitHeight</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitHeight-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem::TransformOrigin</type>
            <name>transformOrigin</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>transformOrigin-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransformOrigin</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>transformOrigin-prop</anchor>
            <arglist>(QQuickItem::TransformOrigin )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>z</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rotation</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotation</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>scale</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>opacity</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacity</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>smooth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>smooth-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSmooth</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>smooth-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>activeFocusOnTab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>activeFocusOnTab-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveFocusOnTab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>activeFocusOnTab-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>antialiasing</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>antialiasing-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAntialiasing</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>antialiasing-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetAntialiasing</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>antialiasing-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem::Flags</type>
            <name>flags</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlag</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setFlag</anchor>
            <arglist>(QQuickItem::Flag flag, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QQuickItem::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasActiveFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>activeFocus-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>(bool focus, Qt::FocusReason reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFocusScope</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>isFocusScope</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>scopedFocusItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>scopedFocusItem</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAncestorOf</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>isAncestorOf</anchor>
            <arglist>(const QQuickItem *child) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>acceptedMouseButtons</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>acceptedMouseButtons</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptedMouseButtons</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setAcceptedMouseButtons</anchor>
            <arglist>(Qt::MouseButtons buttons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>acceptHoverEvents</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>acceptHoverEvents</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptHoverEvents</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setAcceptHoverEvents</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>acceptTouchEvents</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>acceptTouchEvents</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceptTouchEvents</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setAcceptTouchEvents</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCursor</type>
            <name>cursor</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>cursor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursor</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setCursor</anchor>
            <arglist>(const QCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetCursor</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>unsetCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>grabMouse</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>grabMouse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ungrabMouse</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ungrabMouse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>keepMouseGrab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>keepMouseGrab</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeepMouseGrab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setKeepMouseGrab</anchor>
            <arglist>(bool keep)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>filtersChildMouseEvents</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>filtersChildMouseEvents</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFiltersChildMouseEvents</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setFiltersChildMouseEvents</anchor>
            <arglist>(bool filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>grabTouchPoints</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>grabTouchPoints</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;ids)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ungrabTouchPoints</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>ungrabTouchPoints</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>keepTouchGrab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>keepTouchGrab</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeepTouchGrab</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>setKeepTouchGrab</anchor>
            <arglist>(bool keep)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;QQuickItemGrabResult&gt;</type>
            <name>grabToImage</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>grabToImage-1</anchor>
            <arglist>(const QSize &amp;targetSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>contains</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>containmentMask</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>containmentMask-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContainmentMask</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>containmentMask-prop</anchor>
            <arglist>(QObject *mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapToItem</anchor>
            <arglist>(const QQuickItem *item, const QPointF &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToScene</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapToScene</anchor>
            <arglist>(const QPointF &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapToGlobal</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapToGlobal</anchor>
            <arglist>(const QPointF &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectToItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapRectToItem</anchor>
            <arglist>(const QQuickItem *item, const QRectF &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectToScene</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapRectToScene</anchor>
            <arglist>(const QRectF &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapFromItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapFromItem</anchor>
            <arglist>(const QQuickItem *item, const QPointF &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapFromScene</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapFromScene</anchor>
            <arglist>(const QPointF &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>mapFromGlobal</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapFromGlobal</anchor>
            <arglist>(const QPointF &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectFromItem</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapRectFromItem</anchor>
            <arglist>(const QQuickItem *item, const QRectF &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRectFromScene</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mapRectFromScene</anchor>
            <arglist>(const QRectF &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>polish</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>polish</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>forceActiveFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>forceActiveFocus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>forceActiveFocus</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>forceActiveFocus-1</anchor>
            <arglist>(Qt::FocusReason reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>nextItemInFocusChain</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>nextItemInFocusChain</anchor>
            <arglist>(bool forward)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>childAt</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>childAt</anchor>
            <arglist>(qreal x, qreal y) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>inputMethodQuery</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>inputMethodQuery</anchor>
            <arglist>(Qt::InputMethodQuery query) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isTextureProvider</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>isTextureProvider</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSGTextureProvider *</type>
            <name>textureProvider</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>textureProvider</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>update</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>childrenRectChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>childrenRect-prop</anchor>
            <arglist>(const QRectF &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>baselineOffsetChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>baselineOffset-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeFocusChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>activeFocus-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeFocusOnTabChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>activeFocusOnTab-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>parentChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>(QQuickItem *)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>transformOriginChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>transformOrigin-prop</anchor>
            <arglist>(QQuickItem::TransformOrigin )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>smoothChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>smooth-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>antialiasingChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>antialiasing-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clipChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>windowChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>windowChanged</anchor>
            <arglist>(QQuickWindow *window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>opacityChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enabledChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>visibleChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>implicitWidthChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitWidth-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>implicitHeightChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>implicitHeight-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>containmentMaskChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>containmentMask-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *ev) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>isComponentComplete</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>isComponentComplete</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>itemChange</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>itemChange</anchor>
            <arglist>(QQuickItem::ItemChange change, const QQuickItem::ItemChangeData &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>updateInputMethod</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>updateInputMethod</anchor>
            <arglist>(Qt::InputMethodQueries queries)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>widthValid</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>widthValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>heightValid</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>heightValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>classBegin</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>classBegin</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>componentComplete</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>componentComplete</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>inputMethodEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>inputMethodEvent</anchor>
            <arglist>(QInputMethodEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseUngrabEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>mouseUngrabEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>touchUngrabEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>touchUngrabEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>touchEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>touchEvent</anchor>
            <arglist>(QTouchEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverEnterEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>hoverEnterEvent</anchor>
            <arglist>(QHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverMoveEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>hoverMoveEvent</anchor>
            <arglist>(QHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hoverLeaveEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>hoverLeaveEvent</anchor>
            <arglist>(QHoverEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QDragEnterEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QDragLeaveEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>childMouseEventFilter</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>childMouseEventFilter</anchor>
            <arglist>(QQuickItem *item, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>geometryChanged</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>geometryChanged</anchor>
            <arglist>(const QRectF &amp;newGeometry, const QRectF &amp;oldGeometry)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSGNode *</type>
            <name>updatePaintNode</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>updatePaintNode</anchor>
            <arglist>(QSGNode *oldNode, QQuickItem::UpdatePaintNodeData *updatePaintNodeData)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>releaseResources</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>releaseResources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updatePolish</name>
            <anchorfile>qquickitem.html</anchorfile>
            <anchor>updatePolish</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickItem::ItemChangeData</name>
        <filename>qquickitem-itemchangedata.html</filename>
    </compound>
    <compound kind="class">
        <name>QQuickItemGrabResult</name>
        <filename>qquickitemgrabresult.html</filename>
        <base>QObject</base>
        <member kind="property" type="QImage">
            <name>image</name>
            <anchorfile>qquickitemgrabresult.html</anchorfile>
            <anchor>image-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>url</name>
            <anchorfile>qquickitemgrabresult.html</anchorfile>
            <anchor>url-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>image</name>
            <anchorfile>qquickitemgrabresult.html</anchorfile>
            <anchor>image-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qquickitemgrabresult.html</anchorfile>
            <anchor>url-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveToFile</name>
            <anchorfile>qquickitemgrabresult.html</anchorfile>
            <anchor>saveToFile</anchor>
            <arglist>(const QString &amp;fileName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ready</name>
            <anchorfile>qquickitemgrabresult.html</anchorfile>
            <anchor>ready</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickPaintedItem</name>
        <filename>qquickpainteditem.html</filename>
        <base>QQuickItem</base>
        <member kind="property" type="QSize">
            <name>contentsSize</name>
            <anchorfile>qquickpainteditem-obsolete.html</anchorfile>
            <anchor>contentsSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>fillColor</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>fillColor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>contentsScale</name>
            <anchorfile>qquickpainteditem-obsolete.html</anchorfile>
            <anchor>contentsScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="RenderTarget">
            <name>renderTarget</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>renderTarget-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>textureSize</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>textureSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickPaintedItem</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>QQuickPaintedItem</anchor>
            <arglist>(QQuickItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickPaintedItem</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>dtor.QQuickPaintedItem</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="enumeration">
            <name>RenderTarget</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>RenderTarget-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Image</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>RenderTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FramebufferObject</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>RenderTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvertedYFramebufferObject</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>RenderTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PerformanceHint</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>PerformanceHint-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>FastFBOResizing</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>PerformanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QQuickPaintedItem::PerformanceHint">
            <name>PerformanceHints</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>PerformanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>opaquePainting</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>opaquePainting</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpaquePainting</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>setOpaquePainting</anchor>
            <arglist>(bool opaque)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>antialiasing</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>antialiasing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAntialiasing</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>setAntialiasing</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mipmap</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>mipmap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipmap</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>setMipmap</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickPaintedItem::PerformanceHints</type>
            <name>performanceHints</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>performanceHints</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPerformanceHint</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>setPerformanceHint</anchor>
            <arglist>(QQuickPaintedItem::PerformanceHint hint, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPerformanceHints</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>setPerformanceHints</anchor>
            <arglist>(QQuickPaintedItem::PerformanceHints hints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>contentsBoundingRect</name>
            <anchorfile>qquickpainteditem-obsolete.html</anchorfile>
            <anchor>contentsBoundingRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>contentsSize</name>
            <anchorfile>qquickpainteditem-obsolete.html</anchorfile>
            <anchor>contentsSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentsSize</name>
            <anchorfile>qquickpainteditem-obsolete.html</anchorfile>
            <anchor>contentsSize-prop</anchor>
            <arglist>(const QSize &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetContentsSize</name>
            <anchorfile>qquickpainteditem-obsolete.html</anchorfile>
            <anchor>resetContentsSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>contentsScale</name>
            <anchorfile>qquickpainteditem-obsolete.html</anchorfile>
            <anchor>contentsScale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentsScale</name>
            <anchorfile>qquickpainteditem-obsolete.html</anchorfile>
            <anchor>contentsScale-prop</anchor>
            <arglist>(qreal )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>textureSize</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>textureSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureSize</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>textureSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>fillColor</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>fillColor-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFillColor</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>fillColor-prop</anchor>
            <arglist>(const QColor &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickPaintedItem::RenderTarget</type>
            <name>renderTarget</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>renderTarget-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderTarget</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>renderTarget-prop</anchor>
            <arglist>(QQuickPaintedItem::RenderTarget target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isTextureProvider</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>isTextureProvider</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSGTextureProvider *</type>
            <name>textureProvider</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>textureProvider</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillColorChanged</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>fillColor-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contentsSizeChanged</name>
            <anchorfile>qquickpainteditem-obsolete.html</anchorfile>
            <anchor>contentsSize-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contentsScaleChanged</name>
            <anchorfile>qquickpainteditem-obsolete.html</anchorfile>
            <anchor>contentsScale-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderTargetChanged</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>renderTarget-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureSizeChanged</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>textureSize-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QSGNode *</type>
            <name>updatePaintNode</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>updatePaintNode</anchor>
            <arglist>(QSGNode *oldNode, QQuickItem::UpdatePaintNodeData *data) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>releaseResources</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>releaseResources</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>itemChange</name>
            <anchorfile>qquickpainteditem.html</anchorfile>
            <anchor>itemChange</anchor>
            <arglist>(QQuickItem::ItemChange change, const QQuickItem::ItemChangeData &amp;value) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickRenderControl</name>
        <filename>qquickrendercontrol.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickRenderControl</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>QQuickRenderControl</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickRenderControl</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>dtor.QQuickRenderControl</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepareThread</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>prepareThread</anchor>
            <arglist>(QThread *targetThread)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initialize</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>(QOpenGLContext *gl)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invalidate</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>polishItems</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>polishItems</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>render</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>render</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>sync</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>sync</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grab</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>grab</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindow *</type>
            <name>renderWindowFor</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>renderWindowFor</anchor>
            <arglist>(QQuickWindow *win, QPoint *offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWindow *</type>
            <name>renderWindow</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>renderWindow</anchor>
            <arglist>(QPoint *offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderRequested</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>renderRequested</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneChanged</name>
            <anchorfile>qquickrendercontrol.html</anchorfile>
            <anchor>sceneChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickTextDocument</name>
        <filename>qquicktextdocument.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickTextDocument</name>
            <anchorfile>qquicktextdocument.html</anchorfile>
            <anchor>QQuickTextDocument</anchor>
            <arglist>(QQuickItem *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>textDocument</name>
            <anchorfile>qquicktextdocument.html</anchorfile>
            <anchor>textDocument</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickTextureFactory</name>
        <filename>qquicktexturefactory.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickTextureFactory</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>QQuickTextureFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickTextureFactory</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>dtor.QQuickTextureFactory</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSGTexture *</type>
            <name>createTexture</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>createTexture</anchor>
            <arglist>(QQuickWindow *window) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSize</type>
            <name>textureSize</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>textureSize</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>textureByteCount</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>textureByteCount</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QImage</type>
            <name>image</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>image</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuickTextureFactory *</type>
            <name>textureFactoryForImage</name>
            <anchorfile>qquicktexturefactory.html</anchorfile>
            <anchor>textureFactoryForImage</anchor>
            <arglist>(const QImage &amp;image)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickView</name>
        <filename>qquickview.html</filename>
        <base>QQuickWindow</base>
        <member kind="property" type="ResizeMode">
            <name>resizeMode</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickView</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>QQuickView</anchor>
            <arglist>(QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickView</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>QQuickView-1</anchor>
            <arglist>(QQmlEngine *engine, QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickView</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>QQuickView-2</anchor>
            <arglist>(const QUrl &amp;source, QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickView</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>dtor.QQuickView</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlEngine *</type>
            <name>engine</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlContext *</type>
            <name>rootContext</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>rootContext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>rootObject</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>rootObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>ResizeMode</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>ResizeMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SizeViewToRootObject</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SizeRootObjectToView</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickView::ResizeMode</type>
            <name>resizeMode</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResizeMode</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist>(QQuickView::ResizeMode )</arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Null</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ready</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Loading</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickView::Status</type>
            <name>status</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QQmlError&gt;</type>
            <name>errors</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>errors</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>initialSize</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>initialSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInitialProperties</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>setInitialProperties</anchor>
            <arglist>(const QVariantMap &amp;initialProperties)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>statusChanged</anchor>
            <arglist>(QQuickView::Status status)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qquickview.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickWidget</name>
        <filename>qquickwidget.html</filename>
        <base>QWidget</base>
        <member kind="property" type="ResizeMode">
            <name>resizeMode</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickWidget</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>QQuickWidget</anchor>
            <arglist>(QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickWidget</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>QQuickWidget-1</anchor>
            <arglist>(QQmlEngine *engine, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickWidget</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>QQuickWidget-2</anchor>
            <arglist>(const QUrl &amp;source, QWidget *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickWidget</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>dtor.QQuickWidget</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlEngine *</type>
            <name>engine</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlContext *</type>
            <name>rootContext</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>rootContext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>rootObject</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>rootObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>ResizeMode</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>ResizeMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SizeViewToRootObject</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SizeRootObjectToView</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>ResizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickWidget::ResizeMode</type>
            <name>resizeMode</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResizeMode</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>resizeMode-prop</anchor>
            <arglist>(QQuickWidget::ResizeMode )</arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Null</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ready</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Loading</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickWidget::Status</type>
            <name>status</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QQmlError&gt;</type>
            <name>errors</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>errors</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>initialSize</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>initialSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grabFramebuffer</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>grabFramebuffer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearColor</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>setClearColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickWindow *</type>
            <name>quickWindow</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>quickWindow</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>statusChanged</anchor>
            <arglist>(QQuickWidget::Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneGraphError</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>sceneGraphError</anchor>
            <arglist>(QQuickWindow::SceneGraphError error, const QString &amp;message)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragEnterEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>dragEnterEvent</anchor>
            <arglist>(QDragEnterEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragMoveEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>dragMoveEvent</anchor>
            <arglist>(QDragMoveEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dragLeaveEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>dragLeaveEvent</anchor>
            <arglist>(QDragLeaveEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>dropEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>dropEvent</anchor>
            <arglist>(QDropEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>focusNextPrevChild</name>
            <anchorfile>qquickwidget.html</anchorfile>
            <anchor>focusNextPrevChild</anchor>
            <arglist>(bool next) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickWindow</name>
        <filename>qquickwindow.html</filename>
        <base>QWindow</base>
        <member kind="property" type="QColor">
            <name>color</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QQuickItem*">
            <name>contentItem</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>contentItem-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QQuickItem*">
            <name>activeFocusItem</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>activeFocusItem-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CreateTextureOption</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TextureHasAlphaChannel</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureHasMipmaps</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureOwnsGLTexture</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureCanUseAtlas</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureIsOpaque</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RenderStage</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>RenderStage-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BeforeSynchronizingStage</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>RenderStage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AfterSynchronizingStage</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>RenderStage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BeforeRenderingStage</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>RenderStage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AfterRenderingStage</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>RenderStage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AfterSwapStage</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>RenderStage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoStage</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>RenderStage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QQuickWindow::CreateTextureOption">
            <name>CreateTextureOptions</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SceneGraphError</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>SceneGraphError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ContextNotAvailable</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>SceneGraphError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TextRenderType</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>TextRenderType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>QtTextRendering</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>TextRenderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NativeTextRendering</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>TextRenderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>NativeObjectType</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>NativeObjectType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NativeObjectTexture</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>NativeObjectType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuickWindow</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>QQuickWindow</anchor>
            <arglist>(QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QQuickWindow</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>dtor.QQuickWindow</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>contentItem</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>contentItem-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>activeFocusItem</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>activeFocusItem-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>mouseGrabberItem</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>mouseGrabberItem</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>sendEvent</name>
            <anchorfile>qquickwindow-obsolete.html</anchorfile>
            <anchor>sendEvent</anchor>
            <arglist>(QQuickItem *item, QEvent *e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grabWindow</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>grabWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderTarget</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setRenderTarget</anchor>
            <arglist>(QOpenGLFramebufferObject *fbo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObject *</type>
            <name>renderTarget</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>renderTarget</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderTarget</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setRenderTarget-1</anchor>
            <arglist>(uint fboId, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>renderTargetId</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>renderTargetId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>renderTargetSize</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>renderTargetSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetOpenGLState</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>resetOpenGLState</anchor>
            <arglist>()</arglist>
        </member>
        <class>QQuickWindow::GraphicsStateInfo</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QQuickWindow::GraphicsStateInfo &amp;</type>
            <name>graphicsStateInfo</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>graphicsStateInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginExternalCommands</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>beginExternalCommands</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endExternalCommands</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>endExternalCommands</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlIncubationController *</type>
            <name>incubationController</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>incubationController</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>accessibleRoot</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>accessibleRoot</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>createTextureFromImage</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>createTextureFromImage-1</anchor>
            <arglist>(const QImage &amp;image) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>createTextureFromImage</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>createTextureFromImage</anchor>
            <arglist>(const QImage &amp;image, QQuickWindow::CreateTextureOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>createTextureFromId</name>
            <anchorfile>qquickwindow-obsolete.html</anchorfile>
            <anchor>createTextureFromId</anchor>
            <arglist>(uint id, const QSize &amp;size, QQuickWindow::CreateTextureOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>createTextureFromNativeObject</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>createTextureFromNativeObject</anchor>
            <arglist>(QQuickWindow::NativeObjectType type, const void *nativeObjectPtr, int nativeLayout, const QSize &amp;size, QQuickWindow::CreateTextureOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearBeforeRendering</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setClearBeforeRendering</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>clearBeforeRendering</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>clearBeforeRendering</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasDefaultAlphaBuffer</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>hasDefaultAlphaBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultAlphaBuffer</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setDefaultAlphaBuffer</anchor>
            <arglist>(bool useAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPersistentOpenGLContext</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setPersistentOpenGLContext</anchor>
            <arglist>(bool persistent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPersistentOpenGLContext</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>isPersistentOpenGLContext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPersistentSceneGraph</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setPersistentSceneGraph</anchor>
            <arglist>(bool persistent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPersistentSceneGraph</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>isPersistentSceneGraph</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>openglContext</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>openglContext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSceneGraphInitialized</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>isSceneGraphInitialized</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scheduleRenderJob</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>scheduleRenderJob</anchor>
            <arglist>(QRunnable *job, QQuickWindow::RenderStage stage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>effectiveDevicePixelRatio</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>effectiveDevicePixelRatio</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGRendererInterface *</type>
            <name>rendererInterface</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>rendererInterface</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setSceneGraphBackend</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setSceneGraphBackend</anchor>
            <arglist>(QSGRendererInterface::GraphicsApi api)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setSceneGraphBackend</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setSceneGraphBackend-1</anchor>
            <arglist>(const QString &amp;backend)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>sceneGraphBackend</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>sceneGraphBackend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGRectangleNode *</type>
            <name>createRectangleNode</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>createRectangleNode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGImageNode *</type>
            <name>createImageNode</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>createImageNode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNinePatchNode *</type>
            <name>createNinePatchNode</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>createNinePatchNode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuickWindow::TextRenderType</type>
            <name>textRenderType</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>textRenderType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setTextRenderType</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>setTextRenderType</anchor>
            <arglist>(QQuickWindow::TextRenderType renderType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frameSwapped</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>frameSwapped</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>openglContextCreated</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>openglContextCreated</anchor>
            <arglist>(QOpenGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneGraphInitialized</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>sceneGraphInitialized</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneGraphInvalidated</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>sceneGraphInvalidated</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beforeSynchronizing</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>beforeSynchronizing</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>afterSynchronizing</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>afterSynchronizing</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beforeRendering</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>beforeRendering</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>afterRendering</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>afterRendering</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>afterAnimating</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>afterAnimating</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneGraphAboutToStop</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>sceneGraphAboutToStop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closing</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>closing</anchor>
            <arglist>(QQuickCloseEvent *close)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>colorChanged</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeFocusItemChanged</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>activeFocusItem-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneGraphError</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>sceneGraphError</anchor>
            <arglist>(QQuickWindow::SceneGraphError error, const QString &amp;message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beforeRenderPassRecording</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>beforeRenderPassRecording</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>afterRenderPassRecording</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>afterRenderPassRecording</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>update</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseResources</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>releaseResources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>exposeEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>exposeEvent</anchor>
            <arglist>(QExposeEvent *) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *ev) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *ev) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *ev) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>tabletEvent</name>
            <anchorfile>qquickwindow.html</anchorfile>
            <anchor>tabletEvent</anchor>
            <arglist>(QTabletEvent *event) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuickWindow::GraphicsStateInfo</name>
        <filename>qquickwindow-graphicsstateinfo.html</filename>
    </compound>
    <compound kind="class">
        <name>QSGAbstractRenderer</name>
        <filename>qsgabstractrenderer.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>ClearModeBit</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>ClearModeBit-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ClearColorBuffer</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>ClearModeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClearDepthBuffer</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>ClearModeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClearStencilBuffer</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>ClearModeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGAbstractRenderer::ClearModeBit">
            <name>ClearMode</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>ClearModeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MatrixTransformFlag</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>MatrixTransformFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MatrixTransformFlipY</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>MatrixTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGAbstractRenderer::MatrixTransformFlag">
            <name>MatrixTransformFlags</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>MatrixTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRootNode</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setRootNode</anchor>
            <arglist>(QSGRootNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGRootNode *</type>
            <name>rootNode</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>rootNode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeviceRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setDeviceRect</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeviceRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setDeviceRect-1</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>deviceRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>deviceRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewportRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setViewportRect</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewportRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setViewportRect-1</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>viewportRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>viewportRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionMatrixToRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setProjectionMatrixToRect</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionMatrixToRect</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setProjectionMatrixToRect-1</anchor>
            <arglist>(const QRectF &amp;rect, QSGAbstractRenderer::MatrixTransformFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionMatrix</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setProjectionMatrix</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>projectionMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearColor</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setClearColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>clearColor</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>clearColor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearMode</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>setClearMode</anchor>
            <arglist>(QSGAbstractRenderer::ClearMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGAbstractRenderer::ClearMode</type>
            <name>clearMode</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>clearMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>renderScene</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>renderScene</anchor>
            <arglist>(uint fboId) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneGraphChanged</name>
            <anchorfile>qsgabstractrenderer.html</anchorfile>
            <anchor>sceneGraphChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGBasicGeometryNode</name>
        <filename>qsgbasicgeometrynode.html</filename>
        <base>QSGNode</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGBasicGeometryNode</name>
            <anchorfile>qsgbasicgeometrynode.html</anchorfile>
            <anchor>dtor.QSGBasicGeometryNode</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qsgbasicgeometrynode.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(QSGGeometry *geometry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QSGGeometry *</type>
            <name>geometry</name>
            <anchorfile>qsgbasicgeometrynode.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGGeometry *</type>
            <name>geometry</name>
            <anchorfile>qsgbasicgeometrynode.html</anchorfile>
            <anchor>geometry-1</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGClipNode</name>
        <filename>qsgclipnode.html</filename>
        <base>QSGBasicGeometryNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGClipNode</name>
            <anchorfile>qsgclipnode.html</anchorfile>
            <anchor>QSGClipNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGClipNode</name>
            <anchorfile>qsgclipnode.html</anchorfile>
            <anchor>dtor.QSGClipNode</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIsRectangular</name>
            <anchorfile>qsgclipnode.html</anchorfile>
            <anchor>setIsRectangular</anchor>
            <arglist>(bool rectHint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRectangular</name>
            <anchorfile>qsgclipnode.html</anchorfile>
            <anchor>isRectangular</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipRect</name>
            <anchorfile>qsgclipnode.html</anchorfile>
            <anchor>setClipRect</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>clipRect</name>
            <anchorfile>qsgclipnode.html</anchorfile>
            <anchor>clipRect</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGDynamicTexture</name>
        <filename>qsgdynamictexture.html</filename>
        <base>QSGTexture</base>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>updateTexture</name>
            <anchorfile>qsgdynamictexture.html</anchorfile>
            <anchor>updateTexture</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGEngine</name>
        <filename>qsgengine.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>CreateTextureOption</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TextureHasAlphaChannel</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureOwnsGLTexture</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureCanUseAtlas</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureIsOpaque</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGEngine::CreateTextureOption">
            <name>CreateTextureOptions</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>CreateTextureOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGEngine</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>QSGEngine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGEngine</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>dtor.QSGEngine</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initialize</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>(QOpenGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invalidate</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGAbstractRenderer *</type>
            <name>createRenderer</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>createRenderer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>createTextureFromImage</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>createTextureFromImage</anchor>
            <arglist>(const QImage &amp;image, QSGEngine::CreateTextureOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>createTextureFromId</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>createTextureFromId</anchor>
            <arglist>(uint id, const QSize &amp;size, QSGEngine::CreateTextureOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGRendererInterface *</type>
            <name>rendererInterface</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>rendererInterface</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGRectangleNode *</type>
            <name>createRectangleNode</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>createRectangleNode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGImageNode *</type>
            <name>createImageNode</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>createImageNode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNinePatchNode *</type>
            <name>createNinePatchNode</name>
            <anchorfile>qsgengine.html</anchorfile>
            <anchor>createNinePatchNode</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGFlatColorMaterial</name>
        <filename>qsgflatcolormaterial.html</filename>
        <base>QSGMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGFlatColorMaterial</name>
            <anchorfile>qsgflatcolormaterial.html</anchorfile>
            <anchor>QSGFlatColorMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qsgflatcolormaterial.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QColor &amp;</type>
            <name>color</name>
            <anchorfile>qsgflatcolormaterial.html</anchorfile>
            <anchor>color</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGGeometry</name>
        <filename>qsggeometry.html</filename>
        <member kind="enumeration">
            <name>AttributeType</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownAttribute</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PositionAttribute</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColorAttribute</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TexCoordAttribute</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TexCoord1Attribute</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TexCoord2Attribute</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>DataPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DataPattern-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AlwaysUploadPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DataPattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StreamPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DataPattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DataPattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DataPattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>DrawingMode</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DrawingMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DrawPoints</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DrawingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DrawLines</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DrawingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DrawLineLoop</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DrawingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DrawLineStrip</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DrawingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DrawTriangles</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DrawingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DrawTriangleStrip</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DrawingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DrawTriangleFan</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>DrawingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ByteType</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsignedByteType</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShortType</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsignedShortType</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IntType</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsignedIntType</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FloatType</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bytes2Type</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bytes3Type</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bytes4Type</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DoubleType</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QSGGeometry::Attribute</class>
        <class>QSGGeometry::AttributeSet</class>
        <class>QSGGeometry::Point2D</class>
        <class>QSGGeometry::TexturedPoint2D</class>
        <class>QSGGeometry::ColoredPoint2D</class>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QSGGeometry::AttributeSet &amp;</type>
            <name>defaultAttributes_Point2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>defaultAttributes_Point2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QSGGeometry::AttributeSet &amp;</type>
            <name>defaultAttributes_TexturedPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>defaultAttributes_TexturedPoint2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QSGGeometry::AttributeSet &amp;</type>
            <name>defaultAttributes_ColoredPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>defaultAttributes_ColoredPoint2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGGeometry</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>QSGGeometry</anchor>
            <arglist>(const QSGGeometry::AttributeSet &amp;attributes, int vertexCount, int indexCount, int indexType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGGeometry</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>dtor.QSGGeometry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDrawingMode</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>setDrawingMode</anchor>
            <arglist>(unsigned int mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>unsigned int</type>
            <name>drawingMode</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>drawingMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocate</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>allocate</anchor>
            <arglist>(int vertexCount, int indexCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>vertexCount</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>vertexData</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGGeometry::Point2D *</type>
            <name>vertexDataAsPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataAsPoint2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGGeometry::TexturedPoint2D *</type>
            <name>vertexDataAsTexturedPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataAsTexturedPoint2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGGeometry::ColoredPoint2D *</type>
            <name>vertexDataAsColoredPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataAsColoredPoint2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>vertexData</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexData-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QSGGeometry::Point2D *</type>
            <name>vertexDataAsPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataAsPoint2D-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QSGGeometry::TexturedPoint2D *</type>
            <name>vertexDataAsTexturedPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataAsTexturedPoint2D-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QSGGeometry::ColoredPoint2D *</type>
            <name>vertexDataAsColoredPoint2D</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataAsColoredPoint2D-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexType</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexCount</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>indexData</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint *</type>
            <name>indexDataAsUInt</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexDataAsUInt</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16 *</type>
            <name>indexDataAsUShort</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexDataAsUShort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sizeOfIndex</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>sizeOfIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>indexData</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexData-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uint *</type>
            <name>indexDataAsUInt</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexDataAsUInt-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const quint16 *</type>
            <name>indexDataAsUShort</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexDataAsUShort-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeCount</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>attributeCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QSGGeometry::Attribute *</type>
            <name>attributes</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sizeOfVertex</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>sizeOfVertex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateRectGeometry</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>updateRectGeometry</anchor>
            <arglist>(QSGGeometry *g, const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateTexturedRectGeometry</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>updateTexturedRectGeometry</anchor>
            <arglist>(QSGGeometry *g, const QRectF &amp;rect, const QRectF &amp;textureRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateColoredRectGeometry</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>updateColoredRectGeometry</anchor>
            <arglist>(QSGGeometry *g, const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndexDataPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>setIndexDataPattern</anchor>
            <arglist>(QSGGeometry::DataPattern p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGGeometry::DataPattern</type>
            <name>indexDataPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>indexDataPattern</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexDataPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>setVertexDataPattern</anchor>
            <arglist>(QSGGeometry::DataPattern p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGGeometry::DataPattern</type>
            <name>vertexDataPattern</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>vertexDataPattern</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>markIndexDataDirty</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>markIndexDataDirty</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>markVertexDataDirty</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>markVertexDataDirty</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lineWidth</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>lineWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineWidth</name>
            <anchorfile>qsggeometry.html</anchorfile>
            <anchor>setLineWidth</anchor>
            <arglist>(float width)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGGeometry::Attribute</name>
        <filename>qsggeometry-attribute.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Attribute</type>
            <name>create</name>
            <anchorfile>qsggeometry-attribute.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(int pos, int tupleSize, int primitiveType, bool isPosition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Attribute</type>
            <name>createWithAttributeType</name>
            <anchorfile>qsggeometry-attribute.html</anchorfile>
            <anchor>createWithAttributeType</anchor>
            <arglist>(int pos, int tupleSize, int primitiveType, AttributeType attributeType)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGGeometry::AttributeSet</name>
        <filename>qsggeometry-attributeset.html</filename>
    </compound>
    <compound kind="class">
        <name>QSGGeometry::ColoredPoint2D</name>
        <filename>qsggeometry-coloredpoint2d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>set</name>
            <anchorfile>qsggeometry-coloredpoint2d.html</anchorfile>
            <anchor>set</anchor>
            <arglist>(float x, float y, uchar red, uchar green, uchar blue, uchar alpha)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGGeometry::Point2D</name>
        <filename>qsggeometry-point2d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>set</name>
            <anchorfile>qsggeometry-point2d.html</anchorfile>
            <anchor>set</anchor>
            <arglist>(float x, float y)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGGeometry::TexturedPoint2D</name>
        <filename>qsggeometry-texturedpoint2d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>set</name>
            <anchorfile>qsggeometry-texturedpoint2d.html</anchorfile>
            <anchor>set</anchor>
            <arglist>(float x, float y, float tx, float ty)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGGeometryNode</name>
        <filename>qsggeometrynode.html</filename>
        <base>QSGBasicGeometryNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGGeometryNode</name>
            <anchorfile>qsggeometrynode.html</anchorfile>
            <anchor>QSGGeometryNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGGeometryNode</name>
            <anchorfile>qsggeometrynode.html</anchorfile>
            <anchor>dtor.QSGGeometryNode</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaterial</name>
            <anchorfile>qsggeometrynode.html</anchorfile>
            <anchor>setMaterial</anchor>
            <arglist>(QSGMaterial *material)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGMaterial *</type>
            <name>material</name>
            <anchorfile>qsggeometrynode.html</anchorfile>
            <anchor>material</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpaqueMaterial</name>
            <anchorfile>qsggeometrynode.html</anchorfile>
            <anchor>setOpaqueMaterial</anchor>
            <arglist>(QSGMaterial *material)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGMaterial *</type>
            <name>opaqueMaterial</name>
            <anchorfile>qsggeometrynode.html</anchorfile>
            <anchor>opaqueMaterial</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGImageNode</name>
        <filename>qsgimagenode.html</filename>
        <base>QSGGeometryNode</base>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setRect</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>setRect</anchor>
            <arglist>(const QRectF &amp;rect) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>setRect-1</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QRectF</type>
            <name>rect</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setSourceRect</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>setSourceRect</anchor>
            <arglist>(const QRectF &amp;rect) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceRect</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>setSourceRect-1</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QRectF</type>
            <name>sourceRect</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>sourceRect</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setTexture</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>setTexture</anchor>
            <arglist>(QSGTexture *texture) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSGTexture *</type>
            <name>texture</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setFiltering</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>setFiltering</anchor>
            <arglist>(QSGTexture::Filtering filtering) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSGTexture::Filtering</type>
            <name>filtering</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>filtering</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setMipmapFiltering</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>setMipmapFiltering</anchor>
            <arglist>(QSGTexture::Filtering filtering) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSGTexture::Filtering</type>
            <name>mipmapFiltering</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>mipmapFiltering</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="enumeration">
            <name>TextureCoordinatesTransformFlag</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoTransform</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MirrorHorizontally</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MirrorVertically</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGImageNode::TextureCoordinatesTransformFlag">
            <name>TextureCoordinatesTransformMode</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setTextureCoordinatesTransform</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>setTextureCoordinatesTransform</anchor>
            <arglist>(QSGImageNode::TextureCoordinatesTransformMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSGImageNode::TextureCoordinatesTransformMode</type>
            <name>textureCoordinatesTransform</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>textureCoordinatesTransform</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setOwnsTexture</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>setOwnsTexture</anchor>
            <arglist>(bool owns) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>ownsTexture</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>ownsTexture</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>rebuildGeometry</name>
            <anchorfile>qsgimagenode.html</anchorfile>
            <anchor>rebuildGeometry</anchor>
            <arglist>(QSGGeometry *g, QSGTexture *texture, const QRectF &amp;rect, QRectF sourceRect, QSGImageNode::TextureCoordinatesTransformMode texCoordMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGMaterial</name>
        <filename>qsgmaterial.html</filename>
        <member kind="enumeration">
            <name>Flag</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>Flag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Blending</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RequiresDeterminant</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RequiresFullMatrixExceptTranslate</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RequiresFullMatrix</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomCompileStep</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SupportsRhiShader</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RhiShaderWanted</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGMaterial::Flag">
            <name>Flags</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSGMaterialType *</type>
            <name>type</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSGMaterialShader *</type>
            <name>createShader</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>createShader</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>compare</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QSGMaterial *other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGMaterial::Flags</type>
            <name>flags</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlag</name>
            <anchorfile>qsgmaterial.html</anchorfile>
            <anchor>setFlag</anchor>
            <arglist>(QSGMaterial::Flags flags, bool on)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGMaterialRhiShader</name>
        <filename>qsgmaterialrhishader.html</filename>
        <base>QSGMaterialShader</base>
        <class>QSGMaterialRhiShader::RenderState</class>
        <class>QSGMaterialRhiShader::GraphicsPipelineState</class>
        <member kind="enumeration">
            <name>Flag</name>
            <anchorfile>qsgmaterialrhishader.html</anchorfile>
            <anchor>Flag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UpdatesGraphicsPipelineState</name>
            <anchorfile>qsgmaterialrhishader.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGMaterialRhiShader::Flag">
            <name>Flags</name>
            <anchorfile>qsgmaterialrhishader.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGMaterialRhiShader</name>
            <anchorfile>qsgmaterialrhishader.html</anchorfile>
            <anchor>QSGMaterialRhiShader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>updateUniformData</name>
            <anchorfile>qsgmaterialrhishader.html</anchorfile>
            <anchor>updateUniformData</anchor>
            <arglist>(QSGMaterialRhiShader::RenderState &amp;state, QSGMaterial *newMaterial, QSGMaterial *oldMaterial)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateSampledImage</name>
            <anchorfile>qsgmaterialrhishader.html</anchorfile>
            <anchor>updateSampledImage</anchor>
            <arglist>(QSGMaterialRhiShader::RenderState &amp;state, int binding, QSGTexture **texture, QSGMaterial *newMaterial, QSGMaterial *oldMaterial)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>updateGraphicsPipelineState</name>
            <anchorfile>qsgmaterialrhishader.html</anchorfile>
            <anchor>updateGraphicsPipelineState</anchor>
            <arglist>(QSGMaterialRhiShader::RenderState &amp;state, QSGMaterialRhiShader::GraphicsPipelineState *ps, QSGMaterial *newMaterial, QSGMaterial *oldMaterial)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGMaterialRhiShader::Flags</type>
            <name>flags</name>
            <anchorfile>qsgmaterialrhishader.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlag</name>
            <anchorfile>qsgmaterialrhishader.html</anchorfile>
            <anchor>setFlag</anchor>
            <arglist>(QSGMaterialRhiShader::Flags flags, bool on)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderFileName</name>
            <anchorfile>qsgmaterialrhishader.html</anchorfile>
            <anchor>setShaderFileName</anchor>
            <arglist>(QSGMaterialRhiShader::Stage stage, const QString &amp;filename)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setShader</name>
            <anchorfile>qsgmaterialrhishader.html</anchorfile>
            <anchor>setShader</anchor>
            <arglist>(QSGMaterialRhiShader::Stage stage, const QShader &amp;shader)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGMaterialRhiShader::GraphicsPipelineState</name>
        <filename>qsgmaterialrhishader-graphicspipelinestate.html</filename>
        <member kind="enumeration">
            <name>BlendFactor</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Zero</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>One</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SrcColor</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusSrcColor</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DstColor</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusDstColor</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SrcAlpha</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusSrcAlpha</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DstAlpha</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusDstAlpha</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConstantColor</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusConstantColor</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConstantAlpha</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusConstantAlpha</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SrcAlphaSaturate</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Src1Color</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusSrc1Color</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Src1Alpha</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusSrc1Alpha</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ColorMaskComponent</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>ColorMaskComponent-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>R</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>ColorMaskComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>G</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>ColorMaskComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>ColorMaskComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>ColorMaskComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGMaterialRhiShader::GraphicsPipelineState::ColorMaskComponent">
            <name>ColorMask</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>ColorMaskComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CullMode</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>CullMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CullNone</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>CullMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CullFront</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>CullMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CullBack</name>
            <anchorfile>qsgmaterialrhishader-graphicspipelinestate.html</anchorfile>
            <anchor>CullMode-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGMaterialRhiShader::RenderState</name>
        <filename>qsgmaterialrhishader-renderstate.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RenderState::DirtyStates</type>
            <name>dirtyStates</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>dirtyStates</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMatrixDirty</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>isMatrixDirty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOpacityDirty</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>isOpacityDirty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>opacity</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>opacity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>combinedMatrix</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>combinedMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>modelViewMatrix</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>modelViewMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>projectionMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>viewportRect</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>viewportRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>deviceRect</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>deviceRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>determinant</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>determinant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>devicePixelRatio</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray *</type>
            <name>uniformData</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>uniformData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiResourceUpdateBatch *</type>
            <name>resourceUpdateBatch</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>resourceUpdateBatch</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhi *</type>
            <name>rhi</name>
            <anchorfile>qsgmaterialrhishader-renderstate.html</anchorfile>
            <anchor>rhi</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGMaterialShader</name>
        <filename>qsgmaterialshader.html</filename>
        <class>QSGMaterialShader::RenderState</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGMaterialShader</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>QSGMaterialShader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>activate</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>activate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>deactivate</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>deactivate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(const QSGMaterialShader::RenderState &amp;state, QSGMaterial *newMaterial, QSGMaterial *oldMaterial)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual const char *const *</type>
            <name>attributeNames</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>attributeNames</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLShaderProgram *</type>
            <name>program</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>program</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderSourceFile</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>setShaderSourceFile</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QString &amp;sourceFile)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderSourceFiles</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>setShaderSourceFiles</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QStringList &amp;sourceFiles)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>compile</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>compile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initialize</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual const char *</type>
            <name>vertexShader</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>vertexShader</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual const char *</type>
            <name>fragmentShader</name>
            <anchorfile>qsgmaterialshader.html</anchorfile>
            <anchor>fragmentShader</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGMaterialShader::RenderState</name>
        <filename>qsgmaterialshader-renderstate.html</filename>
        <member kind="enumeration">
            <name>DirtyState</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>DirtyState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DirtyMatrix</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>DirtyState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyOpacity</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>DirtyState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyCachedMaterialData</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>DirtyState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyAll</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>DirtyState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGMaterialShader::RenderState::DirtyState">
            <name>DirtyStates</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>DirtyState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RenderState::DirtyStates</type>
            <name>dirtyStates</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>dirtyStates</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMatrixDirty</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>isMatrixDirty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOpacityDirty</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>isOpacityDirty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCachedMaterialDataDirty</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>isCachedMaterialDataDirty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>opacity</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>opacity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>combinedMatrix</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>combinedMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>modelViewMatrix</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>modelViewMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>projectionMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>viewportRect</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>viewportRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>deviceRect</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>deviceRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>determinant</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>determinant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>devicePixelRatio</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>context</name>
            <anchorfile>qsgmaterialshader-renderstate.html</anchorfile>
            <anchor>context</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGMaterialType</name>
        <filename>qsgmaterialtype.html</filename>
    </compound>
    <compound kind="class">
        <name>QSGNode</name>
        <filename>qsgnode.html</filename>
        <member kind="enumeration">
            <name>NodeType</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>NodeType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BasicNodeType</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GeometryNodeType</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransformNodeType</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClipNodeType</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpacityNodeType</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RootNodeType</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RenderNodeType</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>NodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Flag</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>Flag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>OwnedByParent</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UsePreprocess</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OwnsGeometry</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OwnsMaterial</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OwnsOpaqueMaterial</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsVisitableNode</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InternalReserved</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGNode::Flag">
            <name>Flags</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>DirtyStateBit</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DirtySubtreeBlocked</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyMatrix</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyNodeAdded</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyNodeRemoved</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyGeometry</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyMaterial</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyOpacity</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyForceUpdate</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyUsePreprocess</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyPropagationMask</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGNode::DirtyStateBit">
            <name>DirtyState</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>DirtyStateBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGNode</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>QSGNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGNode</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>dtor.QSGNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode *</type>
            <name>parent</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeChildNode</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>removeChildNode</anchor>
            <arglist>(QSGNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAllChildNodes</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>removeAllChildNodes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prependChildNode</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>prependChildNode</anchor>
            <arglist>(QSGNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendChildNode</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>appendChildNode</anchor>
            <arglist>(QSGNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertChildNodeBefore</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>insertChildNodeBefore</anchor>
            <arglist>(QSGNode *node, QSGNode *before)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertChildNodeAfter</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>insertChildNodeAfter</anchor>
            <arglist>(QSGNode *node, QSGNode *after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>childCount</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>childCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode *</type>
            <name>childAtIndex</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>childAtIndex</anchor>
            <arglist>(int i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode *</type>
            <name>firstChild</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>firstChild</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode *</type>
            <name>lastChild</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>lastChild</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode *</type>
            <name>nextSibling</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>nextSibling</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode *</type>
            <name>previousSibling</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>previousSibling</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode::NodeType</type>
            <name>type</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>markDirty</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>markDirty</anchor>
            <arglist>(QSGNode::DirtyState bits)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isSubtreeBlocked</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>isSubtreeBlocked</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGNode::Flags</type>
            <name>flags</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlag</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>setFlag</anchor>
            <arglist>(QSGNode::Flag f, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QSGNode::Flags f, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>preprocess</name>
            <anchorfile>qsgnode.html</anchorfile>
            <anchor>preprocess</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGOpacityNode</name>
        <filename>qsgopacitynode.html</filename>
        <base>QSGNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGOpacityNode</name>
            <anchorfile>qsgopacitynode.html</anchorfile>
            <anchor>QSGOpacityNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGOpacityNode</name>
            <anchorfile>qsgopacitynode.html</anchorfile>
            <anchor>dtor.QSGOpacityNode</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacity</name>
            <anchorfile>qsgopacitynode.html</anchorfile>
            <anchor>setOpacity</anchor>
            <arglist>(qreal opacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>opacity</name>
            <anchorfile>qsgopacitynode.html</anchorfile>
            <anchor>opacity</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGOpaqueTextureMaterial</name>
        <filename>qsgopaquetexturematerial.html</filename>
        <base>QSGMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGOpaqueTextureMaterial</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>QSGOpaqueTextureMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>setTexture</anchor>
            <arglist>(QSGTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>texture</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipmapFiltering</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>setMipmapFiltering</anchor>
            <arglist>(QSGTexture::Filtering filtering)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::Filtering</type>
            <name>mipmapFiltering</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>mipmapFiltering</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFiltering</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>setFiltering</anchor>
            <arglist>(QSGTexture::Filtering filtering)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::Filtering</type>
            <name>filtering</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>filtering</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalWrapMode</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>setHorizontalWrapMode</anchor>
            <arglist>(QSGTexture::WrapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::WrapMode</type>
            <name>horizontalWrapMode</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>horizontalWrapMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalWrapMode</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>setVerticalWrapMode</anchor>
            <arglist>(QSGTexture::WrapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::WrapMode</type>
            <name>verticalWrapMode</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>verticalWrapMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnisotropyLevel</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>setAnisotropyLevel</anchor>
            <arglist>(QSGTexture::AnisotropyLevel level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::AnisotropyLevel</type>
            <name>anisotropyLevel</name>
            <anchorfile>qsgopaquetexturematerial.html</anchorfile>
            <anchor>anisotropyLevel</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGRectangleNode</name>
        <filename>qsgrectanglenode.html</filename>
        <base>QSGGeometryNode</base>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setRect</name>
            <anchorfile>qsgrectanglenode.html</anchorfile>
            <anchor>setRect</anchor>
            <arglist>(const QRectF &amp;rect) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qsgrectanglenode.html</anchorfile>
            <anchor>setRect-1</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QRectF</type>
            <name>rect</name>
            <anchorfile>qsgrectanglenode.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setColor</name>
            <anchorfile>qsgrectanglenode.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(const QColor &amp;color) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QColor</type>
            <name>color</name>
            <anchorfile>qsgrectanglenode.html</anchorfile>
            <anchor>color</anchor>
            <arglist>() const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGRenderNode</name>
        <filename>qsgrendernode.html</filename>
        <base>QSGNode</base>
        <member kind="enumeration">
            <name>StateFlag</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DepthState</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StencilState</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScissorState</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColorState</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendState</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CullState</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ViewportState</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RenderTargetState</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGRenderNode::StateFlag">
            <name>StateFlags</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RenderingFlag</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>RenderingFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BoundedRectRendering</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>RenderingFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DepthAwareRendering</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>RenderingFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpaqueRendering</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>RenderingFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGRenderNode::RenderingFlag">
            <name>RenderingFlags</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>RenderingFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGRenderNode</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>dtor.QSGRenderNode</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSGRenderNode::StateFlags</type>
            <name>changedStates</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>changedStates</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>render</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>render</anchor>
            <arglist>(const QSGRenderNode::RenderState *state) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>releaseResources</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>releaseResources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSGRenderNode::RenderingFlags</type>
            <name>flags</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>rect</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix4x4 *</type>
            <name>matrix</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>matrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QSGClipNode *</type>
            <name>clipList</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>clipList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>inheritedOpacity</name>
            <anchorfile>qsgrendernode.html</anchorfile>
            <anchor>inheritedOpacity</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGRendererInterface</name>
        <filename>qsgrendererinterface.html</filename>
        <member kind="enumeration">
            <name>GraphicsApi</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>GraphicsApi-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Unknown</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>GraphicsApi-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Software</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>GraphicsApi-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>GraphicsApi-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Direct3D12</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>GraphicsApi-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenVG</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>GraphicsApi-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGLRhi</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>GraphicsApi-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Direct3D11Rhi</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>GraphicsApi-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VulkanRhi</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>GraphicsApi-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MetalRhi</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>GraphicsApi-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NullRhi</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>GraphicsApi-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Resource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>Resource-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DeviceResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>Resource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CommandQueueResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>Resource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CommandListResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>Resource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PainterResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>Resource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RhiResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>Resource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PhysicalDeviceResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>Resource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGLContextResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>Resource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeviceContextResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>Resource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CommandEncoderResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>Resource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VulkanInstanceResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>Resource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RenderPassResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>Resource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ShaderType</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownShadingLanguage</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GLSL</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HLSL</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RhiShader</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ShaderCompilationType</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderCompilationType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>RuntimeCompilation</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderCompilationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OfflineCompilation</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderCompilationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGRendererInterface::ShaderCompilationType">
            <name>ShaderCompilationTypes</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderCompilationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ShaderSourceType</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderSourceType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ShaderSourceString</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderSourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShaderSourceFile</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderSourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShaderByteCode</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderSourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGRendererInterface::ShaderSourceType">
            <name>ShaderSourceTypes</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>ShaderSourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSGRendererInterface::GraphicsApi</type>
            <name>graphicsApi</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>graphicsApi</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void *</type>
            <name>getResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>getResource</anchor>
            <arglist>(QQuickWindow *window, QSGRendererInterface::Resource resource) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void *</type>
            <name>getResource</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>getResource-1</anchor>
            <arglist>(QQuickWindow *window, const char *resource) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSGRendererInterface::ShaderType</type>
            <name>shaderType</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>shaderType</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSGRendererInterface::ShaderCompilationTypes</type>
            <name>shaderCompilationType</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>shaderCompilationType</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSGRendererInterface::ShaderSourceTypes</type>
            <name>shaderSourceType</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>shaderSourceType</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isApiRhiBased</name>
            <anchorfile>qsgrendererinterface.html</anchorfile>
            <anchor>isApiRhiBased</anchor>
            <arglist>(QSGRendererInterface::GraphicsApi api)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGSimpleMaterial</name>
        <filename>qsgsimplematerial.html</filename>
        <base>QSGMaterial</base>
    </compound>
    <compound kind="class">
        <name>QSGSimpleMaterialShader</name>
        <filename>qsgsimplematerialshader.html</filename>
        <base>QSGMaterialShader</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>uniformMatrixName</name>
            <anchorfile>qsgsimplematerialshader.html</anchorfile>
            <anchor>uniformMatrixName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>uniformOpacityName</name>
            <anchorfile>qsgsimplematerialshader.html</anchorfile>
            <anchor>uniformOpacityName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qsgsimplematerialshader.html</anchorfile>
            <anchor>updateState-1</anchor>
            <arglist>(const State *newState, const State *oldState) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resolveUniforms</name>
            <anchorfile>qsgsimplematerialshader.html</anchorfile>
            <anchor>resolveUniforms</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QList&lt;QByteArray&gt;</type>
            <name>attributes</name>
            <anchorfile>qsgsimplematerialshader.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSG_DECLARE_SIMPLE_SHADER</name>
            <anchorfile>qsgsimplematerialshader.html</anchorfile>
            <anchor>QSG_DECLARE_SIMPLE_SHADER</anchor>
            <arglist>( Shader,  State)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSG_DECLARE_SIMPLE_COMPARABLE_SHADER</name>
            <anchorfile>qsgsimplematerialshader.html</anchorfile>
            <anchor>QSG_DECLARE_SIMPLE_COMPARABLE_SHADER</anchor>
            <arglist>( Shader,  State)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGSimpleRectNode</name>
        <filename>qsgsimplerectnode.html</filename>
        <base>QSGGeometryNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGSimpleRectNode</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>QSGSimpleRectNode</anchor>
            <arglist>(const QRectF &amp;rect, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGSimpleRectNode</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>QSGSimpleRectNode-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>setRect</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>setRect-1</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qsgsimplerectnode.html</anchorfile>
            <anchor>color</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGSimpleTextureNode</name>
        <filename>qsgsimpletexturenode.html</filename>
        <base>QSGGeometryNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGSimpleTextureNode</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>QSGSimpleTextureNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGSimpleTextureNode</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>dtor.QSGSimpleTextureNode</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setRect</anchor>
            <arglist>(const QRectF &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setRect-1</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceRect</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setSourceRect</anchor>
            <arglist>(const QRectF &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceRect</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setSourceRect-1</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>sourceRect</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>sourceRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setTexture</anchor>
            <arglist>(QSGTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture *</type>
            <name>texture</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFiltering</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setFiltering</anchor>
            <arglist>(QSGTexture::Filtering filtering)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::Filtering</type>
            <name>filtering</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>filtering</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>TextureCoordinatesTransformFlag</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoTransform</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MirrorHorizontally</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MirrorVertically</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSGSimpleTextureNode::TextureCoordinatesTransformFlag">
            <name>TextureCoordinatesTransformMode</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>TextureCoordinatesTransformFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureCoordinatesTransform</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setTextureCoordinatesTransform</anchor>
            <arglist>(QSGSimpleTextureNode::TextureCoordinatesTransformMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGSimpleTextureNode::TextureCoordinatesTransformMode</type>
            <name>textureCoordinatesTransform</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>textureCoordinatesTransform</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOwnsTexture</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>setOwnsTexture</anchor>
            <arglist>(bool owns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ownsTexture</name>
            <anchorfile>qsgsimpletexturenode.html</anchorfile>
            <anchor>ownsTexture</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGTexture</name>
        <filename>qsgtexture.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGTexture</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>QSGTexture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGTexture</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>dtor.QSGTexture</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="enumeration">
            <name>WrapMode</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Repeat</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClampToEdge</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MirroredRepeat</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Filtering</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>Filtering-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>None</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>Filtering-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nearest</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>Filtering-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Linear</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>Filtering-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AnisotropyLevel</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>AnisotropyLevel-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AnisotropyNone</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>AnisotropyLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Anisotropy2x</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>AnisotropyLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Anisotropy4x</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>AnisotropyLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Anisotropy8x</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>AnisotropyLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Anisotropy16x</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>AnisotropyLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QSGTexture::NativeTexture</class>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>textureId</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>textureId</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::NativeTexture</type>
            <name>nativeTexture</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>nativeTexture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSize</type>
            <name>textureSize</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>textureSize</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>hasAlphaChannel</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>hasAlphaChannel</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>hasMipmaps</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>hasMipmaps</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRectF</type>
            <name>normalizedTextureSubRect</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>normalizedTextureSubRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isAtlasTexture</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>isAtlasTexture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSGTexture *</type>
            <name>removedFromAtlas</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>removedFromAtlas</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>bind</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateBindOptions</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>updateBindOptions</anchor>
            <arglist>(bool force)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipmapFiltering</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>setMipmapFiltering</anchor>
            <arglist>(QSGTexture::Filtering filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::Filtering</type>
            <name>mipmapFiltering</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>mipmapFiltering</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFiltering</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>setFiltering</anchor>
            <arglist>(QSGTexture::Filtering filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::Filtering</type>
            <name>filtering</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>filtering</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnisotropyLevel</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>setAnisotropyLevel</anchor>
            <arglist>(QSGTexture::AnisotropyLevel level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::AnisotropyLevel</type>
            <name>anisotropyLevel</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>anisotropyLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalWrapMode</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>setHorizontalWrapMode</anchor>
            <arglist>(QSGTexture::WrapMode hwrap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::WrapMode</type>
            <name>horizontalWrapMode</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>horizontalWrapMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalWrapMode</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>setVerticalWrapMode</anchor>
            <arglist>(QSGTexture::WrapMode vwrap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSGTexture::WrapMode</type>
            <name>verticalWrapMode</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>verticalWrapMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>convertToNormalizedSourceRect</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>convertToNormalizedSourceRect</anchor>
            <arglist>(const QRectF &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>comparisonKey</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>comparisonKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateRhiTexture</name>
            <anchorfile>qsgtexture.html</anchorfile>
            <anchor>updateRhiTexture</anchor>
            <arglist>(QRhi *rhi, QRhiResourceUpdateBatch *resourceUpdates)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGTexture::NativeTexture</name>
        <filename>qsgtexture-nativetexture.html</filename>
    </compound>
    <compound kind="class">
        <name>QSGTextureMaterial</name>
        <filename>qsgtexturematerial.html</filename>
        <base>QSGOpaqueTextureMaterial</base>
    </compound>
    <compound kind="class">
        <name>QSGTextureProvider</name>
        <filename>qsgtextureprovider.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSGTexture *</type>
            <name>texture</name>
            <anchorfile>qsgtextureprovider.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureChanged</name>
            <anchorfile>qsgtextureprovider.html</anchorfile>
            <anchor>textureChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGTransformNode</name>
        <filename>qsgtransformnode.html</filename>
        <base>QSGNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGTransformNode</name>
            <anchorfile>qsgtransformnode.html</anchorfile>
            <anchor>QSGTransformNode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSGTransformNode</name>
            <anchorfile>qsgtransformnode.html</anchorfile>
            <anchor>dtor.QSGTransformNode</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qsgtransformnode.html</anchorfile>
            <anchor>setMatrix</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix4x4 &amp;</type>
            <name>matrix</name>
            <anchorfile>qsgtransformnode.html</anchorfile>
            <anchor>matrix</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSGVertexColorMaterial</name>
        <filename>qsgvertexcolormaterial.html</filename>
        <base>QSGMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSGVertexColorMaterial</name>
            <anchorfile>qsgvertexcolormaterial.html</anchorfile>
            <anchor>QSGVertexColorMaterial</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Shapes.RadialGradient</name>
        <filename>qml-qtquick-shapes-radialgradient.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Rectangle</name>
        <filename>qml-qtquick-rectangle.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.RectangleShape</name>
        <filename>qml-qtquick-particles-rectangleshape.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.RegExpValidator</name>
        <filename>qml-qtquick-regexpvalidator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.RegularExpressionValidator</name>
        <filename>qml-qtquick-regularexpressionvalidator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Repeater</name>
        <filename>qml-qtquick-repeater.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>itemAdded</name>
            <anchorfile>qml-qtquick-repeater.html</anchorfile>
            <anchor>itemAdded-signal</anchor>
            <arglist>( index,  Item item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>itemRemoved</name>
            <anchorfile>qml-qtquick-repeater.html</anchorfile>
            <anchor>itemRemoved-signal</anchor>
            <arglist>( index,  Item item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Item</type>
            <name>itemAt</name>
            <anchorfile>qml-qtquick-repeater.html</anchorfile>
            <anchor>itemAt-method</anchor>
            <arglist>( index)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Rotation</name>
        <filename>qml-qtquick-rotation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.RotationAnimation</name>
        <filename>qml-qtquick-rotationanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.RotationAnimator</name>
        <filename>qml-qtquick-rotationanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Row</name>
        <filename>qml-qtquick-row.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>forceLayout</name>
            <anchorfile>qml-qtquick-row.html</anchorfile>
            <anchor>forceLayout-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positioningComplete</name>
            <anchorfile>qml-qtquick-row.html</anchorfile>
            <anchor>positioningComplete-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Layouts.RowLayout</name>
        <filename>qml-qtquick-layouts-rowlayout.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Scale</name>
        <filename>qml-qtquick-scale.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ScaleAnimator</name>
        <filename>qml-qtquick-scaleanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Window.Screen</name>
        <filename>qml-qtquick-window-screen.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>angleBetween</name>
            <anchorfile>qml-qtquick-window-screen.html</anchorfile>
            <anchor>angleBetween-method</anchor>
            <arglist>( a,  Qt::ScreenOrientation b)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.ScriptAction</name>
        <filename>qml-qtquick-scriptaction.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.SequentialAnimation</name>
        <filename>qml-qtquick-sequentialanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt.labs.settings.Settings</name>
        <filename>qml-qt-labs-settings-settings.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>var</type>
            <name>value</name>
            <anchorfile>qml-qt-labs-settings-settings.html</anchorfile>
            <anchor>value-method</anchor>
            <arglist>( key,  var defaultValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>setValue</name>
            <anchorfile>qml-qt-labs-settings-settings.html</anchorfile>
            <anchor>setValue-method</anchor>
            <arglist>( key,  var value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>sync</name>
            <anchorfile>qml-qt-labs-settings-settings.html</anchorfile>
            <anchor>sync-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.ShaderEffect</name>
        <filename>qml-qtquick-shadereffect.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ShaderEffectSource</name>
        <filename>qml-qtquick-shadereffectsource.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>scheduleUpdate</name>
            <anchorfile>qml-qtquick-shadereffectsource.html</anchorfile>
            <anchor>scheduleUpdate-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Shapes.Shape</name>
        <filename>qml-qtquick-shapes-shape.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Shapes.ShapeGradient</name>
        <filename>qml-qtquick-shapes-shapegradient.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Shapes.ShapePath</name>
        <filename>qml-qtquick-shapes-shapepath.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Shortcut</name>
        <filename>qml-qtquick-shortcut.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>activated</name>
            <anchorfile>qml-qtquick-shortcut.html</anchorfile>
            <anchor>activated-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>activatedAmbiguously</name>
            <anchorfile>qml-qtquick-shortcut.html</anchorfile>
            <anchor>activatedAmbiguously-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.SinglePointHandler</name>
        <filename>qml-qtquick-singlepointhandler.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.SmoothedAnimation</name>
        <filename>qml-qtquick-smoothedanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.SpringAnimation</name>
        <filename>qml-qtquick-springanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Sprite</name>
        <filename>qml-qtquick-sprite.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.SpriteGoal</name>
        <filename>qml-qtquick-particles-spritegoal.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.SpriteSequence</name>
        <filename>qml-qtquick-spritesequence.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>jumpTo</name>
            <anchorfile>qml-qtquick-spritesequence.html</anchorfile>
            <anchor>jumpTo-method</anchor>
            <arglist>( sprite)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Layouts.StackLayout</name>
        <filename>qml-qtquick-layouts-stacklayout.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.State</name>
        <filename>qml-qtquick-state.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.StateChangeScript</name>
        <filename>qml-qtquick-statechangescript.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.StateGroup</name>
        <filename>qml-qtquick-stategroup.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.SystemPalette</name>
        <filename>qml-qtquick-systempalette.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.TableView</name>
        <filename>qml-qtquick-tableview.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>forceLayout</name>
            <anchorfile>qml-qtquick-tableview.html</anchorfile>
            <anchor>forceLayout-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pooled</name>
            <anchorfile>qml-qtquick-tableview.html</anchorfile>
            <anchor>pooled-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>reused</name>
            <anchorfile>qml-qtquick-tableview.html</anchorfile>
            <anchor>reused-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.TapHandler</name>
        <filename>qml-qtquick-taphandler.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>tapped</name>
            <anchorfile>qml-qtquick-taphandler.html</anchorfile>
            <anchor>tapped-signal</anchor>
            <arglist>( eventPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>singleTapped</name>
            <anchorfile>qml-qtquick-taphandler.html</anchorfile>
            <anchor>singleTapped-signal</anchor>
            <arglist>( eventPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>doubleTapped</name>
            <anchorfile>qml-qtquick-taphandler.html</anchorfile>
            <anchor>doubleTapped-signal</anchor>
            <arglist>( eventPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>longPressed</name>
            <anchorfile>qml-qtquick-taphandler.html</anchorfile>
            <anchor>longPressed-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>tapCountChanged</name>
            <anchorfile>qml-qtquick-taphandler.html</anchorfile>
            <anchor>tapCountChanged-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.TargetDirection</name>
        <filename>qml-qtquick-particles-targetdirection.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Text</name>
        <filename>qml-qtquick-text.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>lineLaidOut</name>
            <anchorfile>qml-qtquick-text.html</anchorfile>
            <anchor>lineLaidOut-signal</anchor>
            <arglist>( line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>linkActivated</name>
            <anchorfile>qml-qtquick-text.html</anchorfile>
            <anchor>linkActivated-signal</anchor>
            <arglist>( link)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>linkHovered</name>
            <anchorfile>qml-qtquick-text.html</anchorfile>
            <anchor>linkHovered-signal</anchor>
            <arglist>( link)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>doLayout</name>
            <anchorfile>qml-qtquick-text-obsolete.html</anchorfile>
            <anchor>doLayout-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>forceLayout</name>
            <anchorfile>qml-qtquick-text.html</anchorfile>
            <anchor>forceLayout-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>linkAt</name>
            <anchorfile>qml-qtquick-text.html</anchorfile>
            <anchor>linkAt-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.TextEdit</name>
        <filename>qml-qtquick-textedit.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>linkActivated</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>linkActivated-signal</anchor>
            <arglist>( link)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>rectangle</type>
            <name>positionToRectangle</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>positionToRectangle-method</anchor>
            <arglist>( position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>positionAt</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>positionAt-method</anchor>
            <arglist>( x,  int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>moveCursorSelection</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>moveCursorSelection-method</anchor>
            <arglist>( position,  SelectionMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>deselect</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>deselect-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>selectAll</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>selectAll-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>selectWord</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>selectWord-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>select</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>select-method</anchor>
            <arglist>( start,  int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>isRightToLeft</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>isRightToLeft-method</anchor>
            <arglist>( start,  int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>cut</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>cut-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>copy</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>copy-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>paste</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>paste-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>undo</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>undo-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>redo</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>redo-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>string</type>
            <name>getText</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>getText-method</anchor>
            <arglist>( start,  int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>string</type>
            <name>getFormattedText</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>getFormattedText-method</anchor>
            <arglist>( start,  int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>insert</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>insert-method</anchor>
            <arglist>( position,  string text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>string</type>
            <name>remove</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>remove-method</anchor>
            <arglist>( start,  int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>linkHovered</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>linkHovered-signal</anchor>
            <arglist>( link)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>editingFinished</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>editingFinished-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>append-method</anchor>
            <arglist>( text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>linkAt</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>linkAt-method</anchor>
            <arglist>( x,  real y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>clear</name>
            <anchorfile>qml-qtquick-textedit.html</anchorfile>
            <anchor>clear-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.TextInput</name>
        <filename>qml-qtquick-textinput.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>string</type>
            <name>getText</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>getText-method</anchor>
            <arglist>( start,  int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>select</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>select-method</anchor>
            <arglist>( start,  int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>accepted</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>accepted-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>editingFinished</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>editingFinished-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>textEdited</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>textEdited-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>rect</type>
            <name>positionToRectangle</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>positionToRectangle-method</anchor>
            <arglist>( pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>positionAt</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>positionAt-method</anchor>
            <arglist>( x,  real y,  CursorPosition position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>deselect</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>deselect-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>selectAll</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>selectAll-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>isRightToLeft</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>isRightToLeft-method</anchor>
            <arglist>( start,  int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>cut</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>cut-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>copy</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>copy-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>paste</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>paste-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>undo</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>undo-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>redo</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>redo-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>insert</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>insert-method</anchor>
            <arglist>( position,  string text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>remove</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>remove-method</anchor>
            <arglist>( start,  int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>selectWord</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>selectWord-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>moveCursorSelection</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>moveCursorSelection-method</anchor>
            <arglist>( position,  SelectionMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>ensureVisible</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>ensureVisible-method</anchor>
            <arglist>( position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>clear</name>
            <anchorfile>qml-qtquick-textinput.html</anchorfile>
            <anchor>clear-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.TextMetrics</name>
        <filename>qml-qtquick-textmetrics.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.TouchPoint</name>
        <filename>qml-qtquick-touchpoint.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.TrailEmitter</name>
        <filename>qml-qtquick-particles-trailemitter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>emitFollowParticles</name>
            <anchorfile>qml-qtquick-particles-trailemitter.html</anchorfile>
            <anchor>emitFollowParticles-signal</anchor>
            <arglist>( particles,  Particle followed)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Transform</name>
        <filename>qml-qtquick-transform.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Transition</name>
        <filename>qml-qtquick-transition.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Translate</name>
        <filename>qml-qtquick-translate.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Turbulence</name>
        <filename>qml-qtquick-particles-turbulence.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.UniformAnimator</name>
        <filename>qml-qtquick-uniformanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Vector3dAnimation</name>
        <filename>qml-qtquick-vector3danimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.ViewTransition</name>
        <filename>qml-qtquick-viewtransition.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Particles.Wander</name>
        <filename>qml-qtquick-particles-wander.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt.labs.wavefrontmesh.WavefrontMesh</name>
        <filename>qml-qt-labs-wavefrontmesh-wavefrontmesh.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.WheelEvent</name>
        <filename>qml-qtquick-wheelevent.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.WheelHandler</name>
        <filename>qml-qtquick-wheelhandler.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>wheel</name>
            <anchorfile>qml-qtquick-wheelhandler.html</anchorfile>
            <anchor>wheel-signal</anchor>
            <arglist>( event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Window.Window</name>
        <filename>qml-qtquick-window-window.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>frameSwapped</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>frameSwapped-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>sceneGraphError</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>sceneGraphError-signal</anchor>
            <arglist>( error,  QString message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>closing</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>closing-signal</anchor>
            <arglist>( close)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>afterAnimating</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>afterAnimating-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>requestActivate</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>requestActivate-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>alert</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>alert-method</anchor>
            <arglist>( msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>close</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>close-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>raise</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>raise-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>lower</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>lower-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>show</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>show-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>hide</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>hide-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>showMinimized</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>showMinimized-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>showMaximized</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>showMaximized-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>showFullScreen</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>showFullScreen-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>showNormal</name>
            <anchorfile>qml-qtquick-window-window.html</anchorfile>
            <anchor>showNormal-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.XAnimator</name>
        <filename>qml-qtquick-xanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.YAnimator</name>
        <filename>qml-qtquick-yanimator.html</filename>
    </compound>
</tagfile>
