<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>Qt3D.Input.AbstractActionInput</name>
        <filename>qml-qt3d-input-abstractactioninput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.AbstractAnimation</name>
        <filename>qml-qt3d-animation-abstractanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AbstractAxisInput</name>
        <filename>qml-qt3d-input-abstractaxisinput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.AbstractClipAnimator</name>
        <filename>qml-qt3d-animation-abstractclipanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.AbstractClipBlendNode</name>
        <filename>qml-qt3d-animation-abstractclipblendnode.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AbstractPhysicalDevice</name>
        <filename>qml-qt3d-input-abstractphysicaldevice.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.AbstractRayCaster</name>
        <filename>qml-qt3d-render-abstractraycaster.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.AbstractSkeleton</name>
        <filename>qml-qt3d-core-abstractskeleton.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.AbstractTexture</name>
        <filename>qml-qt3d-render-abstracttexture.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.AbstractTextureImage</name>
        <filename>qml-qt3d-render-abstracttextureimage.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.Action</name>
        <filename>qml-qt3d-input-action.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.ActionInput</name>
        <filename>qml-qt3d-input-actioninput.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>sourceDeviceChanged</name>
            <anchorfile>qml-qt3d-input-actioninput.html</anchorfile>
            <anchor>sourceDeviceChanged-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>buttonsChanged</name>
            <anchorfile>qml-qt3d-input-actioninput.html</anchorfile>
            <anchor>buttonsChanged-signal</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;buttons)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.AdditiveClipBlend</name>
        <filename>qml-qt3d-animation-additiveclipblend.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.AlphaCoverage</name>
        <filename>qml-qt3d-render-alphacoverage.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.AlphaTest</name>
        <filename>qml-qt3d-render-alphatest.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AnalogAxisInput</name>
        <filename>qml-qt3d-input-analogaxisinput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.AnimationController</name>
        <filename>qml-qt3d-animation-animationcontroller.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>getAnimationIndex</name>
            <anchorfile>qml-qt3d-animation-animationcontroller.html</anchorfile>
            <anchor>getAnimationIndex-method</anchor>
            <arglist>( name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AnimationGroup</type>
            <name>getGroup</name>
            <anchorfile>qml-qt3d-animation-animationcontroller.html</anchorfile>
            <anchor>getGroup-method</anchor>
            <arglist>( index)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.AnimationGroup</name>
        <filename>qml-qt3d-animation-animationgroup.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Armature</name>
        <filename>qml-qt3d-core-armature.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Attribute</name>
        <filename>qml-qt3d-render-attribute.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.Axis</name>
        <filename>qml-qt3d-input-axis.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AxisAccumulator</name>
        <filename>qml-qt3d-input-axisaccumulator.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.AxisSetting</name>
        <filename>qml-qt3d-input-axissetting.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>deadZoneRadiusChanged</name>
            <anchorfile>qml-qt3d-input-axissetting.html</anchorfile>
            <anchor>deadZoneRadiusChanged-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>axisChanged</name>
            <anchorfile>qml-qt3d-input-axissetting.html</anchorfile>
            <anchor>axisChanged-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>smoothChanged</name>
            <anchorfile>qml-qt3d-input-axissetting.html</anchorfile>
            <anchor>smoothChanged-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.BlendEquation</name>
        <filename>qml-qt3d-render-blendequation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.BlendEquationArguments</name>
        <filename>qml-qt3d-render-blendequationarguments.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.BlendedClipAnimator</name>
        <filename>qml-qt3d-animation-blendedclipanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.BlitFramebuffer</name>
        <filename>qml-qt3d-render-blitframebuffer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Buffer</name>
        <filename>qml-qt3d-render-buffer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.BufferCapture</name>
        <filename>qml-qt3d-render-buffercapture.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.ButtonAxisInput</name>
        <filename>qml-qt3d-input-buttonaxisinput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Camera</name>
        <filename>qml-qt3d-render-camera.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quaternion</type>
            <name>tiltRotation</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>tiltRotation-method</anchor>
            <arglist>( angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quaternion</type>
            <name>panRotation</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>panRotation-method</anchor>
            <arglist>( angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quaternion</type>
            <name>rollRotation</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>rollRotation-method</anchor>
            <arglist>( angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quaternion</type>
            <name>rotation</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>rotation-method</anchor>
            <arglist>( angle,  vector3d axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>translate-method</anchor>
            <arglist>( vLocal,  enumeration option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translateWorld</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>translateWorld-method</anchor>
            <arglist>( vWorld,  enumeration option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tilt</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>tilt-method</anchor>
            <arglist>( angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pan</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>pan-method</anchor>
            <arglist>( angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pan</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>pan-method</anchor>
            <arglist>( angle,  vector3d axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>roll</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>roll-method</anchor>
            <arglist>( angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tiltAboutViewCenter</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>tiltAboutViewCenter-method</anchor>
            <arglist>( angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>panAboutViewCenter</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>panAboutViewCenter-method</anchor>
            <arglist>( angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>panAboutViewCenter</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>panAboutViewCenter-method</anchor>
            <arglist>( angle,  vector3d axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rollAboutViewCenter</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>rollAboutViewCenter-method</anchor>
            <arglist>( angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>rotate-method</anchor>
            <arglist>( q)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotateAboutViewCenter</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>rotateAboutViewCenter-method</anchor>
            <arglist>( q)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewAll</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>viewAll-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewEntity</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>viewEntity-method</anchor>
            <arglist>( entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewSphere</name>
            <anchorfile>qml-qt3d-render-camera.html</anchorfile>
            <anchor>viewSphere-method</anchor>
            <arglist>( center,  real radius)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.CameraLens</name>
        <filename>qml-qt3d-render-cameralens.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.CameraSelector</name>
        <filename>qml-qt3d-render-cameraselector.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ClearBuffers</name>
        <filename>qml-qt3d-render-clearbuffers.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.ClipAnimator</name>
        <filename>qml-qt3d-animation-clipanimator.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.ClipBlendValue</name>
        <filename>qml-qt3d-animation-clipblendvalue.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ClipPlane</name>
        <filename>qml-qt3d-render-clipplane.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ColorMask</name>
        <filename>qml-qt3d-render-colormask.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Component3D</name>
        <filename>qml-qt3d-core-component3d.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ComputeCommand</name>
        <filename>qml-qt3d-render-computecommand.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.ConeGeometry</name>
        <filename>qml-qt3d-extras-conegeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.ConeMesh</name>
        <filename>qml-qt3d-extras-conemesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.CuboidGeometry</name>
        <filename>qml-qt3d-extras-cuboidgeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.CuboidMesh</name>
        <filename>qml-qt3d-extras-cuboidmesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.CullFace</name>
        <filename>qml-qt3d-render-cullface.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.CylinderGeometry</name>
        <filename>qml-qt3d-extras-cylindergeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.CylinderMesh</name>
        <filename>qml-qt3d-extras-cylindermesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.DepthRange</name>
        <filename>qml-qt3d-render-depthrange.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.DepthTest</name>
        <filename>qml-qt3d-render-depthtest.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.DiffuseMapMaterial</name>
        <filename>qml-qt3d-extras-diffusemapmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.DiffuseSpecularMapMaterial</name>
        <filename>qml-qt3d-extras-diffusespecularmapmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.DiffuseSpecularMaterial</name>
        <filename>qml-qt3d-extras-diffusespecularmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.DirectionalLight</name>
        <filename>qml-qt3d-render-directionallight.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.DispatchCompute</name>
        <filename>qml-qt3d-render-dispatchcompute.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Dithering</name>
        <filename>qml-qt3d-render-dithering.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Effect</name>
        <filename>qml-qt3d-render-effect.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Entity</name>
        <filename>qml-qt3d-core-entity.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.EntityLoader</name>
        <filename>qml-qt3d-core-entityloader.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.EnvironmentLight</name>
        <filename>qml-qt3d-render-environmentlight.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.ExtrudedTextGeometry</name>
        <filename>qml-qt3d-extras-extrudedtextgeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.ExtrudedTextMesh</name>
        <filename>qml-qt3d-extras-extrudedtextmesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.FilterKey</name>
        <filename>qml-qt3d-render-filterkey.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.FirstPersonCameraController</name>
        <filename>qml-qt3d-extras-firstpersoncameracontroller.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.ForwardRenderer</name>
        <filename>qml-qt3d-extras-forwardrenderer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Logic.FrameAction</name>
        <filename>qml-qt3d-logic-frameaction.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>triggered</name>
            <anchorfile>qml-qt3d-logic-frameaction.html</anchorfile>
            <anchor>triggered-signal</anchor>
            <arglist>( dt)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.FrameGraphNode</name>
        <filename>qml-qt3d-render-framegraphnode.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.FrontFace</name>
        <filename>qml-qt3d-render-frontface.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.FrustumCulling</name>
        <filename>qml-qt3d-render-frustumculling.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Geometry</name>
        <filename>qml-qt3d-render-geometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.GeometryRenderer</name>
        <filename>qml-qt3d-render-geometryrenderer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.GoochMaterial</name>
        <filename>qml-qt3d-extras-goochmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.GraphicsApiFilter</name>
        <filename>qml-qt3d-render-graphicsapifilter.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.InputChord</name>
        <filename>qml-qt3d-input-inputchord.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.InputSequence</name>
        <filename>qml-qt3d-input-inputsequence.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>timeoutChanged</name>
            <anchorfile>qml-qt3d-input-inputsequence.html</anchorfile>
            <anchor>timeoutChanged-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>buttonIntervalChanged</name>
            <anchorfile>qml-qt3d-input-inputsequence.html</anchorfile>
            <anchor>buttonIntervalChanged-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.InputSettings</name>
        <filename>qml-qt3d-input-inputsettings.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Joint</name>
        <filename>qml-qt3d-core-joint.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.KeyEvent</name>
        <filename>qml-qt3d-input-keyevent.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matches</name>
            <anchorfile>qml-qt3d-input-keyevent.html</anchorfile>
            <anchor>matches-method</anchor>
            <arglist>( key)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.KeyboardDevice</name>
        <filename>qml-qt3d-input-keyboarddevice.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.KeyboardHandler</name>
        <filename>qml-qt3d-input-keyboardhandler.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit0Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>digit0Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit1Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>digit1Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit2Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>digit2Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit3Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>digit3Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit4Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>digit4Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit5Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>digit5Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit6Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>digit6Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit7Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>digit7Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit8Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>digit8Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>digit9Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>digit9Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>leftPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>leftPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>rightPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>rightPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>upPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>upPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>downPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>downPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>tabPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>tabPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>backtabPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>backtabPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>asteriskPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>asteriskPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>numberSignPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>numberSignPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>escapePressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>escapePressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>returnPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>returnPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>enterPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>enterPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>deletePressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>deletePressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>spacePressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>spacePressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>backPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>backPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>cancelPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>cancelPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>selectPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>selectPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>yesPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>yesPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>noPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>noPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>context1Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>context1Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>context2Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>context2Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>context3Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>context3Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>context4Pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>context4Pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>callPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>callPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>hangupPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>hangupPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>flipPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>flipPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>menuPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>menuPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>volumeUpPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>volumeUpPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>volumeDownPressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>volumeDownPressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pressed</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>pressed-signal</anchor>
            <arglist>( event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>released</name>
            <anchorfile>qml-qt3d-input-keyboardhandler.html</anchorfile>
            <anchor>released-signal</anchor>
            <arglist>( event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.KeyframeAnimation</name>
        <filename>qml-qt3d-animation-keyframeanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Layer</name>
        <filename>qml-qt3d-render-layer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.LayerFilter</name>
        <filename>qml-qt3d-render-layerfilter.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.LerpClipBlend</name>
        <filename>qml-qt3d-animation-lerpclipblend.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.LevelOfDetail</name>
        <filename>qml-qt3d-render-levelofdetail.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.LevelOfDetailBoundingSphere</name>
        <filename>qml-qt3d-render-levelofdetailboundingsphere.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.LevelOfDetailLoader</name>
        <filename>qml-qt3d-render-levelofdetailloader.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.LevelOfDetailSwitch</name>
        <filename>qml-qt3d-render-levelofdetailswitch.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Light</name>
        <filename>qml-qt3d-render-light.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.LineWidth</name>
        <filename>qml-qt3d-render-linewidth.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.LogicalDevice</name>
        <filename>qml-qt3d-input-logicaldevice.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Material</name>
        <filename>qml-qt3d-render-material.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.MemoryBarrier</name>
        <filename>qml-qt3d-render-memorybarrier.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Mesh</name>
        <filename>qml-qt3d-render-mesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.MetalRoughMaterial</name>
        <filename>qml-qt3d-extras-metalroughmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.MorphTarget</name>
        <filename>qml-qt3d-animation-morphtarget.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MorphTarget</type>
            <name>fromGeometry</name>
            <anchorfile>qml-qt3d-animation-morphtarget.html</anchorfile>
            <anchor>fromGeometry-method</anchor>
            <arglist>( geometry,  stringList)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.MorphingAnimation</name>
        <filename>qml-qt3d-animation-morphinganimation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.MouseDevice</name>
        <filename>qml-qt3d-input-mousedevice.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.MouseEvent</name>
        <filename>qml-qt3d-input-mouseevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.MouseHandler</name>
        <filename>qml-qt3d-input-mousehandler.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>clicked</name>
            <anchorfile>qml-qt3d-input-mousehandler.html</anchorfile>
            <anchor>clicked-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>doubleClicked</name>
            <anchorfile>qml-qt3d-input-mousehandler.html</anchorfile>
            <anchor>doubleClicked-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>entered</name>
            <anchorfile>qml-qt3d-input-mousehandler.html</anchorfile>
            <anchor>entered-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>exited</name>
            <anchorfile>qml-qt3d-input-mousehandler.html</anchorfile>
            <anchor>exited-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pressed</name>
            <anchorfile>qml-qt3d-input-mousehandler.html</anchorfile>
            <anchor>pressed-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>released</name>
            <anchorfile>qml-qt3d-input-mousehandler.html</anchorfile>
            <anchor>released-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pressAndHold</name>
            <anchorfile>qml-qt3d-input-mousehandler.html</anchorfile>
            <anchor>pressAndHold-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>positionChanged</name>
            <anchorfile>qml-qt3d-input-mousehandler.html</anchorfile>
            <anchor>positionChanged-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>wheel</name>
            <anchorfile>qml-qt3d-input-mousehandler.html</anchorfile>
            <anchor>wheel-signal</anchor>
            <arglist>( mouse)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.MultiSampleAntiAliasing</name>
        <filename>qml-qt3d-render-multisampleantialiasing.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.NoDepthMask</name>
        <filename>qml-qt3d-render-nodepthmask.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.NoDraw</name>
        <filename>qml-qt3d-render-nodraw.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.NoPicking</name>
        <filename>qml-qt3d-render-nopicking.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Node</name>
        <filename>qml-qt3d-core-node.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.NodeInstantiator</name>
        <filename>qml-qt3d-core-nodeinstantiator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>objectAdded</name>
            <anchorfile>qml-qt3d-core-nodeinstantiator.html</anchorfile>
            <anchor>objectAdded-signal</anchor>
            <arglist>( index,  QtObject object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>objectRemoved</name>
            <anchorfile>qml-qt3d-core-nodeinstantiator.html</anchorfile>
            <anchor>objectRemoved-signal</anchor>
            <arglist>( index,  QtObject object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QtQml::QtObject</type>
            <name>objectAt</name>
            <anchorfile>qml-qt3d-core-nodeinstantiator.html</anchorfile>
            <anchor>objectAt-method</anchor>
            <arglist>( index)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.NormalDiffuseMapAlphaMaterial</name>
        <filename>qml-qt3d-extras-normaldiffusemapalphamaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.NormalDiffuseMapMaterial</name>
        <filename>qml-qt3d-extras-normaldiffusemapmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.NormalDiffuseSpecularMapMaterial</name>
        <filename>qml-qt3d-extras-normaldiffusespecularmapmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ObjectPicker</name>
        <filename>qml-qt3d-render-objectpicker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>clicked</name>
            <anchorfile>qml-qt3d-render-objectpicker.html</anchorfile>
            <anchor>clicked-signal</anchor>
            <arglist>( pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>pressed</name>
            <anchorfile>qml-qt3d-render-objectpicker.html</anchorfile>
            <anchor>pressed-signal</anchor>
            <arglist>( pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>released</name>
            <anchorfile>qml-qt3d-render-objectpicker.html</anchorfile>
            <anchor>released-signal</anchor>
            <arglist>( pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>clicked</name>
            <anchorfile>qml-qt3d-render-objectpicker.html</anchorfile>
            <anchor>clicked-signal</anchor>
            <arglist>( pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>moved</name>
            <anchorfile>qml-qt3d-render-objectpicker.html</anchorfile>
            <anchor>moved-signal</anchor>
            <arglist>( pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>entered</name>
            <anchorfile>qml-qt3d-render-objectpicker.html</anchorfile>
            <anchor>entered-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>exited</name>
            <anchorfile>qml-qt3d-render-objectpicker.html</anchorfile>
            <anchor>exited-signal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.OrbitCameraController</name>
        <filename>qml-qt3d-extras-orbitcameracontroller.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Parameter</name>
        <filename>qml-qt3d-render-parameter.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.PerVertexColorMaterial</name>
        <filename>qml-qt3d-extras-pervertexcolormaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.PhongAlphaMaterial</name>
        <filename>qml-qt3d-extras-phongalphamaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.PhongMaterial</name>
        <filename>qml-qt3d-extras-phongmaterial.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PickEvent</name>
        <filename>qml-qt3d-render-pickevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PickLineEvent</name>
        <filename>qml-qt3d-render-picklineevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PickPointEvent</name>
        <filename>qml-qt3d-render-pickpointevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PickTriangleEvent</name>
        <filename>qml-qt3d-render-picktriangleevent.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PickingSettings</name>
        <filename>qml-qt3d-render-pickingsettings.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.PlaneGeometry</name>
        <filename>qml-qt3d-extras-planegeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.PlaneMesh</name>
        <filename>qml-qt3d-extras-planemesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PointLight</name>
        <filename>qml-qt3d-render-pointlight.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PointSize</name>
        <filename>qml-qt3d-render-pointsize.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.PolygonOffset</name>
        <filename>qml-qt3d-render-polygonoffset.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ProximityFilter</name>
        <filename>qml-qt3d-render-proximityfilter.html</filename>
    </compound>
    <compound kind="namespace">
        <name>Qt3DAnimation</name>
        <filename>qt3danimation.html</filename>
        <class>Qt3DAnimation::QAbstractAnimation</class>
        <class>Qt3DAnimation::QAbstractAnimationClip</class>
        <class>Qt3DAnimation::QAbstractClipAnimator</class>
        <class>Qt3DAnimation::QAbstractClipBlendNode</class>
        <class>Qt3DAnimation::QAdditiveClipBlend</class>
        <class>Qt3DAnimation::QAnimationAspect</class>
        <class>Qt3DAnimation::QAnimationCallback</class>
        <class>Qt3DAnimation::QKeyFrame</class>
        <class>Qt3DAnimation::QChannel</class>
        <class>Qt3DAnimation::QAnimationClipData</class>
        <class>Qt3DAnimation::QAnimationClip</class>
        <class>Qt3DAnimation::QAnimationClipLoader</class>
        <class>Qt3DAnimation::QKeyframeAnimation</class>
        <class>Qt3DAnimation::QAnimationGroup</class>
        <class>Qt3DAnimation::QAnimationController</class>
        <class>Qt3DAnimation::QBlendedClipAnimator</class>
        <class>Qt3DAnimation::QCallbackMapping</class>
        <class>Qt3DAnimation::QChannelMapper</class>
        <class>Qt3DAnimation::QChannelMapping</class>
        <class>Qt3DAnimation::QClipAnimator</class>
        <class>Qt3DAnimation::QClipBlendNodeCreatedChangeBase</class>
        <member kind="typedef" type="">
            <name>QClipBlendNodeCreatedChangeBasePtr</name>
            <anchorfile>qt3danimation.html</anchorfile>
            <anchor>QClipBlendNodeCreatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DAnimation::QClipBlendValue</class>
        <class>Qt3DAnimation::QLerpClipBlend</class>
        <class>Qt3DAnimation::QMorphTarget</class>
        <class>Qt3DAnimation::QMorphingAnimation</class>
        <class>Qt3DAnimation::QVertexBlendAnimation</class>
        <class>Qt3DAnimation::QChannelMappingCreatedChangeBase</class>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAbstractAnimation</name>
        <filename>qt3danimation-qabstractanimation.html</filename>
        <base>QObject</base>
        <member kind="property" type="QString">
            <name>animationName</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>animationName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="AnimationType">
            <name>animationType</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>animationType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>position</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>duration</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AnimationType</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>AnimationType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>KeyframeAnimation</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>AnimationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MorphingAnimation</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>AnimationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VertexBlendAnimation</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>AnimationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>animationName</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>animationName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAnimation::AnimationType</type>
            <name>animationType</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>animationType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>position</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>duration</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnimationName</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>animationName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(float position)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setDuration</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>setDuration</anchor>
            <arglist>(float duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>animationNameChanged</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>animationName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(float position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>durationChanged</name>
            <anchorfile>qt3danimation-qabstractanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(float duration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAbstractAnimationClip</name>
        <filename>qt3danimation-qabstractanimationclip.html</filename>
        <base>QNode</base>
        <member kind="property" type="float">
            <name>duration</name>
            <anchorfile>qt3danimation-qabstractanimationclip.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractAnimationClip</name>
            <anchorfile>qt3danimation-qabstractanimationclip.html</anchorfile>
            <anchor>dtor.QAbstractAnimationClip</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>duration</name>
            <anchorfile>qt3danimation-qabstractanimationclip.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>durationChanged</name>
            <anchorfile>qt3danimation-qabstractanimationclip.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(float duration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAbstractClipAnimator</name>
        <filename>qt3danimation-qabstractclipanimator.html</filename>
        <base>QComponent</base>
        <member kind="property" type="bool">
            <name>running</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>loops</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>loops-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DAnimation::QChannelMapper*">
            <name>channelMapper</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>channelMapper-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DAnimation::QClock*">
            <name>clock</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>clock-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>normalizedTime</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>normalizedTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Loops</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>Loops-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Infinite</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>Loops-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QChannelMapper *</type>
            <name>channelMapper</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>channelMapper-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>loopCount</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>loopCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QClock *</type>
            <name>clock</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>clock-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>normalizedTime</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>normalizedTime-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRunning</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist>(bool running)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChannelMapper</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>channelMapper-prop</anchor>
            <arglist>(Qt3DAnimation::QChannelMapper *channelMapper)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoopCount</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>loops-prop</anchor>
            <arglist>(int loops)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClock</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>clock-prop</anchor>
            <arglist>(Qt3DAnimation::QClock *clock)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormalizedTime</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>normalizedTime-prop</anchor>
            <arglist>(float timeFraction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>runningChanged</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist>(bool running)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>channelMapperChanged</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>channelMapper-prop</anchor>
            <arglist>(Qt3DAnimation::QChannelMapper *channelMapper)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loopCountChanged</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>loops-prop</anchor>
            <arglist>(int loops)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clockChanged</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>clock-prop</anchor>
            <arglist>(Qt3DAnimation::QClock *clock)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalizedTimeChanged</name>
            <anchorfile>qt3danimation-qabstractclipanimator.html</anchorfile>
            <anchor>normalizedTime-prop</anchor>
            <arglist>(float index)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAbstractClipBlendNode</name>
        <filename>qt3danimation-qabstractclipblendnode.html</filename>
        <base>QNode</base>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAdditiveClipBlend</name>
        <filename>qt3danimation-qadditiveclipblend.html</filename>
        <base>QAbstractClipBlendNode</base>
        <member kind="property" type="Qt3DAnimation::QAbstractClipBlendNode*">
            <name>baseClip</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>baseClip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DAnimation::QAbstractClipBlendNode*">
            <name>additiveClip</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveClip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>additiveFactor</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveFactor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>additiveFactor</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveFactor-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractClipBlendNode *</type>
            <name>baseClip</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>baseClip-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractClipBlendNode *</type>
            <name>additiveClip</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveClip-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAdditiveFactor</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveFactor-prop</anchor>
            <arglist>(float additiveFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseClip</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>baseClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *baseClip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAdditiveClip</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *additiveClip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>additiveFactorChanged</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveFactor-prop</anchor>
            <arglist>(float additiveFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>baseClipChanged</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>baseClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *baseClip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>additiveClipChanged</name>
            <anchorfile>qt3danimation-qadditiveclipblend.html</anchorfile>
            <anchor>additiveClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *additiveClip)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationAspect</name>
        <filename>qt3danimation-qanimationaspect.html</filename>
        <base>QAbstractAspect</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationAspect</name>
            <anchorfile>qt3danimation-qanimationaspect.html</anchorfile>
            <anchor>QAnimationAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationCallback</name>
        <filename>qt3danimation-qanimationcallback.html</filename>
        <member kind="enumeration">
            <name>Flag</name>
            <anchorfile>qt3danimation-qanimationcallback.html</anchorfile>
            <anchor>Flag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>OnOwningThread</name>
            <anchorfile>qt3danimation-qanimationcallback.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OnThreadPool</name>
            <anchorfile>qt3danimation-qanimationcallback.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt3DAnimation::QAnimationCallback::Flag">
            <name>Flags</name>
            <anchorfile>qt3danimation-qanimationcallback.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>valueChanged</name>
            <anchorfile>qt3danimation-qanimationcallback.html</anchorfile>
            <anchor>valueChanged</anchor>
            <arglist>(const QVariant &amp;value) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationClip</name>
        <filename>qt3danimation-qanimationclip.html</filename>
        <base>QAbstractAnimationClip</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAnimationClipData</type>
            <name>clipData</name>
            <anchorfile>qt3danimation-qanimationclip.html</anchorfile>
            <anchor>clipData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipData</name>
            <anchorfile>qt3danimation-qanimationclip.html</anchorfile>
            <anchor>setClipData</anchor>
            <arglist>(const Qt3DAnimation::QAnimationClipData &amp;clipData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clipDataChanged</name>
            <anchorfile>qt3danimation-qanimationclip.html</anchorfile>
            <anchor>clipData-prop</anchor>
            <arglist>(Qt3DAnimation::QAnimationClipData clipData)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationClipData</name>
        <filename>qt3danimation-qanimationclipdata.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationClipLoader</name>
        <filename>qt3danimation-qanimationcliploader.html</filename>
        <base>QAbstractAnimationClip</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NotReady</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ready</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAnimationClipLoader::Status</type>
            <name>status</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3danimation-qanimationcliploader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Qt3DAnimation::QAnimationClipLoader::Status status)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationController</name>
        <filename>qt3danimation-qanimationcontroller.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>activeAnimationGroup</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>activeAnimationGroup-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>position</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>positionScale</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>positionOffset</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DCore::QEntity*">
            <name>entity</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>recursive</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationController</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>QAnimationController</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DAnimation::QAnimationGroup *&gt;</type>
            <name>animationGroupList</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>animationGroupList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>activeAnimationGroup</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>activeAnimationGroup-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>position</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>positionScale</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionScale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>positionOffset</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionOffset-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>entity</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>recursive</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnimationGroups</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>setAnimationGroups</anchor>
            <arglist>(const QVector&lt;Qt3DAnimation::QAnimationGroup *&gt; &amp;animationGroups)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAnimationGroup</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>addAnimationGroup</anchor>
            <arglist>(Qt3DAnimation::QAnimationGroup *animationGroup)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAnimationGroup</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>removeAnimationGroup</anchor>
            <arglist>(Qt3DAnimation::QAnimationGroup *animationGroup)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>getAnimationIndex</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>getAnimationIndex</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAnimationGroup *</type>
            <name>getGroup</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>getGroup</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveAnimationGroup</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>activeAnimationGroup-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(float position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPositionScale</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionScale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPositionOffset</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionOffset-prop</anchor>
            <arglist>(float offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEntity</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRecursive</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist>(bool recursive)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeAnimationGroupChanged</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>activeAnimationGroup-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(float position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionScaleChanged</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionScale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionOffsetChanged</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>positionOffset-prop</anchor>
            <arglist>(float offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entityChanged</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>recursiveChanged</name>
            <anchorfile>qt3danimation-qanimationcontroller.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist>(bool recursive)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QAnimationGroup</name>
        <filename>qt3danimation-qanimationgroup.html</filename>
        <base>QObject</base>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>position</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>duration</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationGroup</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>QAnimationGroup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DAnimation::QAbstractAnimation *&gt;</type>
            <name>animationList</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>animationList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>position</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>duration</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnimations</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>setAnimations</anchor>
            <arglist>(const QVector&lt;Qt3DAnimation::QAbstractAnimation *&gt; &amp;animations)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAnimation</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>addAnimation</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAnimation</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>removeAnimation</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(float position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(float position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>durationChanged</name>
            <anchorfile>qt3danimation-qanimationgroup.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(float duration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QBlendedClipAnimator</name>
        <filename>qt3danimation-qblendedclipanimator.html</filename>
        <base>QAbstractClipAnimator</base>
        <member kind="property" type="Qt3DAnimation::QAbstractClipBlendNode*">
            <name>blendTree</name>
            <anchorfile>qt3danimation-qblendedclipanimator.html</anchorfile>
            <anchor>blendTree-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractClipBlendNode *</type>
            <name>blendTree</name>
            <anchorfile>qt3danimation-qblendedclipanimator.html</anchorfile>
            <anchor>blendTree-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlendTree</name>
            <anchorfile>qt3danimation-qblendedclipanimator.html</anchorfile>
            <anchor>blendTree-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *blendTree)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blendTreeChanged</name>
            <anchorfile>qt3danimation-qblendedclipanimator.html</anchorfile>
            <anchor>blendTree-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *blendTree)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QCallbackMapping</name>
        <filename>qt3danimation-qcallbackmapping.html</filename>
        <base>QAbstractChannelMapping</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>channelName</name>
            <anchorfile>qt3danimation-qcallbackmapping.html</anchorfile>
            <anchor>channelName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCallback</name>
            <anchorfile>qt3danimation-qcallbackmapping.html</anchorfile>
            <anchor>setCallback</anchor>
            <arglist>(int type, Qt3DAnimation::QAnimationCallback *callback, QAnimationCallback::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChannelName</name>
            <anchorfile>qt3danimation-qcallbackmapping.html</anchorfile>
            <anchor>channelName-prop</anchor>
            <arglist>(const QString &amp;channelName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>channelNameChanged</name>
            <anchorfile>qt3danimation-qcallbackmapping.html</anchorfile>
            <anchor>channelName-prop</anchor>
            <arglist>(QString channelName)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QChannel</name>
        <filename>qt3danimation-qchannel.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QChannelMapper</name>
        <filename>qt3danimation-qchannelmapper.html</filename>
        <base>QNode</base>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QChannelMapping</name>
        <filename>qt3danimation-qchannelmapping.html</filename>
        <base>QAbstractChannelMapping</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>channelName</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>channelName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNode *</type>
            <name>target</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>property</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>property-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChannelName</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>channelName-prop</anchor>
            <arglist>(const QString &amp;channelName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DCore::QNode *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProperty</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>property-prop</anchor>
            <arglist>(const QString &amp;property)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>channelNameChanged</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>channelName-prop</anchor>
            <arglist>(QString channelName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DCore::QNode *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>propertyChanged</name>
            <anchorfile>qt3danimation-qchannelmapping.html</anchorfile>
            <anchor>property-prop</anchor>
            <arglist>(QString property)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QChannelMappingCreatedChangeBase</name>
        <filename>qt3danimation-qchannelmappingcreatedchangebase.html</filename>
        <base>QNodeCreatedChangeBase</base>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QClipAnimator</name>
        <filename>qt3danimation-qclipanimator.html</filename>
        <base>QAbstractClipAnimator</base>
        <member kind="property" type="Qt3DAnimation::QAbstractAnimationClip*">
            <name>clip</name>
            <anchorfile>qt3danimation-qclipanimator.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractAnimationClip *</type>
            <name>clip</name>
            <anchorfile>qt3danimation-qclipanimator.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClip</name>
            <anchorfile>qt3danimation-qclipanimator.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimationClip *clip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clipChanged</name>
            <anchorfile>qt3danimation-qclipanimator.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimationClip *clip)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QClipBlendNodeCreatedChangeBase</name>
        <filename>qt3danimation-qclipblendnodecreatedchangebase.html</filename>
        <base>QNodeCreatedChangeBase</base>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QClipBlendValue</name>
        <filename>qt3danimation-qclipblendvalue.html</filename>
        <base>QAbstractClipBlendNode</base>
        <member kind="property" type="Qt3DAnimation::QAbstractAnimationClip*">
            <name>clip</name>
            <anchorfile>qt3danimation-qclipblendvalue.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractAnimationClip *</type>
            <name>clip</name>
            <anchorfile>qt3danimation-qclipblendvalue.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClip</name>
            <anchorfile>qt3danimation-qclipblendvalue.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimationClip *clip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clipChanged</name>
            <anchorfile>qt3danimation-qclipblendvalue.html</anchorfile>
            <anchor>clip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractAnimationClip *clip)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QKeyFrame</name>
        <filename>qt3danimation-qkeyframe.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QKeyframeAnimation</name>
        <filename>qt3danimation-qkeyframeanimation.html</filename>
        <base>QAbstractAnimation</base>
        <member kind="property" type="QVector&lt;float&gt;">
            <name>framePositions</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>framePositions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DCore::QTransform*">
            <name>target</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QEasingCurve">
            <name>easing</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>targetName</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="RepeatMode">
            <name>startMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>startMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="RepeatMode">
            <name>endMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>endMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyframeAnimation</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>QKeyframeAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="enumeration">
            <name>RepeatMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>RepeatMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>None</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>RepeatMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Constant</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>RepeatMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Repeat</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>RepeatMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;float&gt;</type>
            <name>framePositions</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>framePositions-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DCore::QTransform *&gt;</type>
            <name>keyframeList</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>keyframeList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QTransform *</type>
            <name>target</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve</type>
            <name>easing</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>targetName</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QKeyframeAnimation::RepeatMode</type>
            <name>startMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>startMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QKeyframeAnimation::RepeatMode</type>
            <name>endMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>endMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeyframes</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>setKeyframes</anchor>
            <arglist>(const QVector&lt;Qt3DCore::QTransform *&gt; &amp;keyframes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addKeyframe</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>addKeyframe</anchor>
            <arglist>(Qt3DCore::QTransform *keyframe)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeKeyframe</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>removeKeyframe</anchor>
            <arglist>(Qt3DCore::QTransform *keyframe)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFramePositions</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>framePositions-prop</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;positions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DCore::QTransform *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEasing</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist>(const QEasingCurve &amp;easing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetName</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>startMode-prop</anchor>
            <arglist>(Qt3DAnimation::QKeyframeAnimation::RepeatMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEndMode</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>endMode-prop</anchor>
            <arglist>(Qt3DAnimation::QKeyframeAnimation::RepeatMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>framePositionsChanged</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>framePositions-prop</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;positions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DCore::QTransform *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>easingChanged</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist>(const QEasingCurve &amp;easing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetNameChanged</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startModeChanged</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>startMode-prop</anchor>
            <arglist>(QKeyframeAnimation::RepeatMode startMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endModeChanged</name>
            <anchorfile>qt3danimation-qkeyframeanimation.html</anchorfile>
            <anchor>endMode-prop</anchor>
            <arglist>(QKeyframeAnimation::RepeatMode endMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QLerpClipBlend</name>
        <filename>qt3danimation-qlerpclipblend.html</filename>
        <base>QAbstractClipBlendNode</base>
        <member kind="property" type="Qt3DAnimation::QAbstractClipBlendNode*">
            <name>startClip</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>startClip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DAnimation::QAbstractClipBlendNode*">
            <name>endClip</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>endClip-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>blendFactor</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>blendFactor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>blendFactor</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>blendFactor-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractClipBlendNode *</type>
            <name>startClip</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>startClip-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DAnimation::QAbstractClipBlendNode *</type>
            <name>endClip</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>endClip-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlendFactor</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>blendFactor-prop</anchor>
            <arglist>(float blendFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartClip</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>startClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *startClip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEndClip</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>endClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *endClip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blendFactorChanged</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>blendFactor-prop</anchor>
            <arglist>(float blendFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startClipChanged</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>startClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *startClip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endClipChanged</name>
            <anchorfile>qt3danimation-qlerpclipblend.html</anchorfile>
            <anchor>endClip-prop</anchor>
            <arglist>(Qt3DAnimation::QAbstractClipBlendNode *endClip)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QMorphTarget</name>
        <filename>qt3danimation-qmorphtarget.html</filename>
        <base>QObject</base>
        <member kind="property" type="QStringList">
            <name>attributeNames</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>attributeNames-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMorphTarget</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>QMorphTarget</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QAttribute *&gt;</type>
            <name>attributeList</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>attributeList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>attributeNames</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>attributeNames-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributes</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>setAttributes</anchor>
            <arglist>(const QVector&lt;Qt3DRender::QAttribute *&gt; &amp;attributes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAttribute</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>addAttribute</anchor>
            <arglist>(Qt3DRender::QAttribute *attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAttribute</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>removeAttribute</anchor>
            <arglist>(Qt3DRender::QAttribute *attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt3DAnimation::QMorphTarget *</type>
            <name>fromGeometry</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>fromGeometry</anchor>
            <arglist>(Qt3DRender::QGeometry *geometry, const QStringList &amp;attributes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>attributeNamesChanged</name>
            <anchorfile>qt3danimation-qmorphtarget.html</anchorfile>
            <anchor>attributeNames-prop</anchor>
            <arglist>(const QStringList &amp;attributeNames)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QMorphingAnimation</name>
        <filename>qt3danimation-qmorphinganimation.html</filename>
        <base>QAbstractAnimation</base>
        <member kind="property" type="QVector&lt;float&gt;">
            <name>targetPositions</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>interpolator</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QGeometryRenderer*">
            <name>target</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>targetName</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Method">
            <name>method</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>method-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QEasingCurve">
            <name>easing</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Method</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>Method-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Normalized</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>Method-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Relative</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>Method-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMorphingAnimation</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>QMorphingAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;float&gt;</type>
            <name>targetPositions</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>interpolator</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QGeometryRenderer *</type>
            <name>target</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>targetName</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMorphingAnimation::Method</type>
            <name>method</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>method-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve</type>
            <name>easing</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMorphTargets</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>setMorphTargets</anchor>
            <arglist>(const QVector&lt;Qt3DAnimation::QMorphTarget *&gt; &amp;targets)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMorphTarget</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>addMorphTarget</anchor>
            <arglist>(Qt3DAnimation::QMorphTarget *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMorphTarget</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>removeMorphTarget</anchor>
            <arglist>(Qt3DAnimation::QMorphTarget *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWeights</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>setWeights</anchor>
            <arglist>(int positionIndex, const QVector&lt;float&gt; &amp;weights)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;float&gt;</type>
            <name>getWeights</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>getWeights</anchor>
            <arglist>(int positionIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DAnimation::QMorphTarget *&gt;</type>
            <name>morphTargetList</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>morphTargetList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetPositions</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;targetPositions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DRender::QGeometryRenderer *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetName</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>(const QString name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMethod</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>method-prop</anchor>
            <arglist>(QMorphingAnimation::Method method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEasing</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist>(const QEasingCurve &amp;easing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetPositionsChanged</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;targetPositions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>interpolatorChanged</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>(float interpolator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DRender::QGeometryRenderer *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetNameChanged</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>methodChanged</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>method-prop</anchor>
            <arglist>(QMorphingAnimation::Method method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>easingChanged</name>
            <anchorfile>qt3danimation-qmorphinganimation.html</anchorfile>
            <anchor>easing-prop</anchor>
            <arglist>(const QEasingCurve &amp;easing)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DAnimation::QVertexBlendAnimation</name>
        <filename>qt3danimation-qvertexblendanimation.html</filename>
        <base>QAbstractAnimation</base>
        <member kind="property" type="QVector&lt;float&gt;">
            <name>targetPositions</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>interpolator</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QGeometryRenderer*">
            <name>target</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>targetName</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVertexBlendAnimation</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>QVertexBlendAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;float&gt;</type>
            <name>targetPositions</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>interpolator</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QGeometryRenderer *</type>
            <name>target</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>targetName</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMorphTargets</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>setMorphTargets</anchor>
            <arglist>(const QVector&lt;Qt3DAnimation::QMorphTarget *&gt; &amp;targets)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMorphTarget</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>addMorphTarget</anchor>
            <arglist>(Qt3DAnimation::QMorphTarget *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMorphTarget</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>removeMorphTarget</anchor>
            <arglist>(Qt3DAnimation::QMorphTarget *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DAnimation::QMorphTarget *&gt;</type>
            <name>morphTargetList</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>morphTargetList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetPositions</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;targetPositions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DRender::QGeometryRenderer *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetName</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>(const QString name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetPositionsChanged</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetPositions-prop</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;targetPositions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>interpolatorChanged</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>(float interpolator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DRender::QGeometryRenderer *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetNameChanged</name>
            <anchorfile>qt3danimation-qvertexblendanimation.html</anchorfile>
            <anchor>targetName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DCore</name>
        <filename>qt3dcore.html</filename>
        <class>Qt3DCore::QNodeId</class>
        <member kind="typedef" type="">
            <name>QNodeIdVector</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>QNodeIdVector-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qt3dcore.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDebug d, Qt3DCore::QNodeId id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(Qt3DCore::QNodeId id, uint seed)</arglist>
        </member>
        <member kind="enumeration">
            <name>ChangeFlag</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NodeCreated</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NodeDeleted</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PropertyUpdated</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PropertyValueAdded</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PropertyValueRemoved</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ComponentAdded</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ComponentRemoved</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CommandRequested</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CallbackTriggered</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllChanges</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="ChangeFlag">
            <name>ChangeFlags</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QSceneChange</class>
        <member kind="typedef" type="">
            <name>QSceneChangePtr</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>QSceneChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QAspectJobPtr</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>QAspectJobPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QBackendNodeMapperPtr</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>QBackendNodeMapperPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QAbstractAspect</class>
        <class>Qt3DCore::QNodeCreatedChangeBase</class>
        <member kind="typedef" type="">
            <name>QNodeCreatedChangeBasePtr</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>QNodeCreatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QNodeCreatedChange</class>
        <class>Qt3DCore::QNodeCommand</class>
        <member kind="typedef" type="">
            <name>QNodeCommandPtr</name>
            <anchorfile>qt3dcore-qnodecommand.html</anchorfile>
            <anchor>QNodeCommandPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QNodeVector</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>QNodeVector-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QNodePtr</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>QNodePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QNode</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>qIdForNode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>qIdForNode</anchor>
            <arglist>(Qt3DCore::QNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeIdVector</type>
            <name>qIdsForNodes</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>qIdsForNodes</anchor>
            <arglist>(const T &amp;nodes)</arglist>
        </member>
        <class>Qt3DCore::QAbstractSkeleton</class>
        <class>Qt3DCore::QComponent</class>
        <class>Qt3DCore::QArmature</class>
        <member kind="typedef" type="">
            <name>QEntityPtr</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>QEntityPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QAspectEngine</class>
        <class>Qt3DCore::QAspectJob</class>
        <class>Qt3DCore::QBackendNodeMapper</class>
        <class>Qt3DCore::QBackendNode</class>
        <class>Qt3DCore::QComponentAddedChange</class>
        <member kind="typedef" type="">
            <name>QComponentAddedChangePtr</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>QComponentAddedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QComponentRemovedChange</class>
        <member kind="typedef" type="">
            <name>QComponentRemovedChangePtr</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>QComponentRemovedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyUpdatedChangeBase</class>
        <member kind="typedef" type="">
            <name>QPropertyUpdatedChangeBasePtr</name>
            <anchorfile>qt3dcore-qpropertyupdatedchangebase.html</anchorfile>
            <anchor>QPropertyUpdatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QDynamicPropertyUpdatedChange</class>
        <member kind="typedef" type="">
            <name>QDynamicPropertyUpdatedChangePtr</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>QDynamicPropertyUpdatedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QComponentVector</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>QComponentVector-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QEntity</class>
        <class>Qt3DCore::QJoint</class>
        <class>Qt3DCore::QNodeDestroyedChange</class>
        <member kind="typedef" type="">
            <name>QNodeDestroyedChangePtr</name>
            <anchorfile>qt3dcore-qnodedestroyedchange.html</anchorfile>
            <anchor>QNodeDestroyedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyValueAddedChangeBase</class>
        <member kind="typedef" type="">
            <name>QPropertyValueAddedChangeBasePtr</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>QPropertyValueAddedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QStaticPropertyValueAddedChangeBase</class>
        <class>Qt3DCore::QPropertyNodeAddedChange</class>
        <member kind="typedef" type="">
            <name>QPropertyNodeAddedChangePtr</name>
            <anchorfile>qt3dcore-qpropertynodeaddedchange.html</anchorfile>
            <anchor>QPropertyNodeAddedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyValueRemovedChangeBase</class>
        <member kind="typedef" type="">
            <name>QPropertyValueRemovedChangeBasePtr</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>QPropertyValueRemovedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QStaticPropertyValueRemovedChangeBase</class>
        <class>Qt3DCore::QPropertyNodeRemovedChange</class>
        <member kind="typedef" type="">
            <name>QPropertyNodeRemovedChangePtr</name>
            <anchorfile>qt3dcore-qpropertynoderemovedchange.html</anchorfile>
            <anchor>QPropertyNodeRemovedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QStaticPropertyUpdatedChangeBase</class>
        <member kind="typedef" type="">
            <name>QStaticPropertyUpdatedChangeBasePtr</name>
            <anchorfile>qt3dcore-qstaticpropertyupdatedchangebase.html</anchorfile>
            <anchor>QStaticPropertyUpdatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyUpdatedChange</class>
        <member kind="typedef" type="">
            <name>QPropertyUpdatedChangePtr</name>
            <anchorfile>qt3dcore-qpropertyupdatedchange.html</anchorfile>
            <anchor>QPropertyUpdatedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyValueAddedChange</class>
        <member kind="typedef" type="">
            <name>QPropertyValueAddedChangePtr</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchange.html</anchorfile>
            <anchor>QPropertyValueAddedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QPropertyValueRemovedChange</class>
        <member kind="typedef" type="">
            <name>QPropertyValueRemovedChangePtr</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchange.html</anchorfile>
            <anchor>QPropertyValueRemovedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DCore::QSkeleton</class>
        <class>Qt3DCore::QSkeletonLoader</class>
        <class>Qt3DCore::QTransform</class>
        <namespace>Qt3DCore::Quick</namespace>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QAbstractAspect</name>
        <filename>qt3dcore-qabstractaspect.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAspect</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>QAbstractAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>rootEntityId</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>rootEntityId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>registerBackendType</anchor>
            <arglist>(const Qt3DCore::QBackendNodeMapperPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>registerBackendType-1</anchor>
            <arglist>(const QMetaObject &amp;obj, const Qt3DCore::QBackendNodeMapperPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT3D_REGISTER_ASPECT</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>QT3D_REGISTER_ASPECT</anchor>
            <arglist>( name,  AspectType)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QAspectJobPtr</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>QAspectJobPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QBackendNodeMapperPtr</name>
            <anchorfile>qt3dcore-qabstractaspect.html</anchorfile>
            <anchor>QBackendNodeMapperPtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QAspectEngine</name>
        <filename>qt3dcore-qaspectengine.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAspectEngine</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>QAspectEngine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAspectEngine</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>dtor.QAspectEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRootEntity</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>setRootEntity</anchor>
            <arglist>(Qt3DCore::QEntityPtr root)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntityPtr</type>
            <name>rootEntity</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>rootEntity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerAspect</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>registerAspect</anchor>
            <arglist>(Qt3DCore::QAbstractAspect *aspect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerAspect</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>registerAspect-1</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterAspect</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>unregisterAspect</anchor>
            <arglist>(Qt3DCore::QAbstractAspect *aspect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterAspect</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>unregisterAspect-1</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DCore::QAbstractAspect *&gt;</type>
            <name>aspects</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>aspects</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>executeCommand</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>executeCommand</anchor>
            <arglist>(const QString &amp;command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>processFrame</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>processFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QEntityPtr</name>
            <anchorfile>qt3dcore-qaspectengine.html</anchorfile>
            <anchor>QEntityPtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QComponentAddedChange</name>
        <filename>qt3dcore-qcomponentaddedchange.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComponentAddedChange</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>QComponentAddedChange</anchor>
            <arglist>(const Qt3DCore::QEntity *entity, const Qt3DCore::QComponent *component)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComponentAddedChange</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>QComponentAddedChange-1</anchor>
            <arglist>(const Qt3DCore::QComponent *component, const Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>entityId</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>entityId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>componentId</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>componentId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>componentMetaObject</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>componentMetaObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QComponentAddedChangePtr</name>
            <anchorfile>qt3dcore-qcomponentaddedchange.html</anchorfile>
            <anchor>QComponentAddedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QComponentRemovedChange</name>
        <filename>qt3dcore-qcomponentremovedchange.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComponentRemovedChange</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>QComponentRemovedChange</anchor>
            <arglist>(const Qt3DCore::QEntity *entity, const Qt3DCore::QComponent *component)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComponentRemovedChange</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>QComponentRemovedChange-1</anchor>
            <arglist>(const Qt3DCore::QComponent *component, const Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>entityId</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>entityId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>componentId</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>componentId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>componentMetaObject</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>componentMetaObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QComponentRemovedChangePtr</name>
            <anchorfile>qt3dcore-qcomponentremovedchange.html</anchorfile>
            <anchor>QComponentRemovedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QDynamicPropertyUpdatedChange</name>
        <filename>qt3dcore-qdynamicpropertyupdatedchange.html</filename>
        <base>QPropertyUpdatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDynamicPropertyUpdatedChange</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>QDynamicPropertyUpdatedChange</anchor>
            <arglist>(Qt3DCore::QNodeId subjectId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>propertyName</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>setPropertyName</anchor>
            <arglist>(const QByteArray &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QDynamicPropertyUpdatedChangePtr</name>
            <anchorfile>qt3dcore-qdynamicpropertyupdatedchange.html</anchorfile>
            <anchor>QDynamicPropertyUpdatedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNodeCommand</name>
        <filename>qt3dcore-qnodecommand.html</filename>
        <base>QSceneChange</base>
        <member kind="typedef" type="">
            <name>CommandId</name>
            <anchorfile>qt3dcore-qnodecommand.html</anchorfile>
            <anchor>CommandId-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNodeCommand</name>
            <anchorfile>qt3dcore-qnodecommand.html</anchorfile>
            <anchor>QNodeCommand</anchor>
            <arglist>(Qt3DCore::QNodeId id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeCommand::CommandId</type>
            <name>commandId</name>
            <anchorfile>qt3dcore-qnodecommand.html</anchorfile>
            <anchor>commandId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3dcore-qnodecommand.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3dcore-qnodecommand.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>data</name>
            <anchorfile>qt3dcore-qnodecommand.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qt3dcore-qnodecommand.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QVariant &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeCommand::CommandId</type>
            <name>inReplyTo</name>
            <anchorfile>qt3dcore-qnodecommand.html</anchorfile>
            <anchor>inReplyTo</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReplyToCommandId</name>
            <anchorfile>qt3dcore-qnodecommand.html</anchorfile>
            <anchor>setReplyToCommandId</anchor>
            <arglist>(Qt3DCore::QNodeCommand::CommandId id)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QNodeCommandPtr</name>
            <anchorfile>qt3dcore-qnodecommand.html</anchorfile>
            <anchor>QNodeCommandPtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNodeCreatedChange</name>
        <filename>qt3dcore-qnodecreatedchange.html</filename>
        <base>QNodeCreatedChangeBase</base>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNodeCreatedChangeBase</name>
        <filename>qt3dcore-qnodecreatedchangebase.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNodeCreatedChangeBase</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>QNodeCreatedChangeBase</anchor>
            <arglist>(const Qt3DCore::QNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>parentId</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>parentId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>metaObject</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>metaObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNodeEnabled</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>isNodeEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QNodeCreatedChangeBasePtr</name>
            <anchorfile>qt3dcore-qnodecreatedchangebase.html</anchorfile>
            <anchor>QNodeCreatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNodeDestroyedChange</name>
        <filename>qt3dcore-qnodedestroyedchange.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNodeDestroyedChange</name>
            <anchorfile>qt3dcore-qnodedestroyedchange.html</anchorfile>
            <anchor>QNodeDestroyedChange</anchor>
            <arglist>(const Qt3DCore::QNode *node, const QVector&lt;Qt3DCore::QNodeIdTypePair&gt; &amp;subtreeIdsAndTypes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DCore::QNodeIdTypePair&gt;</type>
            <name>subtreeIdsAndTypes</name>
            <anchorfile>qt3dcore-qnodedestroyedchange.html</anchorfile>
            <anchor>subtreeIdsAndTypes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QNodeDestroyedChangePtr</name>
            <anchorfile>qt3dcore-qnodedestroyedchange.html</anchorfile>
            <anchor>QNodeDestroyedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QAspectJob</name>
        <filename>qt3dcore-qaspectjob.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addDependency</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>addDependency</anchor>
            <arglist>(QWeakPointer&lt;Qt3DCore::QAspectJob&gt; dependency)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeDependency</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>removeDependency</anchor>
            <arglist>(QWeakPointer&lt;Qt3DCore::QAspectJob&gt; dependency)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QWeakPointer&lt;Qt3DCore::QAspectJob&gt; &gt;</type>
            <name>dependencies</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>dependencies</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qt3dcore-qaspectjob.html</anchorfile>
            <anchor>run</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QBackendNode</name>
        <filename>qt3dcore-qbackendnode.html</filename>
        <member kind="enumeration">
            <name>Mode</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>Mode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ReadOnly</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadWrite</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>peerId</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>peerId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QBackendNode::Mode</type>
            <name>mode</name>
            <anchorfile>qt3dcore-qbackendnode.html</anchorfile>
            <anchor>mode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>notifyObservers</name>
            <anchorfile>qt3dcore-qbackendnode-obsolete.html</anchorfile>
            <anchor>notifyObservers</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;e)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QNodeCommand::CommandId</type>
            <name>sendCommand</name>
            <anchorfile>qt3dcore-qbackendnode-obsolete.html</anchorfile>
            <anchor>sendCommand</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;data, QNodeCommand::CommandId replyTo)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>sendReply</name>
            <anchorfile>qt3dcore-qbackendnode-obsolete.html</anchorfile>
            <anchor>sendReply</anchor>
            <arglist>(const Qt3DCore::QNodeCommandPtr &amp;command)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3dcore-qbackendnode-obsolete.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QBackendNodeMapper</name>
        <filename>qt3dcore-qbackendnodemapper.html</filename>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual Qt3DCore::QBackendNode *</type>
            <name>create</name>
            <anchorfile>qt3dcore-qbackendnodemapper.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const Qt3DCore::QNodeCreatedChangeBasePtr &amp;change) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual Qt3DCore::QBackendNode *</type>
            <name>get</name>
            <anchorfile>qt3dcore-qbackendnodemapper.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(Qt3DCore::QNodeId id) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>destroy</name>
            <anchorfile>qt3dcore-qbackendnodemapper.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>(Qt3DCore::QNodeId id) const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QComponent</name>
        <filename>qt3dcore-qcomponent.html</filename>
        <base>QNode</base>
        <member kind="property" type="bool">
            <name>isShareable</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>isShareable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComponent</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>QComponent</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isShareable</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>isShareable-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DCore::QEntity *&gt;</type>
            <name>entities</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>entities</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShareable</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>isShareable-prop</anchor>
            <arglist>(bool isShareable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shareableChanged</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>isShareable-prop</anchor>
            <arglist>(bool isShareable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addedToEntity</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>addedToEntity</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removedFromEntity</name>
            <anchorfile>qt3dcore-qcomponent.html</anchorfile>
            <anchor>removedFromEntity</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QEntity</name>
        <filename>qt3dcore-qentity.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEntity</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>QEntity</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QComponentVector</type>
            <name>components</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>components</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;T *&gt;</type>
            <name>componentsOfType</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>componentsOfType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addComponent</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>addComponent</anchor>
            <arglist>(Qt3DCore::QComponent *comp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeComponent</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>removeComponent</anchor>
            <arglist>(Qt3DCore::QComponent *comp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>parentEntity</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>parentEntity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QComponentVector</name>
            <anchorfile>qt3dcore-qentity.html</anchorfile>
            <anchor>QComponentVector-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QJoint</name>
        <filename>qt3dcore-qjoint.html</filename>
        <base>QNode</base>
        <member kind="property" type="QVector3D">
            <name>scale</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QQuaternion">
            <name>rotation</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>translation</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>inverseBindMatrix</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>inverseBindMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>rotationX</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>rotationY</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>rotationZ</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJoint</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>QJoint</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>scale</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>rotation</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>translation</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>inverseBindMatrix</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>inverseBindMatrix-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>rotationX</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>rotationY</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>rotationZ</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addChildJoint</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>addChildJoint</anchor>
            <arglist>(Qt3DCore::QJoint *joint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeChildJoint</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>removeChildJoint</anchor>
            <arglist>(Qt3DCore::QJoint *joint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DCore::QJoint *&gt;</type>
            <name>childJoints</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>childJoints</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(const QVector3D &amp;scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotation</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>(const QQuaternion &amp;rotation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTranslation</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>(const QVector3D &amp;translation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInverseBindMatrix</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>inverseBindMatrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;inverseBindMatrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationX</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist>(float rotationX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationY</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist>(float rotationY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationZ</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist>(float rotationZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToIdentity</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>setToIdentity</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(const QVector3D &amp;scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationChanged</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>(const QQuaternion &amp;rotation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translationChanged</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>(const QVector3D &amp;translation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>inverseBindMatrixChanged</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>inverseBindMatrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;inverseBindMatrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationXChanged</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist>(float rotationX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationYChanged</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist>(float rotationY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationZChanged</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist>(float rotationZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3dcore-qjoint.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNode</name>
        <filename>qt3dcore-qnode.html</filename>
        <base>QObject</base>
        <member kind="property" type="Qt3DCore::QNode*">
            <name>parent</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>enabled</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="PropertyTrackingMode">
            <name>defaultPropertyTrackingMode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>defaultPropertyTrackingMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PropertyTrackingMode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>PropertyTrackingMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TrackFinalValues</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>PropertyTrackingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DontTrackValues</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>PropertyTrackingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TrackAllValues</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>PropertyTrackingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>QNode</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>id</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNode *</type>
            <name>parentNode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>notificationsBlocked</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>notificationsBlocked</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>blockNotifications</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>blockNotifications</anchor>
            <arglist>(bool block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeVector</type>
            <name>childNodes</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>childNodes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNode::PropertyTrackingMode</type>
            <name>defaultPropertyTrackingMode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>defaultPropertyTrackingMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyTracking</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>setPropertyTracking</anchor>
            <arglist>(const QString &amp;propertyName, Qt3DCore::QNode::PropertyTrackingMode trackMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNode::PropertyTrackingMode</type>
            <name>propertyTracking</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>propertyTracking</anchor>
            <arglist>(const QString &amp;propertyName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearPropertyTracking</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>clearPropertyTracking</anchor>
            <arglist>(const QString &amp;propertyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearPropertyTrackings</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>clearPropertyTrackings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNodeCommand::CommandId</type>
            <name>sendCommand</name>
            <anchorfile>qt3dcore-qnode-obsolete.html</anchorfile>
            <anchor>sendCommand</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;data, QNodeCommand::CommandId replyTo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sendReply</name>
            <anchorfile>qt3dcore-qnode-obsolete.html</anchorfile>
            <anchor>sendReply</anchor>
            <arglist>(const Qt3DCore::QNodeCommandPtr &amp;command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParent</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool isEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultPropertyTrackingMode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>defaultPropertyTrackingMode-prop</anchor>
            <arglist>(Qt3DCore::QNode::PropertyTrackingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>parentChanged</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>parent-prop</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enabledChanged</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>enabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>defaultPropertyTrackingModeChanged</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>defaultPropertyTrackingMode-prop</anchor>
            <arglist>(Qt3DCore::QNode::PropertyTrackingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nodeDestroyed</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>nodeDestroyed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>notifyObservers</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>notifyObservers</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3dcore-qnode-obsolete.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>qIdForNode</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>qIdForNode</anchor>
            <arglist>(Qt3DCore::QNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeIdVector</type>
            <name>qIdsForNodes</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>qIdsForNodes</anchor>
            <arglist>(const T &amp;nodes)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QNodePtr</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>QNodePtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QNodeVector</name>
            <anchorfile>qt3dcore-qnode.html</anchorfile>
            <anchor>QNodeVector-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QAbstractSkeleton</name>
        <filename>qt3dcore-qabstractskeleton.html</filename>
        <base>QNode</base>
        <member kind="property" type="int">
            <name>jointCount</name>
            <anchorfile>qt3dcore-qabstractskeleton.html</anchorfile>
            <anchor>jointCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>jointCount</name>
            <anchorfile>qt3dcore-qabstractskeleton.html</anchorfile>
            <anchor>jointCount-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>jointCountChanged</name>
            <anchorfile>qt3dcore-qabstractskeleton.html</anchorfile>
            <anchor>jointCount-prop</anchor>
            <arglist>(int jointCount)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QArmature</name>
        <filename>qt3dcore-qarmature.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DCore::QAbstractSkeleton*">
            <name>skeleton</name>
            <anchorfile>qt3dcore-qarmature.html</anchorfile>
            <anchor>skeleton-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QArmature</name>
            <anchorfile>qt3dcore-qarmature.html</anchorfile>
            <anchor>QArmature</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QAbstractSkeleton *</type>
            <name>skeleton</name>
            <anchorfile>qt3dcore-qarmature.html</anchorfile>
            <anchor>skeleton-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSkeleton</name>
            <anchorfile>qt3dcore-qarmature.html</anchorfile>
            <anchor>skeleton-prop</anchor>
            <arglist>(Qt3DCore::QAbstractSkeleton *skeleton)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>skeletonChanged</name>
            <anchorfile>qt3dcore-qarmature.html</anchorfile>
            <anchor>skeleton-prop</anchor>
            <arglist>(Qt3DCore::QAbstractSkeleton *skeleton)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QNodeId</name>
        <filename>qt3dcore-qnodeid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt3DCore::QNodeId</type>
            <name>createId</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>createId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(Qt3DCore::QNodeId other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(Qt3DCore::QNodeId other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(Qt3DCore::QNodeId other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(Qt3DCore::QNodeId other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>id</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator bool</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QNodeIdVector</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>QNodeIdVector-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qt3dcore-qnodeid.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(Qt3DCore::QNodeId id, uint seed)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyNodeAddedChange</name>
        <filename>qt3dcore-qpropertynodeaddedchange.html</filename>
        <base>QStaticPropertyValueAddedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyNodeAddedChange</name>
            <anchorfile>qt3dcore-qpropertynodeaddedchange.html</anchorfile>
            <anchor>QPropertyNodeAddedChange</anchor>
            <arglist>(Qt3DCore::QNodeId subjectId, Qt3DCore::QNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>addedNodeId</name>
            <anchorfile>qt3dcore-qpropertynodeaddedchange.html</anchorfile>
            <anchor>addedNodeId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>metaObject</name>
            <anchorfile>qt3dcore-qpropertynodeaddedchange.html</anchorfile>
            <anchor>metaObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QPropertyNodeAddedChangePtr</name>
            <anchorfile>qt3dcore-qpropertynodeaddedchange.html</anchorfile>
            <anchor>QPropertyNodeAddedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyNodeRemovedChange</name>
        <filename>qt3dcore-qpropertynoderemovedchange.html</filename>
        <base>QStaticPropertyValueRemovedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyNodeRemovedChange</name>
            <anchorfile>qt3dcore-qpropertynoderemovedchange.html</anchorfile>
            <anchor>QPropertyNodeRemovedChange</anchor>
            <arglist>(Qt3DCore::QNodeId subjectId, Qt3DCore::QNode *node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>removedNodeId</name>
            <anchorfile>qt3dcore-qpropertynoderemovedchange.html</anchorfile>
            <anchor>removedNodeId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>metaObject</name>
            <anchorfile>qt3dcore-qpropertynoderemovedchange.html</anchorfile>
            <anchor>metaObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QPropertyNodeRemovedChangePtr</name>
            <anchorfile>qt3dcore-qpropertynoderemovedchange.html</anchorfile>
            <anchor>QPropertyNodeRemovedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyUpdatedChange</name>
        <filename>qt3dcore-qpropertyupdatedchange.html</filename>
        <base>QStaticPropertyUpdatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyUpdatedChange</name>
            <anchorfile>qt3dcore-qpropertyupdatedchange.html</anchorfile>
            <anchor>QPropertyUpdatedChange</anchor>
            <arglist>(Qt3DCore::QNodeId subjectId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qt3dcore-qpropertyupdatedchange.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3dcore-qpropertyupdatedchange.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QPropertyUpdatedChangePtr</name>
            <anchorfile>qt3dcore-qpropertyupdatedchange.html</anchorfile>
            <anchor>QPropertyUpdatedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyUpdatedChangeBase</name>
        <filename>qt3dcore-qpropertyupdatedchangebase.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QPropertyUpdatedChangeBase</name>
            <anchorfile>qt3dcore-qpropertyupdatedchangebase.html</anchorfile>
            <anchor>QPropertyUpdatedChangeBase</anchor>
            <arglist>(Qt3DCore::QNodeId subjectId)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QPropertyUpdatedChangeBasePtr</name>
            <anchorfile>qt3dcore-qpropertyupdatedchangebase.html</anchorfile>
            <anchor>QPropertyUpdatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyValueAddedChange</name>
        <filename>qt3dcore-qpropertyvalueaddedchange.html</filename>
        <base>QStaticPropertyValueAddedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyValueAddedChange</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchange.html</anchorfile>
            <anchor>QPropertyValueAddedChange</anchor>
            <arglist>(Qt3DCore::QNodeId subjectId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddedValue</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchange.html</anchorfile>
            <anchor>setAddedValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>addedValue</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchange.html</anchorfile>
            <anchor>addedValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QPropertyValueAddedChangePtr</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchange.html</anchorfile>
            <anchor>QPropertyValueAddedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyValueAddedChangeBase</name>
        <filename>qt3dcore-qpropertyvalueaddedchangebase.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QPropertyValueAddedChangeBase</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>QPropertyValueAddedChangeBase</anchor>
            <arglist>(Qt3DCore::QNodeId subjectId)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QPropertyValueAddedChangeBasePtr</name>
            <anchorfile>qt3dcore-qpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>QPropertyValueAddedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyValueRemovedChange</name>
        <filename>qt3dcore-qpropertyvalueremovedchange.html</filename>
        <base>QStaticPropertyValueRemovedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyValueRemovedChange</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchange.html</anchorfile>
            <anchor>QPropertyValueRemovedChange</anchor>
            <arglist>(Qt3DCore::QNodeId subjectId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRemovedValue</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchange.html</anchorfile>
            <anchor>setRemovedValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>removedValue</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchange.html</anchorfile>
            <anchor>removedValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QPropertyValueRemovedChangePtr</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchange.html</anchorfile>
            <anchor>QPropertyValueRemovedChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QPropertyValueRemovedChangeBase</name>
        <filename>qt3dcore-qpropertyvalueremovedchangebase.html</filename>
        <base>QSceneChange</base>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QPropertyValueRemovedChangeBase</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>QPropertyValueRemovedChangeBase</anchor>
            <arglist>(Qt3DCore::QNodeId subjectId)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QPropertyValueRemovedChangeBasePtr</name>
            <anchorfile>qt3dcore-qpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>QPropertyValueRemovedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QSceneChange</name>
        <filename>qt3dcore-qscenechange.html</filename>
        <member kind="enumeration">
            <name>DeliveryFlag</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>DeliveryFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BackendNodes</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>DeliveryFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nodes</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>DeliveryFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeliverToAll</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>DeliveryFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt3DCore::QSceneChange::DeliveryFlag">
            <name>DeliveryFlags</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>DeliveryFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::ChangeFlag</type>
            <name>type</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeliveryFlags</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>setDeliveryFlags</anchor>
            <arglist>(Qt3DCore::QSceneChange::DeliveryFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QSceneChange::DeliveryFlags</type>
            <name>deliveryFlags</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>deliveryFlags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>subjectId</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>subjectId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSceneChange</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>QSceneChange</anchor>
            <arglist>(Qt3DCore::ChangeFlag type, Qt3DCore::QNodeId subjectId)</arglist>
        </member>
        <member kind="enumeration">
            <name>ChangeFlag</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NodeCreated</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NodeDeleted</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PropertyUpdated</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PropertyValueAdded</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PropertyValueRemoved</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ComponentAdded</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ComponentRemoved</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CommandRequested</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CallbackTriggered</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllChanges</name>
            <anchorfile>qt3dcore-qscenechange-obsolete.html</anchorfile>
            <anchor>ChangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QSceneChangePtr</name>
            <anchorfile>qt3dcore-qscenechange.html</anchorfile>
            <anchor>QSceneChangePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QStaticPropertyUpdatedChangeBase</name>
        <filename>qt3dcore-qstaticpropertyupdatedchangebase.html</filename>
        <base>QPropertyUpdatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>propertyName</name>
            <anchorfile>qt3dcore-qstaticpropertyupdatedchangebase.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qt3dcore-qstaticpropertyupdatedchangebase.html</anchorfile>
            <anchor>setPropertyName</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QStaticPropertyUpdatedChangeBase</name>
            <anchorfile>qt3dcore-qstaticpropertyupdatedchangebase.html</anchorfile>
            <anchor>QStaticPropertyUpdatedChangeBase</anchor>
            <arglist>(Qt3DCore::QNodeId subjectId)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QStaticPropertyUpdatedChangeBasePtr</name>
            <anchorfile>qt3dcore-qstaticpropertyupdatedchangebase.html</anchorfile>
            <anchor>QStaticPropertyUpdatedChangeBasePtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QStaticPropertyValueAddedChangeBase</name>
        <filename>qt3dcore-qstaticpropertyvalueaddedchangebase.html</filename>
        <base>QPropertyValueAddedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>propertyName</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>setPropertyName</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QStaticPropertyValueAddedChangeBase</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueaddedchangebase.html</anchorfile>
            <anchor>QStaticPropertyValueAddedChangeBase</anchor>
            <arglist>(Qt3DCore::QNodeId subjectId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QStaticPropertyValueRemovedChangeBase</name>
        <filename>qt3dcore-qstaticpropertyvalueremovedchangebase.html</filename>
        <base>QPropertyValueRemovedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>propertyName</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>setPropertyName</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QStaticPropertyValueRemovedChangeBase</name>
            <anchorfile>qt3dcore-qstaticpropertyvalueremovedchangebase.html</anchorfile>
            <anchor>QStaticPropertyValueRemovedChangeBase</anchor>
            <arglist>(Qt3DCore::QNodeId subjectId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QSkeleton</name>
        <filename>qt3dcore-qskeleton.html</filename>
        <base>QAbstractSkeleton</base>
        <member kind="property" type="Qt3DCore::QJoint*">
            <name>rootJoint</name>
            <anchorfile>qt3dcore-qskeleton.html</anchorfile>
            <anchor>rootJoint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSkeleton</name>
            <anchorfile>qt3dcore-qskeleton.html</anchorfile>
            <anchor>QSkeleton</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QJoint *</type>
            <name>rootJoint</name>
            <anchorfile>qt3dcore-qskeleton.html</anchorfile>
            <anchor>rootJoint-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRootJoint</name>
            <anchorfile>qt3dcore-qskeleton.html</anchorfile>
            <anchor>rootJoint-prop</anchor>
            <arglist>(Qt3DCore::QJoint *rootJoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rootJointChanged</name>
            <anchorfile>qt3dcore-qskeleton.html</anchorfile>
            <anchor>rootJoint-prop</anchor>
            <arglist>(Qt3DCore::QJoint *rootJoint)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QSkeletonLoader</name>
        <filename>qt3dcore-qskeletonloader.html</filename>
        <base>QAbstractSkeleton</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>createJointsEnabled</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>createJointsEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSkeletonLoader</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>QSkeletonLoader</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSkeletonLoader</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>QSkeletonLoader-1</anchor>
            <arglist>(const QUrl &amp;source, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NotReady</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ready</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QSkeletonLoader::Status</type>
            <name>status</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreateJointsEnabled</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>isCreateJointsEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QJoint *</type>
            <name>rootJoint</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>rootJoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCreateJointsEnabled</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>createJointsEnabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Qt3DCore::QSkeletonLoader::Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>createJointsEnabledChanged</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>createJointsEnabled-prop</anchor>
            <arglist>(bool createJointsEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rootJointChanged</name>
            <anchorfile>qt3dcore-qskeletonloader.html</anchorfile>
            <anchor>rootJoint-prop</anchor>
            <arglist>(Qt3DCore::QJoint *rootJoint)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::QTransform</name>
        <filename>qt3dcore-qtransform.html</filename>
        <base>QComponent</base>
        <member kind="property" type="QMatrix4x4">
            <name>matrix</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>scale</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>scale3D</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QQuaternion">
            <name>rotation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>translation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>rotationX</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>rotationY</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>rotationZ</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>worldMatrix</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>worldMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>QTransform</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scale</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>scale3D</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>rotation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>translation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxisAndAngle</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxisAndAngle</anchor>
            <arglist>(const QVector3D &amp;axis, float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxisAndAngle</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxisAndAngle-1</anchor>
            <arglist>(float x, float y, float z, float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxesAndAngles</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxesAndAngles</anchor>
            <arglist>(const QVector3D &amp;axis1, float angle1, const QVector3D &amp;axis2, float angle2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxesAndAngles</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxesAndAngles-1</anchor>
            <arglist>(const QVector3D &amp;axis1, float angle1, const QVector3D &amp;axis2, float angle2, const QVector3D &amp;axis3, float angle3)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxes</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromAxes</anchor>
            <arglist>(const QVector3D &amp;xAxis, const QVector3D &amp;yAxis, const QVector3D &amp;zAxis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromEulerAngles</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromEulerAngles</anchor>
            <arglist>(const QVector3D &amp;eulerAngles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromEulerAngles</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>fromEulerAngles-1</anchor>
            <arglist>(float pitch, float yaw, float roll)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMatrix4x4</type>
            <name>rotateAround</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotateAround</anchor>
            <arglist>(const QVector3D &amp;point, float angle, const QVector3D &amp;axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMatrix4x4</type>
            <name>rotateFromAxes</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotateFromAxes</anchor>
            <arglist>(const QVector3D &amp;xAxis, const QVector3D &amp;yAxis, const QVector3D &amp;zAxis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>matrix</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>worldMatrix</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>worldMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>rotationX</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>rotationY</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>rotationZ</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale3D</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist>(const QVector3D &amp;scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>(const QQuaternion &amp;rotation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTranslation</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>(const QVector3D &amp;translation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationX</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist>(float rotationX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationY</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist>(float rotationY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRotationZ</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist>(float rotationZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale3DChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>scale3D-prop</anchor>
            <arglist>(const QVector3D &amp;scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotation-prop</anchor>
            <arglist>(const QQuaternion &amp;rotation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translationChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>translation-prop</anchor>
            <arglist>(const QVector3D &amp;translation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>matrixChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>matrix-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationXChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationX-prop</anchor>
            <arglist>(float rotationX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationYChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationY-prop</anchor>
            <arglist>(float rotationY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotationZChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>rotationZ-prop</anchor>
            <arglist>(float rotationZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>worldMatrixChanged</name>
            <anchorfile>qt3dcore-qtransform.html</anchorfile>
            <anchor>worldMatrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;worldMatrix)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DCore::Quick</name>
        <filename>qt3dcore-quick.html</filename>
        <class>Qt3DCore::Quick::QQmlAspectEngine</class>
    </compound>
    <compound kind="class">
        <name>Qt3DCore::Quick::QQmlAspectEngine</name>
        <filename>qt3dcore-quick-qqmlaspectengine.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Null</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ready</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Loading</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQmlAspectEngine</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>QQmlAspectEngine</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::Quick::QQmlAspectEngine::Status</type>
            <name>status</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQmlEngine *</type>
            <name>qmlEngine</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>qmlEngine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QAspectEngine *</type>
            <name>aspectEngine</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>aspectEngine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>statusChanged</anchor>
            <arglist>(Qt3DCore::Quick::QQmlAspectEngine::Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sceneCreated</name>
            <anchorfile>qt3dcore-quick-qqmlaspectengine.html</anchorfile>
            <anchor>sceneCreated</anchor>
            <arglist>(QObject *rootObject)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DExtras</name>
        <filename>qt3dextras.html</filename>
        <class>Qt3DExtras::QAbstractCameraController</class>
        <class>Qt3DExtras::QConeGeometry</class>
        <class>Qt3DExtras::QConeMesh</class>
        <class>Qt3DExtras::QCuboidGeometry</class>
        <class>Qt3DExtras::QCuboidMesh</class>
        <class>Qt3DExtras::QCylinderGeometry</class>
        <class>Qt3DExtras::QCylinderMesh</class>
        <class>Qt3DExtras::QDiffuseMapMaterial</class>
        <class>Qt3DExtras::QDiffuseSpecularMapMaterial</class>
        <class>Qt3DExtras::QDiffuseSpecularMaterial</class>
        <class>Qt3DExtras::QExtrudedTextGeometry</class>
        <class>Qt3DExtras::QExtrudedTextMesh</class>
        <class>Qt3DExtras::QFirstPersonCameraController</class>
        <class>Qt3DExtras::QForwardRenderer</class>
        <class>Qt3DExtras::QGoochMaterial</class>
        <class>Qt3DExtras::QMetalRoughMaterial</class>
        <class>Qt3DExtras::QMorphPhongMaterial</class>
        <class>Qt3DExtras::QNormalDiffuseMapMaterial</class>
        <class>Qt3DExtras::QNormalDiffuseMapAlphaMaterial</class>
        <class>Qt3DExtras::QNormalDiffuseSpecularMapMaterial</class>
        <class>Qt3DExtras::QOrbitCameraController</class>
        <class>Qt3DExtras::QPerVertexColorMaterial</class>
        <class>Qt3DExtras::QPhongAlphaMaterial</class>
        <class>Qt3DExtras::QPhongMaterial</class>
        <class>Qt3DExtras::QPlaneGeometry</class>
        <class>Qt3DExtras::QPlaneMesh</class>
        <class>Qt3DExtras::QSkyboxEntity</class>
        <class>Qt3DExtras::QSphereGeometry</class>
        <class>Qt3DExtras::QSphereMesh</class>
        <class>Qt3DExtras::QText2DEntity</class>
        <class>Qt3DExtras::QTexturedMetalRoughMaterial</class>
        <class>Qt3DExtras::QTextureMaterial</class>
        <class>Qt3DExtras::QTorusGeometry</class>
        <class>Qt3DExtras::QTorusMesh</class>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QAbstractCameraController</name>
        <filename>qt3dextras-qabstractcameracontroller.html</filename>
        <base>QEntity</base>
        <member kind="property" type="Qt3DRender::QCamera*">
            <name>camera</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>linearSpeed</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>lookSpeed</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>lookSpeed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>acceleration</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>deceleration</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QCamera *</type>
            <name>camera</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>linearSpeed</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lookSpeed</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>lookSpeed-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>acceleration</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>deceleration</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DRender::QCamera *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLinearSpeed</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist>(float linearSpeed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLookSpeed</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>lookSpeed-prop</anchor>
            <arglist>(float lookSpeed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceleration</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>(float acceleration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeceleration</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist>(float deceleration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cameraChanged</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linearSpeedChanged</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>linearSpeed-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lookSpeedChanged</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>lookSpeed-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accelerationChanged</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>(float acceleration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>decelerationChanged</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist>(float deceleration)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>Qt3DInput::QKeyboardDevice *</type>
            <name>keyboardDevice</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>keyboardDevice</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>Qt3DInput::QMouseDevice *</type>
            <name>mouseDevice</name>
            <anchorfile>qt3dextras-qabstractcameracontroller.html</anchorfile>
            <anchor>mouseDevice</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QConeGeometry</name>
        <filename>qt3dextras-qconegeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="bool">
            <name>hasTopEndcap</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>hasBottomEndcap</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>topRadius</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>bottomRadius</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>length</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasTopEndcap</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasBottomEndcap</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>topRadius</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>bottomRadius</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHasTopEndcap</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist>(bool hasTopEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHasBottomEndcap</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist>(bool hasBottomEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopRadius</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist>(float topRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomRadius</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist>(float bottomRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hasTopEndcapChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist>(bool hasTopEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hasBottomEndcapChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist>(bool hasBottomEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topRadiusChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist>(float topRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomRadiusChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist>(float bottomRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lengthChanged</name>
            <anchorfile>qt3dextras-qconegeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QConeMesh</name>
        <filename>qt3dextras-qconemesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>hasTopEndcap</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>hasBottomEndcap</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>topRadius</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>bottomRadius</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>length</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasTopEndcap</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasBottomEndcap</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>topRadius</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>bottomRadius</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHasTopEndcap</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist>(bool hasTopEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHasBottomEndcap</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist>(bool hasBottomEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopRadius</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist>(float topRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomRadius</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist>(float bottomRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hasTopEndcapChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasTopEndcap-prop</anchor>
            <arglist>(bool hasTopEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hasBottomEndcapChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>hasBottomEndcap-prop</anchor>
            <arglist>(bool hasBottomEndcap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topRadiusChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>topRadius-prop</anchor>
            <arglist>(float topRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomRadiusChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>bottomRadius-prop</anchor>
            <arglist>(float bottomRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lengthChanged</name>
            <anchorfile>qt3dextras-qconemesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QCuboidGeometry</name>
        <filename>qt3dextras-qcuboidgeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="float">
            <name>xExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>yExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>zExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>xyMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>yzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>xzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>tangentAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCuboidGeometry</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>QCuboidGeometry</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>xExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>yExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>zExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>yzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>xyMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>xzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>tangentAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>(float xExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>(float yExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZExtent</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>(float zExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYZMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXZMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXYMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xExtentChanged</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>(float xExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yExtentChanged</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>(float yExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zExtentChanged</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>(float zExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yzMeshResolutionChanged</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;yzMeshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xzMeshResolutionChanged</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;xzMeshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xyMeshResolutionChanged</name>
            <anchorfile>qt3dextras-qcuboidgeometry.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;xyMeshResolution)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QCuboidMesh</name>
        <filename>qt3dextras-qcuboidmesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="float">
            <name>xExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>yExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>zExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>yzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>xzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>xyMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCuboidMesh</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>QCuboidMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>xExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>yExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>zExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>yzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>xzMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>xyMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>(float xExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>(float yExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZExtent</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>(float zExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYZMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXZMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setXYMeshResolution</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xExtentChanged</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xExtent-prop</anchor>
            <arglist>(float xExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yExtentChanged</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yExtent-prop</anchor>
            <arglist>(float yExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zExtentChanged</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>zExtent-prop</anchor>
            <arglist>(float zExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yzMeshResolutionChanged</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>yzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;yzMeshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xzMeshResolutionChanged</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xzMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;xzMeshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xyMeshResolutionChanged</name>
            <anchorfile>qt3dextras-qcuboidmesh.html</anchorfile>
            <anchor>xyMeshResolution-prop</anchor>
            <arglist>(const QSize &amp;xyMeshResolution)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QCylinderGeometry</name>
        <filename>qt3dextras-qcylindergeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>length</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCylinderGeometry</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>QCylinderGeometry</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lengthChanged</name>
            <anchorfile>qt3dextras-qcylindergeometry.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QCylinderMesh</name>
        <filename>qt3dextras-qcylindermesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>length</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCylinderMesh</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>QCylinderMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lengthChanged</name>
            <anchorfile>qt3dextras-qcylindermesh.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QDiffuseMapMaterial</name>
        <filename>qt3dextras-qdiffusemapmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture*">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDiffuseMapMaterial</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>QDiffuseMapMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDiffuseMapMaterial</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>dtor.QDiffuseMapMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3dextras-qdiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QDiffuseSpecularMapMaterial</name>
        <filename>qt3dextras-qdiffusespecularmapmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture*">
            <name>specular</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture*">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>QDiffuseSpecularMapMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>dtor.QDiffuseSpecularMapMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QDiffuseSpecularMaterial</name>
        <filename>qt3dextras-qdiffusespecularmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>specular</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>normal</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>alphaBlending</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>alphaBlending-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDiffuseSpecularMaterial</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>QDiffuseSpecularMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDiffuseSpecularMaterial</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>dtor.QDiffuseSpecularMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>normal</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAlphaBlendingEnabled</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>alphaBlending-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QVariant &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QVariant &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormal</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(const QVariant &amp;normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaBlendingEnabled</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>alphaBlending-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QVariant &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QVariant &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(const QVariant &amp;normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaBlendingEnabledChanged</name>
            <anchorfile>qt3dextras-qdiffusespecularmaterial.html</anchorfile>
            <anchor>alphaBlending-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QExtrudedTextGeometry</name>
        <filename>qt3dextras-qextrudedtextgeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QFont">
            <name>font</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>extrusionLength</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>extrusionLength-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExtrudedTextGeometry</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>QExtrudedTextGeometry</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>extrusionLength</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>extrusionLength-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepth</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>extrusionLength-prop</anchor>
            <arglist>(float extrusionLength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textChanged</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fontChanged</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthChanged</name>
            <anchorfile>qt3dextras-qextrudedtextgeometry.html</anchorfile>
            <anchor>extrusionLength-prop</anchor>
            <arglist>(float extrusionLength)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QExtrudedTextMesh</name>
        <filename>qt3dextras-qextrudedtextmesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QFont">
            <name>font</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>depth</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExtrudedTextMesh</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>QExtrudedTextMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>depth</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepth</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>(float depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textChanged</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fontChanged</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthChanged</name>
            <anchorfile>qt3dextras-qextrudedtextmesh.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>(float depth)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QFirstPersonCameraController</name>
        <filename>qt3dextras-qfirstpersoncameracontroller.html</filename>
        <base>QAbstractCameraController</base>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QForwardRenderer</name>
        <filename>qt3dextras-qforwardrenderer.html</filename>
        <base>QTechniqueFilter</base>
        <member kind="property" type="QObject*">
            <name>surface</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>surface-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QObject*">
            <name>window</name>
            <anchorfile>qt3dextras-qforwardrenderer-obsolete.html</anchorfile>
            <anchor>window-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>viewportRect</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>viewportRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>clearColor</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QClearBuffers::BufferType">
            <name>buffersToClear</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>buffersToClear-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DCore::QEntity*">
            <name>camera</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>externalRenderTargetSize</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>frustumCulling</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>frustumCulling-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>gamma</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>showDebugOverlay</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>showDebugOverlay-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>viewportRect</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>viewportRect-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>clearColor</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QClearBuffers::BufferType</type>
            <name>buffersToClear</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>buffersToClear-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>camera</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>surface</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>surface</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>externalRenderTargetSize</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFrustumCullingEnabled</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>frustumCulling-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>gamma</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>showDebugOverlay</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>showDebugOverlay-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewportRect</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>viewportRect-prop</anchor>
            <arglist>(const QRectF &amp;viewportRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearColor</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>(const QColor &amp;clearColor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBuffersToClear</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>buffersToClear-prop</anchor>
            <arglist>(Qt3DRender::QClearBuffers::BufferType )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DCore::QEntity *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSurface</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>setSurface</anchor>
            <arglist>(QObject *surface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExternalRenderTargetSize</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrustumCullingEnabled</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>frustumCulling-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGamma</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist>(float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShowDebugOverlay</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>showDebugOverlay-prop</anchor>
            <arglist>(bool showDebugOverlay)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewportRectChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>viewportRect-prop</anchor>
            <arglist>(const QRectF &amp;viewportRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearColorChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>(const QColor &amp;clearColor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buffersToClearChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>buffersToClear-prop</anchor>
            <arglist>(Qt3DRender::QClearBuffers::BufferType )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cameraChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DCore::QEntity *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>surfaceChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>surfaceChanged</anchor>
            <arglist>(QObject *surface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>externalRenderTargetSizeChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frustumCullingEnabledChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>frustumCulling-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>gammaChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist>(float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showDebugOverlayChanged</name>
            <anchorfile>qt3dextras-qforwardrenderer.html</anchorfile>
            <anchor>showDebugOverlay-prop</anchor>
            <arglist>(bool showDebugOverlay)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QGoochMaterial</name>
        <filename>qt3dextras-qgoochmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>cool</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>cool-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>warm</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>warm-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>alpha</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>beta</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>beta-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGoochMaterial</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>QGoochMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>cool</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>cool-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>warm</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>warm-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>alpha</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>beta</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>beta-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCool</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>cool-prop</anchor>
            <arglist>(const QColor &amp;cool)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWarm</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>warm-prop</anchor>
            <arglist>(const QColor &amp;warm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlpha</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(float alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBeta</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>beta-prop</anchor>
            <arglist>(float beta)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>coolChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>cool-prop</anchor>
            <arglist>(const QColor &amp;cool)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>warmChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>warm-prop</anchor>
            <arglist>(const QColor &amp;warm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(float alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>betaChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>beta-prop</anchor>
            <arglist>(float beta)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qgoochmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QMetalRoughMaterial</name>
        <filename>qt3dextras-qmetalroughmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QVariant">
            <name>baseColor</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>baseColor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>metalness</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>metalness-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>roughness</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>roughness-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>ambientOcclusion</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>ambientOcclusion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>normal</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMetalRoughMaterial</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>QMetalRoughMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMetalRoughMaterial</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>dtor.QMetalRoughMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>baseColor</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>baseColor-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>metalness</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>metalness-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>roughness</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>roughness-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>ambientOcclusion</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>ambientOcclusion-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>normal</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseColor</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>baseColor-prop</anchor>
            <arglist>(const QVariant &amp;baseColor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMetalness</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>metalness-prop</anchor>
            <arglist>(const QVariant &amp;metalness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRoughness</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>roughness-prop</anchor>
            <arglist>(const QVariant &amp;roughness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbientOcclusion</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>ambientOcclusion-prop</anchor>
            <arglist>(const QVariant &amp;ambientOcclusion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormal</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(const QVariant &amp;normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>baseColorChanged</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>baseColor-prop</anchor>
            <arglist>(const QVariant &amp;baseColor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metalnessChanged</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>metalness-prop</anchor>
            <arglist>(const QVariant &amp;metalness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>roughnessChanged</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>roughness-prop</anchor>
            <arglist>(const QVariant &amp;roughness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientOcclusionChanged</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>ambientOcclusion-prop</anchor>
            <arglist>(const QVariant &amp;ambientOcclusion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalChanged</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(const QVariant &amp;normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3dextras-qmetalroughmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QMorphPhongMaterial</name>
        <filename>qt3dextras-qmorphphongmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>interpolator</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMorphPhongMaterial</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>QMorphPhongMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMorphPhongMaterial</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>dtor.QMorphPhongMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>interpolator</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInterpolator</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>(float interpolator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>interpolatorChanged</name>
            <anchorfile>qt3dextras-qmorphphongmaterial.html</anchorfile>
            <anchor>interpolator-prop</anchor>
            <arglist>(float interpolator)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QNormalDiffuseMapAlphaMaterial</name>
        <filename>qt3dextras-qnormaldiffusemapalphamaterial.html</filename>
        <base>QNormalDiffuseMapMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseMapAlphaMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusemapalphamaterial.html</anchorfile>
            <anchor>QNormalDiffuseMapAlphaMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNormalDiffuseMapAlphaMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusemapalphamaterial.html</anchorfile>
            <anchor>dtor.QNormalDiffuseMapAlphaMaterial</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QNormalDiffuseMapMaterial</name>
        <filename>qt3dextras-qnormaldiffusemapmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture*">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture*">
            <name>normal</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseMapMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>QNormalDiffuseMapMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNormalDiffuseMapMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>dtor.QNormalDiffuseMapMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>normal</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormal</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusemapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QNormalDiffuseSpecularMapMaterial</name>
        <filename>qt3dextras-qnormaldiffusespecularmapmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture*">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture*">
            <name>normal</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture*">
            <name>specular</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>textureScale</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNormalDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>QNormalDiffuseSpecularMapMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNormalDiffuseSpecularMapMaterial</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>dtor.QNormalDiffuseSpecularMapMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>normal</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>textureScale</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormal</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureScale</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureScaleChanged</name>
            <anchorfile>qt3dextras-qnormaldiffusespecularmapmaterial.html</anchorfile>
            <anchor>textureScale-prop</anchor>
            <arglist>(float textureScale)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QOrbitCameraController</name>
        <filename>qt3dextras-qorbitcameracontroller.html</filename>
        <base>QAbstractCameraController</base>
        <member kind="property" type="float">
            <name>zoomInLimit</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>zoomInLimit-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>zoomInLimit</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>zoomInLimit-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZoomInLimit</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>zoomInLimit-prop</anchor>
            <arglist>(float zoomInLimit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zoomInLimitChanged</name>
            <anchorfile>qt3dextras-qorbitcameracontroller.html</anchorfile>
            <anchor>zoomInLimit-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QPerVertexColorMaterial</name>
        <filename>qt3dextras-qpervertexcolormaterial.html</filename>
        <base>QMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPerVertexColorMaterial</name>
            <anchorfile>qt3dextras-qpervertexcolormaterial.html</anchorfile>
            <anchor>QPerVertexColorMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPerVertexColorMaterial</name>
            <anchorfile>qt3dextras-qpervertexcolormaterial.html</anchorfile>
            <anchor>dtor.QPerVertexColorMaterial</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QPhongAlphaMaterial</name>
        <filename>qt3dextras-qphongalphamaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>alpha</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QBlendEquationArguments::Blending">
            <name>sourceRgbArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceRgbArg-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QBlendEquationArguments::Blending">
            <name>destinationRgbArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationRgbArg-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QBlendEquationArguments::Blending">
            <name>sourceAlphaArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceAlphaArg-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QBlendEquationArguments::Blending">
            <name>destinationAlphaArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationAlphaArg-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QBlendEquation::BlendFunction">
            <name>blendFunctionArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>blendFunctionArg-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPhongAlphaMaterial</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>QPhongAlphaMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPhongAlphaMaterial</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>dtor.QPhongAlphaMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>alpha</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquationArguments::Blending</type>
            <name>sourceRgbArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceRgbArg-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquationArguments::Blending</type>
            <name>destinationRgbArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationRgbArg-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquationArguments::Blending</type>
            <name>sourceAlphaArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceAlphaArg-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquationArguments::Blending</type>
            <name>destinationAlphaArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationAlphaArg-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquation::BlendFunction</type>
            <name>blendFunctionArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>blendFunctionArg-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlpha</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(float alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceRgbArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceRgbArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceRgbArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationRgbArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationRgbArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationRgbArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceAlphaArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceAlphaArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceAlphaArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationAlphaArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationAlphaArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationAlphaArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlendFunctionArg</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>blendFunctionArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquation::BlendFunction blendFunctionArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>alpha-prop</anchor>
            <arglist>(float alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceRgbArgChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceRgbArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceRgbArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationRgbArgChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationRgbArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationRgbArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceAlphaArgChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>sourceAlphaArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceAlphaArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationAlphaArgChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>destinationAlphaArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationAlphaArg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blendFunctionArgChanged</name>
            <anchorfile>qt3dextras-qphongalphamaterial.html</anchorfile>
            <anchor>blendFunctionArg-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquation::BlendFunction blendFunctionArg)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QPhongMaterial</name>
        <filename>qt3dextras-qphongmaterial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="QColor">
            <name>ambient</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>diffuse</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>specular</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>shininess</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPhongMaterial</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>QPhongMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPhongMaterial</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>dtor.QPhongMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>ambient</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>diffuse</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>specular</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>shininess</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmbient</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffuse</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShininess</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientChanged</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>ambient-prop</anchor>
            <arglist>(const QColor &amp;ambient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>diffuseChanged</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>diffuse-prop</anchor>
            <arglist>(const QColor &amp;diffuse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(const QColor &amp;specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shininessChanged</name>
            <anchorfile>qt3dextras-qphongmaterial.html</anchorfile>
            <anchor>shininess-prop</anchor>
            <arglist>(float shininess)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QPlaneGeometry</name>
        <filename>qt3dextras-qplanegeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="float">
            <name>width</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>height</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>resolution</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>resolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>mirrored</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>tangentAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaneGeometry</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>QPlaneGeometry</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>resolution</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>resolution-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>width</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>height</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mirrored</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>tangentAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolution</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>resolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMirrored</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resolutionChanged</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>resolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mirroredChanged</name>
            <anchorfile>qt3dextras-qplanegeometry.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QPlaneMesh</name>
        <filename>qt3dextras-qplanemesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="float">
            <name>width</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>height</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>meshResolution</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>meshResolution-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>mirrored</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlaneMesh</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>QPlaneMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>width</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>height</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>meshResolution</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>meshResolution-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mirrored</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMeshResolution</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>meshResolution-prop</anchor>
            <arglist>(const QSize &amp;resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMirrored</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>meshResolutionChanged</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>meshResolution-prop</anchor>
            <arglist>(const QSize &amp;meshResolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mirroredChanged</name>
            <anchorfile>qt3dextras-qplanemesh.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QSkyboxEntity</name>
        <filename>qt3dextras-qskyboxentity.html</filename>
        <base>QEntity</base>
        <member kind="property" type="QString">
            <name>baseName</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>baseName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>extension</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>extension-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>gammaCorrect</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>gammaCorrect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSkyboxEntity</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>QSkyboxEntity</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>baseName</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>baseName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>extension</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>extension</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isGammaCorrectEnabled</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>isGammaCorrectEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseName</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>setBaseName</anchor>
            <arglist>(const QString &amp;baseName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtension</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>setExtension</anchor>
            <arglist>(const QString &amp;extension)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGammaCorrectEnabled</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>setGammaCorrectEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>baseNameChanged</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>baseName-prop</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>extensionChanged</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>extension-prop</anchor>
            <arglist>(const QString &amp;extension)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>gammaCorrectEnabledChanged</name>
            <anchorfile>qt3dextras-qskyboxentity.html</anchorfile>
            <anchor>gammaCorrect-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QSphereGeometry</name>
        <filename>qt3dextras-qspheregeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>generateTangents</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>tangentAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSphereGeometry</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>QSphereGeometry</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>generateTangents</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>tangentAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>tangentAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGenerateTangents</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>(bool gen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateTangentsChanged</name>
            <anchorfile>qt3dextras-qspheregeometry.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>(bool generateTangents)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QSphereMesh</name>
        <filename>qt3dextras-qspheremesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>generateTangents</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSphereMesh</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>QSphereMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>generateTangents</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGenerateTangents</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>(bool gen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateTangentsChanged</name>
            <anchorfile>qt3dextras-qspheremesh.html</anchorfile>
            <anchor>generateTangents-prop</anchor>
            <arglist>(bool generateTangents)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QText2DEntity</name>
        <filename>qt3dextras-qtext2dentity.html</filename>
        <base>QEntity</base>
        <member kind="property" type="QFont">
            <name>font</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>color</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>width</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>height</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>width</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>height</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fontChanged</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>font-prop</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>colorChanged</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textChanged</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(float width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3dextras-qtext2dentity.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(float height)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QTextureMaterial</name>
        <filename>qt3dextras-qtexturematerial.html</filename>
        <base>QMaterial</base>
        <member kind="property" type="Qt3DRender::QAbstractTexture*">
            <name>texture</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector2D">
            <name>textureOffset</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>textureOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix3x3">
            <name>textureTransform</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>textureTransform-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>alphaBlending</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>alphaBlending-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureMaterial</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>QTextureMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextureMaterial</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>dtor.QTextureMaterial</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>texture</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>textureOffset</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>textureOffset-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix3x3</type>
            <name>textureTransform</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>textureTransform-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAlphaBlendingEnabled</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>alphaBlending-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureOffset</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>textureOffset-prop</anchor>
            <arglist>(QVector2D textureOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureTransform</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>textureTransform-prop</anchor>
            <arglist>(const QMatrix3x3 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaBlendingEnabled</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>alphaBlending-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureChanged</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureOffsetChanged</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>textureOffset-prop</anchor>
            <arglist>(QVector2D textureOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureTransformChanged</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>textureTransform-prop</anchor>
            <arglist>(const QMatrix3x3 &amp;textureTransform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaBlendingEnabledChanged</name>
            <anchorfile>qt3dextras-qtexturematerial.html</anchorfile>
            <anchor>alphaBlending-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QTexturedMetalRoughMaterial</name>
        <filename>qt3dextras-qtexturedmetalroughmaterial.html</filename>
        <base>QMetalRoughMaterial</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexturedMetalRoughMaterial</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>QTexturedMetalRoughMaterial</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ambientOcclusionChanged</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>ambientOcclusion-prop</anchor>
            <arglist>(const QVariant &amp;ambientOcclusion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalChanged</name>
            <anchorfile>qt3dextras-qtexturedmetalroughmaterial.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(const QVariant &amp;normal)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QTorusGeometry</name>
        <filename>qt3dextras-qtorusgeometry.html</filename>
        <base>QGeometry</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>minorRadius</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTorusGeometry</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>QTorusGeometry</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateVertices</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>updateVertices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateIndices</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>updateIndices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>minorRadius</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>positionAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>positionAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>normalAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>normalAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>texCoordAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>texCoordAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>indexAttribute</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>indexAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinorRadius</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>(float minorRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minorRadiusChanged</name>
            <anchorfile>qt3dextras-qtorusgeometry.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>(float minorRadius)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DExtras::QTorusMesh</name>
        <filename>qt3dextras-qtorusmesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="int">
            <name>rings</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>slices</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>minorRadius</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTorusMesh</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>QTorusMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rings</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>slices</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>minorRadius</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRings</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSlices</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinorRadius</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>(float minorRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>radiusChanged</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ringsChanged</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>rings-prop</anchor>
            <arglist>(int rings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slicesChanged</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>slices-prop</anchor>
            <arglist>(int slices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minorRadiusChanged</name>
            <anchorfile>qt3dextras-qtorusmesh.html</anchorfile>
            <anchor>minorRadius-prop</anchor>
            <arglist>(float minorRadius)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DInput</name>
        <filename>qt3dinput.html</filename>
        <class>Qt3DInput::QAbstractActionInput</class>
        <class>Qt3DInput::QAbstractPhysicalDevice</class>
        <class>Qt3DInput::QAbstractAxisInput</class>
        <class>Qt3DInput::QAction</class>
        <class>Qt3DInput::QActionInput</class>
        <class>Qt3DInput::QAnalogAxisInput</class>
        <class>Qt3DInput::QAxis</class>
        <class>Qt3DInput::QAxisAccumulator</class>
        <class>Qt3DInput::QAxisSetting</class>
        <class>Qt3DInput::QButtonAxisInput</class>
        <class>Qt3DInput::QInputAspect</class>
        <class>Qt3DInput::QInputChord</class>
        <class>Qt3DInput::QInputSequence</class>
        <class>Qt3DInput::QInputSettings</class>
        <member kind="typedef" type="">
            <name>QKeyEventPtr</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>QKeyEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DInput::QKeyEvent</class>
        <class>Qt3DInput::QKeyboardHandler</class>
        <class>Qt3DInput::QKeyboardDevice</class>
        <class>Qt3DInput::QLogicalDevice</class>
        <class>Qt3DInput::QMouseDevice</class>
        <class>Qt3DInput::QMouseEvent</class>
        <member kind="typedef" type="">
            <name>QMouseEventPtr</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>QMouseEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DInput::QWheelEvent</class>
        <member kind="typedef" type="">
            <name>QWheelEventPtr</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>QWheelEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DInput::QMouseHandler</class>
        <class>Qt3DInput::QPhysicalDeviceCreatedChangeBase</class>
        <class>Qt3DInput::QAbstractPhysicalDeviceProxy</class>
        <class>Qt3DInput::QInputDeviceIntegration</class>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAbstractActionInput</name>
        <filename>qt3dinput-qabstractactioninput.html</filename>
        <base>QNode</base>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAbstractAxisInput</name>
        <filename>qt3dinput-qabstractaxisinput.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DInput::QAbstractPhysicalDevice*">
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qabstractaxisinput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QAbstractPhysicalDevice *</type>
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qabstractaxisinput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceDevice</name>
            <anchorfile>qt3dinput-qabstractaxisinput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(Qt3DInput::QAbstractPhysicalDevice *sourceDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceDeviceChanged</name>
            <anchorfile>qt3dinput-qabstractaxisinput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(Qt3DInput::QAbstractPhysicalDevice *sourceDevice)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAbstractPhysicalDevice</name>
        <filename>qt3dinput-qabstractphysicaldevice.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractPhysicalDevice</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>QAbstractPhysicalDevice</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisCount</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>axisCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonCount</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>buttonCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>axisNames</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>axisNames</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>buttonNames</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>buttonNames</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisIdentifier</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>axisIdentifier</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonIdentifier</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>buttonIdentifier</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAxisSetting</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>addAxisSetting</anchor>
            <arglist>(Qt3DInput::QAxisSetting *axisSetting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAxisSetting</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>removeAxisSetting</anchor>
            <arglist>(Qt3DInput::QAxisSetting *axisSetting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DInput::QAxisSetting *&gt;</type>
            <name>axisSettings</name>
            <anchorfile>qt3dinput-qabstractphysicaldevice.html</anchorfile>
            <anchor>axisSettings</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAbstractPhysicalDeviceProxy</name>
        <filename>qt3dinput-qabstractphysicaldeviceproxy.html</filename>
        <base>QAbstractPhysicalDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>deviceName</name>
            <anchorfile>qt3dinput-qabstractphysicaldeviceproxy.html</anchorfile>
            <anchor>deviceName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QAbstractPhysicalDeviceProxy::DeviceStatus</type>
            <name>status</name>
            <anchorfile>qt3dinput-qabstractphysicaldeviceproxy.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3dinput-qabstractphysicaldeviceproxy.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(QAbstractPhysicalDeviceProxy::DeviceStatus status)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAction</name>
        <filename>qt3dinput-qaction.html</filename>
        <base>QNode</base>
        <member kind="property" type="bool">
            <name>active</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAction</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>QAction</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addInput</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>addInput</anchor>
            <arglist>(Qt3DInput::QAbstractActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeInput</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>removeInput</anchor>
            <arglist>(Qt3DInput::QAbstractActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DInput::QAbstractActionInput *&gt;</type>
            <name>inputs</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>inputs</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeChanged</name>
            <anchorfile>qt3dinput-qaction.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>(bool isActive)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QActionInput</name>
        <filename>qt3dinput-qactioninput.html</filename>
        <base>QAbstractActionInput</base>
        <member kind="property" type="Qt3DInput::QAbstractPhysicalDevice*">
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector&lt;int&gt;">
            <name>buttons</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QActionInput</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>QActionInput</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QAbstractPhysicalDevice *</type>
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;int&gt;</type>
            <name>buttons</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceDevice</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(Qt3DInput::QAbstractPhysicalDevice *sourceDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButtons</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>setButtons</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;buttons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceDeviceChanged</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>sourceDeviceChanged</anchor>
            <arglist>(Qt3DInput::QAbstractPhysicalDevice *sourceDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonsChanged</name>
            <anchorfile>qt3dinput-qactioninput.html</anchorfile>
            <anchor>buttonsChanged</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;buttons)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAnalogAxisInput</name>
        <filename>qt3dinput-qanalogaxisinput.html</filename>
        <base>QAbstractAxisInput</base>
        <member kind="property" type="int">
            <name>axis</name>
            <anchorfile>qt3dinput-qanalogaxisinput.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnalogAxisInput</name>
            <anchorfile>qt3dinput-qanalogaxisinput.html</anchorfile>
            <anchor>QAnalogAxisInput</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>axis</name>
            <anchorfile>qt3dinput-qanalogaxisinput.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAxis</name>
            <anchorfile>qt3dinput-qanalogaxisinput.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>(int axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>axisChanged</name>
            <anchorfile>qt3dinput-qanalogaxisinput.html</anchorfile>
            <anchor>axis-prop</anchor>
            <arglist>(int axis)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAxis</name>
        <filename>qt3dinput-qaxis.html</filename>
        <base>QNode</base>
        <member kind="property" type="float">
            <name>value</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxis</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>QAxis</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addInput</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>addInput</anchor>
            <arglist>(Qt3DInput::QAbstractAxisInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeInput</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>removeInput</anchor>
            <arglist>(Qt3DInput::QAbstractAxisInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DInput::QAbstractAxisInput *&gt;</type>
            <name>inputs</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>inputs</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>value</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3dinput-qaxis.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAxisAccumulator</name>
        <filename>qt3dinput-qaxisaccumulator.html</filename>
        <base>QComponent</base>
        <member kind="property" type="float">
            <name>value</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SourceAxisType</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>SourceAxisType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Velocity</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>SourceAxisType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Acceleration</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>SourceAxisType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxisAccumulator</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>QAxisAccumulator</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QAxis *</type>
            <name>sourceAxis</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>sourceAxis</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QAxisAccumulator::SourceAxisType</type>
            <name>sourceAxisType</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>sourceAxisType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>value</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>velocity</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>velocity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scale</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceAxis</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>setSourceAxis</anchor>
            <arglist>(Qt3DInput::QAxis *sourceAxis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceAxisType</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>setSourceAxisType</anchor>
            <arglist>(QAxisAccumulator::SourceAxisType sourceAxisType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceAxisChanged</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>sourceAxis-prop</anchor>
            <arglist>(Qt3DInput::QAxis *sourceAxis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceAxisTypeChanged</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>sourceAxisType-prop</anchor>
            <arglist>(QAxisAccumulator::SourceAxisType sourceAxisType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>velocityChanged</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>velocity-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qt3dinput-qaxisaccumulator.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QAxisSetting</name>
        <filename>qt3dinput-qaxissetting.html</filename>
        <base>QNode</base>
        <member kind="property" type="float">
            <name>deadZoneRadius</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>deadZoneRadius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector&lt;int&gt;">
            <name>axes</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>axes-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>smooth</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>smooth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAxisSetting</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>QAxisSetting</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>deadZoneRadius</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>deadZoneRadius</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;int&gt;</type>
            <name>axes</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>axes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSmoothEnabled</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>isSmoothEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeadZoneRadius</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>setDeadZoneRadius</anchor>
            <arglist>(float deadZoneRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAxes</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>setAxes</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;axes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSmoothEnabled</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>setSmoothEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deadZoneRadiusChanged</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>deadZoneRadiusChanged</anchor>
            <arglist>(float deadZoneRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>axesChanged</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>axesChanged</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;axes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>smoothChanged</name>
            <anchorfile>qt3dinput-qaxissetting.html</anchorfile>
            <anchor>smoothChanged</anchor>
            <arglist>(bool smooth)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QButtonAxisInput</name>
        <filename>qt3dinput-qbuttonaxisinput.html</filename>
        <base>QAbstractAxisInput</base>
        <member kind="property" type="float">
            <name>scale</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector&lt;int&gt;">
            <name>buttons</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>acceleration</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>deceleration</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QButtonAxisInput</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>QButtonAxisInput</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scale</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;int&gt;</type>
            <name>buttons</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>acceleration</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>deceleration</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScale</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButtons</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;buttons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAcceleration</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>(float acceleration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeceleration</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist>(float deceleration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleChanged</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>scale-prop</anchor>
            <arglist>(float scale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonsChanged</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;buttons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accelerationChanged</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>acceleration-prop</anchor>
            <arglist>(float acceleration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>decelerationChanged</name>
            <anchorfile>qt3dinput-qbuttonaxisinput.html</anchorfile>
            <anchor>deceleration-prop</anchor>
            <arglist>(float deceleration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QInputAspect</name>
        <filename>qt3dinput-qinputaspect.html</filename>
        <base>QAbstractAspect</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputAspect</name>
            <anchorfile>qt3dinput-qinputaspect.html</anchorfile>
            <anchor>QInputAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QAbstractPhysicalDevice *</type>
            <name>createPhysicalDevice</name>
            <anchorfile>qt3dinput-qinputaspect.html</anchorfile>
            <anchor>createPhysicalDevice</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>availablePhysicalDevices</name>
            <anchorfile>qt3dinput-qinputaspect.html</anchorfile>
            <anchor>availablePhysicalDevices</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QInputChord</name>
        <filename>qt3dinput-qinputchord.html</filename>
        <base>QAbstractActionInput</base>
        <member kind="property" type="int">
            <name>timeout</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputChord</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>QInputChord</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timeout</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addChord</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>addChord</anchor>
            <arglist>(Qt3DInput::QAbstractActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeChord</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>removeChord</anchor>
            <arglist>(Qt3DInput::QAbstractActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DInput::QAbstractActionInput *&gt;</type>
            <name>chords</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>chords</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeout</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>setTimeout</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>timeoutChanged</name>
            <anchorfile>qt3dinput-qinputchord.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>(int timeout)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QInputDeviceIntegration</name>
        <filename>qt3dinput-qinputdeviceintegration.html</filename>
        <base>QObject</base>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QInputDeviceIntegration</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>QInputDeviceIntegration</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>registerBackendType</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>registerBackendType-1</anchor>
            <arglist>(const QMetaObject &amp;metaObject, const Qt3DCore::QBackendNodeMapperPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initialize</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>(Qt3DInput::QInputAspect *aspect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual Qt3DInput::QAbstractPhysicalDevice *</type>
            <name>createPhysicalDevice</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>createPhysicalDevice</anchor>
            <arglist>(const QString &amp;name) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVector&lt;Qt3DCore::QNodeId&gt;</type>
            <name>physicalDevices</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>physicalDevices</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual Qt3DInput::QAbstractPhysicalDeviceBackendNode *</type>
            <name>physicalDevice</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>physicalDevice</anchor>
            <arglist>(Qt3DCore::QNodeId id) const const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>Qt3DInput::QInputAspect *</type>
            <name>inputAspect</name>
            <anchorfile>qt3dinput-qinputdeviceintegration.html</anchorfile>
            <anchor>inputAspect</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QInputSequence</name>
        <filename>qt3dinput-qinputsequence.html</filename>
        <base>QAbstractActionInput</base>
        <member kind="property" type="int">
            <name>timeout</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>buttonInterval</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>buttonInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputSequence</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>QInputSequence</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timeout</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>timeout</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>buttonInterval</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>buttonInterval</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addSequence</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>addSequence</anchor>
            <arglist>(Qt3DInput::QAbstractActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeSequence</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>removeSequence</anchor>
            <arglist>(Qt3DInput::QAbstractActionInput *input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DInput::QAbstractActionInput *&gt;</type>
            <name>sequences</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>sequences</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeout</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setButtonInterval</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>buttonInterval-prop</anchor>
            <arglist>(int buttonInterval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>timeoutChanged</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buttonIntervalChanged</name>
            <anchorfile>qt3dinput-qinputsequence.html</anchorfile>
            <anchor>buttonInterval-prop</anchor>
            <arglist>(int buttonInterval)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QInputSettings</name>
        <filename>qt3dinput-qinputsettings.html</filename>
        <base>QComponent</base>
        <member kind="property" type="QObject*">
            <name>eventSource</name>
            <anchorfile>qt3dinput-qinputsettings.html</anchorfile>
            <anchor>eventSource-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>eventSource</name>
            <anchorfile>qt3dinput-qinputsettings.html</anchorfile>
            <anchor>eventSource-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEventSource</name>
            <anchorfile>qt3dinput-qinputsettings.html</anchorfile>
            <anchor>eventSource-prop</anchor>
            <arglist>(QObject *eventSource)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>eventSourceChanged</name>
            <anchorfile>qt3dinput-qinputsettings.html</anchorfile>
            <anchor>eventSource-prop</anchor>
            <arglist>(QObject *)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QKeyEvent</name>
        <filename>qt3dinput-qkeyevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>key</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>text</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>modifiers</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isAutoRepeat</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>isAutoRepeat-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="quint32">
            <name>nativeScanCode</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>nativeScanCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>key</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>key-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>text-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>modifiers</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAutoRepeat</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>isAutoRepeat-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>nativeScanCode</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>nativeScanCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matches</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>matches</anchor>
            <arglist>(QKeySequence::StandardKey key_) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QKeyEventPtr</name>
            <anchorfile>qt3dinput-qkeyevent.html</anchorfile>
            <anchor>QKeyEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QKeyboardDevice</name>
        <filename>qt3dinput-qkeyboarddevice.html</filename>
        <base>QAbstractPhysicalDevice</base>
        <member kind="property" type="Qt3DInput::QKeyboardHandler*">
            <name>activeInput</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>activeInput-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyboardDevice</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>QKeyboardDevice</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QKeyboardHandler *</type>
            <name>activeInput</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>activeInput-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisCount</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>axisCount</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonCount</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>buttonCount</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>axisNames</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>axisNames</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>buttonNames</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>buttonNames</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisIdentifier</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>axisIdentifier</anchor>
            <arglist>(const QString &amp;name) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonIdentifier</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>buttonIdentifier</anchor>
            <arglist>(const QString &amp;name) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeInputChanged</name>
            <anchorfile>qt3dinput-qkeyboarddevice.html</anchorfile>
            <anchor>activeInput-prop</anchor>
            <arglist>(Qt3DInput::QKeyboardHandler *activeInput)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QKeyboardHandler</name>
        <filename>qt3dinput-qkeyboardhandler.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DInput::QKeyboardDevice*">
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>focus</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyboardHandler</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>QKeyboardHandler</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QKeyboardDevice *</type>
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>sourceDevice</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>focus</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceDevice</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(Qt3DInput::QKeyboardDevice *keyboardDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>setFocus</anchor>
            <arglist>(bool focus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceDeviceChanged</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(Qt3DInput::QKeyboardDevice *keyboardDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusChanged</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>focus-prop</anchor>
            <arglist>(bool focus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit0Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit0Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit1Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit1Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit2Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit2Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit3Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit3Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit4Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit4Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit5Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit5Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit6Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit6Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit7Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit7Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit8Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit8Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digit9Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>digit9Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>leftPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rightPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>rightPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>upPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>upPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>downPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>downPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>tabPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backtabPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>backtabPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>asteriskPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>asteriskPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>numberSignPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>numberSignPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>escapePressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>escapePressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>returnPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>returnPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enterPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>enterPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deletePressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>deletePressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>spacePressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>spacePressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>backPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancelPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>cancelPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>selectPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yesPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>yesPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>noPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>noPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context1Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>context1Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context2Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>context2Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context3Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>context3Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>context4Pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>context4Pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>callPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>callPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hangupPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>hangupPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>flipPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>flipPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>menuPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>menuPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeUpPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>volumeUpPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeDownPressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>volumeDownPressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>released</name>
            <anchorfile>qt3dinput-qkeyboardhandler.html</anchorfile>
            <anchor>released</anchor>
            <arglist>(Qt3DInput::QKeyEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QLogicalDevice</name>
        <filename>qt3dinput-qlogicaldevice.html</filename>
        <base>QComponent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLogicalDevice</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>QLogicalDevice</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAction</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>addAction</anchor>
            <arglist>(Qt3DInput::QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAction</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>removeAction</anchor>
            <arglist>(Qt3DInput::QAction *action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DInput::QAction *&gt;</type>
            <name>actions</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>actions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAxis</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>addAxis</anchor>
            <arglist>(Qt3DInput::QAxis *axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAxis</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>removeAxis</anchor>
            <arglist>(Qt3DInput::QAxis *axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DInput::QAxis *&gt;</type>
            <name>axes</name>
            <anchorfile>qt3dinput-qlogicaldevice.html</anchorfile>
            <anchor>axes</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QMouseDevice</name>
        <filename>qt3dinput-qmousedevice.html</filename>
        <base>QAbstractPhysicalDevice</base>
        <member kind="property" type="float">
            <name>sensitivity</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>sensitivity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>updateAxesContinuously</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>updateAxesContinuously-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseDevice</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>QMouseDevice</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enumeration">
            <name>Axis</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>Axis-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>X</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Y</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WheelX</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WheelY</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisCount</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>axisCount</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonCount</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>buttonCount</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>axisNames</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>axisNames</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>buttonNames</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>buttonNames</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>axisIdentifier</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>axisIdentifier</anchor>
            <arglist>(const QString &amp;name) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>buttonIdentifier</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>buttonIdentifier</anchor>
            <arglist>(const QString &amp;name) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>sensitivity</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>sensitivity-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>updateAxesContinuously</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>updateAxesContinuously-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSensitivity</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>sensitivity-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUpdateAxesContinuously</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>updateAxesContinuously-prop</anchor>
            <arglist>(bool updateAxesContinuously)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sensitivityChanged</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>sensitivity-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateAxesContinuouslyChanged</name>
            <anchorfile>qt3dinput-qmousedevice.html</anchorfile>
            <anchor>updateAxesContinuously-prop</anchor>
            <arglist>(bool updateAxesContinuously)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QMouseEvent</name>
        <filename>qt3dinput-qmouseevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>x</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>y</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>wasHeld</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>wasHeld-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DInput::QMouseEvent::Buttons">
            <name>button</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>button-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>buttons</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DInput::QMouseEvent::Modifiers">
            <name>modifiers</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Buttons</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LeftButton</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightButton</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MiddleButton</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BackButton</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoButton</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Modifiers</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoModifier</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShiftModifier</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ControlModifier</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AltModifier</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MetaModifier</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeypadModifier</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseEvent</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>QMouseEvent</anchor>
            <arglist>(const ::QMouseEvent &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wasHeld</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>wasHeld-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QMouseEvent::Buttons</type>
            <name>button</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>button</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>buttons</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QMouseEvent::Modifiers</type>
            <name>modifiers</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>isAccepted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>setAccepted</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QMouseEventPtr</name>
            <anchorfile>qt3dinput-qmouseevent.html</anchorfile>
            <anchor>QMouseEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QMouseHandler</name>
        <filename>qt3dinput-qmousehandler.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DInput::QMouseDevice*">
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>containsMouse</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseHandler</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>QMouseHandler</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QMouseDevice *</type>
            <name>sourceDevice</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsMouse</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceDevice</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>setSourceDevice</anchor>
            <arglist>(Qt3DInput::QMouseDevice *mouseDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceDeviceChanged</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>sourceDevice-prop</anchor>
            <arglist>(Qt3DInput::QMouseDevice *mouseDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>containsMouseChanged</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist>(bool containsMouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clicked</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>clicked</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doubleClicked</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>doubleClicked</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entered</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>entered</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exited</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>exited</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>released</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>released</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressAndHold</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>pressAndHold</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>positionChanged</anchor>
            <arglist>(Qt3DInput::QMouseEvent *mouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>wheel</name>
            <anchorfile>qt3dinput-qmousehandler.html</anchorfile>
            <anchor>wheel</anchor>
            <arglist>(Qt3DInput::QWheelEvent *wheel)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QPhysicalDeviceCreatedChangeBase</name>
        <filename>qt3dinput-qphysicaldevicecreatedchangebase.html</filename>
        <base>QNodeCreatedChangeBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeIdVector</type>
            <name>axisSettingIds</name>
            <anchorfile>qt3dinput-qphysicaldevicecreatedchangebase.html</anchorfile>
            <anchor>axisSettingIds</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DInput::QWheelEvent</name>
        <filename>qt3dinput-qwheelevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>x</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>y</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPoint">
            <name>angleDelta</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>angleDelta-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>buttons</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DInput::QWheelEvent::Modifiers">
            <name>modifiers</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Buttons</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LeftButton</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightButton</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MiddleButton</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BackButton</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoButton</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Modifiers</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoModifier</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShiftModifier</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ControlModifier</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AltModifier</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MetaModifier</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeypadModifier</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>QWheelEvent</anchor>
            <arglist>(const ::QWheelEvent &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>angleDelta</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>angleDelta</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>buttons</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DInput::QWheelEvent::Modifiers</type>
            <name>modifiers</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>isAccepted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>setAccepted</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QWheelEventPtr</name>
            <anchorfile>qt3dinput-qwheelevent.html</anchorfile>
            <anchor>QWheelEventPtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DLogic</name>
        <filename>qt3dlogic.html</filename>
        <namespace>Qt3DLogic::Logic</namespace>
        <class>Qt3DLogic::QFrameAction</class>
        <class>Qt3DLogic::QLogicAspect</class>
    </compound>
    <compound kind="namespace">
        <name>Qt3DLogic::Logic</name>
        <filename>qt3dlogic-logic.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DLogic::QFrameAction</name>
        <filename>qt3dlogic-qframeaction.html</filename>
        <base>QComponent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrameAction</name>
            <anchorfile>qt3dlogic-qframeaction.html</anchorfile>
            <anchor>QFrameAction</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>triggered</name>
            <anchorfile>qt3dlogic-qframeaction.html</anchorfile>
            <anchor>triggered</anchor>
            <arglist>(float dt)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DLogic::QLogicAspect</name>
        <filename>qt3dlogic-qlogicaspect.html</filename>
        <base>QAbstractAspect</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLogicAspect</name>
            <anchorfile>qt3dlogic-qlogicaspect.html</anchorfile>
            <anchor>QLogicAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DRender</name>
        <filename>qt3drender.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qintptr</type>
            <name>functorTypeId</name>
            <anchorfile>qt3drender.html</anchorfile>
            <anchor>functorTypeId</anchor>
            <arglist>()</arglist>
        </member>
        <class>Qt3DRender::QAbstractFunctor</class>
        <class>Qt3DRender::QAbstractLight</class>
        <class>Qt3DRender::QRayCasterHit</class>
        <class>Qt3DRender::QAbstractRayCaster</class>
        <class>Qt3DRender::QTextureImageData</class>
        <member kind="typedef" type="">
            <name>QTextureImageDataPtr</name>
            <anchorfile>qt3drender-qtextureimagedatagenerator.html</anchorfile>
            <anchor>QTextureImageDataPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QAbstractTexture</class>
        <class>Qt3DRender::QTextureImageDataGenerator</class>
        <class>Qt3DRender::QAbstractTextureImage</class>
        <class>Qt3DRender::QRenderState</class>
        <class>Qt3DRender::QAlphaCoverage</class>
        <class>Qt3DRender::QAlphaTest</class>
        <member kind="typedef" type="">
            <name>QBufferPtr</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>QBufferPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QAttribute</class>
        <class>Qt3DRender::QBlendEquation</class>
        <class>Qt3DRender::QBlendEquationArguments</class>
        <class>Qt3DRender::QFrameGraphNode</class>
        <class>Qt3DRender::QRenderTargetOutput</class>
        <class>Qt3DRender::QBlitFramebuffer</class>
        <member kind="typedef" type="">
            <name>QBufferDataGeneratorPtr</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>QBufferDataGeneratorPtr-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QBuffer</class>
        <class>Qt3DRender::QBufferCapture</class>
        <class>Qt3DRender::QBufferDataGenerator</class>
        <class>Qt3DRender::QCameraLens</class>
        <class>Qt3DRender::QCamera</class>
        <class>Qt3DRender::QCameraSelector</class>
        <class>Qt3DRender::QClearBuffers</class>
        <class>Qt3DRender::QClipPlane</class>
        <class>Qt3DRender::QColorMask</class>
        <class>Qt3DRender::QComputeCommand</class>
        <class>Qt3DRender::QCullFace</class>
        <class>Qt3DRender::QDepthRange</class>
        <class>Qt3DRender::QDepthTest</class>
        <class>Qt3DRender::QDirectionalLight</class>
        <class>Qt3DRender::QDispatchCompute</class>
        <class>Qt3DRender::QDithering</class>
        <class>Qt3DRender::QEffect</class>
        <class>Qt3DRender::QEnvironmentLight</class>
        <class>Qt3DRender::QFilterKey</class>
        <class>Qt3DRender::QFrameGraphNodeCreatedChangeBase</class>
        <class>Qt3DRender::QFrontFace</class>
        <class>Qt3DRender::QFrustumCulling</class>
        <class>Qt3DRender::QGeometry</class>
        <class>Qt3DRender::QGeometryRenderer</class>
        <class>Qt3DRender::QGraphicsApiFilter</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const Qt3DRender::QGraphicsApiFilter &amp;reference, const Qt3DRender::QGraphicsApiFilter &amp;sample)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const Qt3DRender::QGraphicsApiFilter &amp;reference, const Qt3DRender::QGraphicsApiFilter &amp;sample)</arglist>
        </member>
        <class>Qt3DRender::QLayer</class>
        <class>Qt3DRender::QLayerFilter</class>
        <class>Qt3DRender::QLevelOfDetailBoundingSphere</class>
        <class>Qt3DRender::QLevelOfDetail</class>
        <class>Qt3DRender::QLevelOfDetailSwitch</class>
        <class>Qt3DRender::QLineWidth</class>
        <class>Qt3DRender::QMaterial</class>
        <class>Qt3DRender::QMemoryBarrier</class>
        <class>Qt3DRender::QMesh</class>
        <class>Qt3DRender::QMultiSampleAntiAliasing</class>
        <class>Qt3DRender::QNoDepthMask</class>
        <class>Qt3DRender::QNoDraw</class>
        <class>Qt3DRender::QNoPicking</class>
        <class>Qt3DRender::QObjectPicker</class>
        <class>Qt3DRender::QPaintedTextureImage</class>
        <class>Qt3DRender::QParameter</class>
        <class>Qt3DRender::QPickEvent</class>
        <class>Qt3DRender::QPickingSettings</class>
        <class>Qt3DRender::QPickLineEvent</class>
        <class>Qt3DRender::QPickPointEvent</class>
        <class>Qt3DRender::QPickTriangleEvent</class>
        <class>Qt3DRender::QPointLight</class>
        <class>Qt3DRender::QPointSize</class>
        <class>Qt3DRender::QPolygonOffset</class>
        <class>Qt3DRender::QProximityFilter</class>
        <class>Qt3DRender::QRasterMode</class>
        <class>Qt3DRender::QRayCaster</class>
        <namespace>Qt3DRender::Render</namespace>
        <class>Qt3DRender::QRenderAspect</class>
        <class>Qt3DRender::QRenderCapabilities</class>
        <class>Qt3DRender::QRenderCaptureReply</class>
        <class>Qt3DRender::QRenderCapture</class>
        <class>Qt3DRender::QShaderProgram</class>
        <member kind="typedef" type="">
            <name>ParameterList</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>ParameterList-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>Qt3DRender::QRenderPass</class>
        <class>Qt3DRender::QRenderPassFilter</class>
        <class>Qt3DRender::QRenderSettings</class>
        <class>Qt3DRender::QRenderStateSet</class>
        <class>Qt3DRender::QRenderSurfaceSelector</class>
        <class>Qt3DRender::QRenderTarget</class>
        <class>Qt3DRender::QRenderTargetSelector</class>
        <class>Qt3DRender::QSceneLoader</class>
        <class>Qt3DRender::QScissorTest</class>
        <class>Qt3DRender::QScreenRayCaster</class>
        <class>Qt3DRender::QSeamlessCubemap</class>
        <class>Qt3DRender::QSetFence</class>
        <class>Qt3DRender::QShaderData</class>
        <class>Qt3DRender::QShaderImage</class>
        <class>Qt3DRender::QShaderProgramBuilder</class>
        <class>Qt3DRender::QSortPolicy</class>
        <class>Qt3DRender::QSpotLight</class>
        <class>Qt3DRender::QStencilMask</class>
        <class>Qt3DRender::QStencilOperation</class>
        <class>Qt3DRender::QStencilOperationArguments</class>
        <class>Qt3DRender::QStencilTest</class>
        <class>Qt3DRender::QStencilTestArguments</class>
        <class>Qt3DRender::QSubtreeEnabler</class>
        <class>Qt3DRender::QTechnique</class>
        <class>Qt3DRender::QTechniqueFilter</class>
        <class>Qt3DRender::QTextureWrapMode</class>
        <class>Qt3DRender::QTextureImage</class>
        <class>Qt3DRender::QTexture1D</class>
        <class>Qt3DRender::QTexture1DArray</class>
        <class>Qt3DRender::QTexture2D</class>
        <class>Qt3DRender::QTexture2DArray</class>
        <class>Qt3DRender::QTexture3D</class>
        <class>Qt3DRender::QTextureCubeMap</class>
        <class>Qt3DRender::QTextureCubeMapArray</class>
        <class>Qt3DRender::QTexture2DMultisample</class>
        <class>Qt3DRender::QTexture2DMultisampleArray</class>
        <class>Qt3DRender::QTextureRectangle</class>
        <class>Qt3DRender::QTextureBuffer</class>
        <class>Qt3DRender::QTextureLoader</class>
        <class>Qt3DRender::QSharedGLTexture</class>
        <class>Qt3DRender::QTextureData</class>
        <class>Qt3DRender::QTextureDataUpdate</class>
        <class>Qt3DRender::QTextureGenerator</class>
        <class>Qt3DRender::QViewport</class>
        <class>Qt3DRender::QWaitFence</class>
        <namespace>Qt3DRender::Quick</namespace>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractFunctor</name>
        <filename>qt3drender-qabstractfunctor.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractFunctor</name>
            <anchorfile>qt3drender-qabstractfunctor.html</anchorfile>
            <anchor>dtor.QAbstractFunctor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual qintptr</type>
            <name>id</name>
            <anchorfile>qt3drender-qabstractfunctor.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>functor_cast</name>
            <anchorfile>qt3drender-qabstractfunctor.html</anchorfile>
            <anchor>functor_cast</anchor>
            <arglist>(const Qt3DRender::QAbstractFunctor *other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT3D_FUNCTOR</name>
            <anchorfile>qt3drender-qabstractfunctor.html</anchorfile>
            <anchor>QT3D_FUNCTOR</anchor>
            <arglist>( Class)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractLight</name>
        <filename>qt3drender-qabstractlight.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Type">
            <name>type</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>color</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>intensity</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PointLight</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirectionalLight</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SpotLight</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractLight::Type</type>
            <name>type</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>intensity</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIntensity</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist>(float intensity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>colorChanged</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>color-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>intensityChanged</name>
            <anchorfile>qt3drender-qabstractlight.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist>(float intensity)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractRayCaster</name>
        <filename>qt3drender-qabstractraycaster.html</filename>
        <base>QComponent</base>
        <member kind="property" type="RunMode">
            <name>runMode</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>runMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="FilterMode">
            <name>filterMode</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>filterMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Hits">
            <name>hits</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>hits-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RunMode</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>RunMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Continuous</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>RunMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SingleShot</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>RunMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FilterMode</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>FilterMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AcceptAnyMatchingLayers</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>FilterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AcceptAllMatchingLayers</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>FilterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DiscardAnyMatchingLayers</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>FilterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DiscardAllMatchingLayers</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>FilterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractRayCaster::RunMode</type>
            <name>runMode</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>runMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractRayCaster::FilterMode</type>
            <name>filterMode</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>filterMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractRayCaster::Hits</type>
            <name>hits</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>hits-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addLayer</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>addLayer</anchor>
            <arglist>(Qt3DRender::QLayer *layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLayer</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>removeLayer</anchor>
            <arglist>(Qt3DRender::QLayer *layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QLayer *&gt;</type>
            <name>layers</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>layers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRunMode</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>runMode-prop</anchor>
            <arglist>(Qt3DRender::QAbstractRayCaster::RunMode runMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterMode</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>filterMode-prop</anchor>
            <arglist>(Qt3DRender::QAbstractRayCaster::FilterMode filterMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>runModeChanged</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>runMode-prop</anchor>
            <arglist>(Qt3DRender::QAbstractRayCaster::RunMode runMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hitsChanged</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>hits-prop</anchor>
            <arglist>(const Qt3DRender::QAbstractRayCaster::Hits &amp;hits)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>filterModeChanged</name>
            <anchorfile>qt3drender-qabstractraycaster.html</anchorfile>
            <anchor>filterMode-prop</anchor>
            <arglist>(Qt3DRender::QAbstractRayCaster::FilterMode filterMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractTexture</name>
        <filename>qt3drender-qabstracttexture.html</filename>
        <base>QNode</base>
        <member kind="property" type="Target">
            <name>target</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="TextureFormat">
            <name>format</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>generateMipMaps</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>generateMipMaps-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QTextureWrapMode*">
            <name>wrapMode</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>wrapMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>width</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>height</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>depth</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Filter">
            <name>magnificationFilter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>magnificationFilter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Filter">
            <name>minificationFilter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>minificationFilter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>maximumAnisotropy</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>maximumAnisotropy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ComparisonFunction">
            <name>comparisonFunction</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>comparisonFunction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ComparisonMode">
            <name>comparisonMode</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>comparisonMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>layers</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>layers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>samples</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>samples-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="HandleType">
            <name>handleType</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>handleType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>handle</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>handle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>None</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Loading</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ready</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Target</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TargetAutomatic</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target1D</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target1DArray</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target2D</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target2DArray</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target3D</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetCubeMap</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetCubeMapArray</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target2DMultisample</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target2DMultisampleArray</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetRectangle</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetBuffer</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TextureFormat</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoFormat</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Automatic</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8_SNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8_SNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_SNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8_SNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16_SNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16_SNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16_SNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16_SNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R32U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG32U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB32U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA32U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8I</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8I</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8I</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8I</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16I</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16I</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16I</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16I</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R32I</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG32I</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB32I</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA32I</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16F</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16F</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16F</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16F</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R32F</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG32F</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB32F</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA32F</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB9E5</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG11B10F</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG3B2</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R5G6B5</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB5A1</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA4</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB10A2</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB10A2U</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D16</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D24</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D24S8</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D32</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D32F</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D32FS8X24</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_DXT1</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_DXT1</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_DXT3</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_DXT5</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R_ATI1N_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R_ATI1N_SNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG_ATI2N_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG_ATI2N_SNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_BP_UNSIGNED_FLOAT</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_BP_SIGNED_FLOAT</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_BP_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R11_EAC_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R11_EAC_SNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG11_EAC_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG11_EAC_SNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_ETC2</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_ETC2</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_PunchThrough_Alpha1_ETC2</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_PunchThrough_Alpha1_ETC2</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8_ETC2_EAC</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ETC2_EAC</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_ETC1</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_DXT1</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_Alpha_DXT1</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_Alpha_DXT3</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_Alpha_DXT5</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_BP_UNorm</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DepthFormat</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlphaFormat</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBFormat</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBAFormat</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LuminanceFormat</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LuminanceAlphaFormat</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Filter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Nearest</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Linear</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NearestMipMapNearest</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NearestMipMapLinear</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinearMipMapNearest</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinearMipMapLinear</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CubeMapFace</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CubeMapPositiveX</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapNegativeX</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapPositiveY</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapNegativeY</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapPositiveZ</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapNegativeZ</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllFaces</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture::Target</type>
            <name>target</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture::TextureFormat</type>
            <name>format</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>generateMipMaps</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>generateMipMaps-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture::Status</type>
            <name>status</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addTextureImage</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>addTextureImage</anchor>
            <arglist>(Qt3DRender::QAbstractTextureImage *textureImage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeTextureImage</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>removeTextureImage</anchor>
            <arglist>(Qt3DRender::QAbstractTextureImage *textureImage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QAbstractTextureImage *&gt;</type>
            <name>textureImages</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>textureImages</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapMode</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setWrapMode</anchor>
            <arglist>(const Qt3DRender::QTextureWrapMode &amp;wrapMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QTextureWrapMode *</type>
            <name>wrapMode</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>wrapMode-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(int w, int h, int d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture::Filter</type>
            <name>minificationFilter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>minificationFilter-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture::Filter</type>
            <name>magnificationFilter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>magnificationFilter-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>maximumAnisotropy</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>maximumAnisotropy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture::ComparisonFunction</type>
            <name>comparisonFunction</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>comparisonFunction</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture::ComparisonMode</type>
            <name>comparisonMode</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>comparisonMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layers</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>layers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>samples</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>samples</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QTextureGeneratorPtr</type>
            <name>dataGenerator</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>dataGenerator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture::HandleType</type>
            <name>handleType</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>handleType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>handle</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateData</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>updateData</anchor>
            <arglist>(const Qt3DRender::QTextureDataUpdate &amp;update)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::TextureFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGenerateMipMaps</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setGenerateMipMaps</anchor>
            <arglist>(bool gen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepth</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setDepth</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinificationFilter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setMinificationFilter</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::Filter f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMagnificationFilter</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setMagnificationFilter</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::Filter f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumAnisotropy</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setMaximumAnisotropy</anchor>
            <arglist>(float anisotropy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonFunction</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setComparisonFunction</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::ComparisonFunction function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonMode</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setComparisonMode</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::ComparisonMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayers</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setLayers</anchor>
            <arglist>(int layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSamples</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setSamples</anchor>
            <arglist>(int samples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>formatChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::TextureFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateMipMapsChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>generateMipMaps-prop</anchor>
            <arglist>(bool generateMipMaps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>magnificationFilterChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>magnificationFilter-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::Filter magnificationFilter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minificationFilterChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>minificationFilter-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::Filter minificationFilter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>maximumAnisotropyChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>maximumAnisotropy-prop</anchor>
            <arglist>(float maximumAnisotropy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>comparisonFunctionChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>comparisonFunction-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::ComparisonFunction comparisonFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>comparisonModeChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>comparisonMode-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::ComparisonMode comparisonMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layersChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>layers-prop</anchor>
            <arglist>(int layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>samplesChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>samples-prop</anchor>
            <arglist>(int samples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>handleTypeChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>handleType-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::HandleType handleType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>handleChanged</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>handle-prop</anchor>
            <arglist>(QVariant handle)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTexture</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>QAbstractTexture</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTexture</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>QAbstractTexture-1</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::Target target, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qt3drender-qabstracttexture.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(Qt3DRender::QAbstractTexture::Status status)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAbstractTextureImage</name>
        <filename>qt3drender-qabstracttextureimage.html</filename>
        <base>QNode</base>
        <member kind="property" type="int">
            <name>mipLevel</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>layer</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture::CubeMapFace">
            <name>face</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTextureImage</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>QAbstractTextureImage</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipLevel</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layer</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::CubeMapFace</type>
            <name>face</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipLevel</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>setMipLevel</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayer</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>setLayer</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFace</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>setFace</anchor>
            <arglist>(QAbstractTexture::CubeMapFace face)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mipLevelChanged</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>(int mipLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layerChanged</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceChanged</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>(QAbstractTexture::CubeMapFace face)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>notifyDataGeneratorChanged</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>notifyDataGeneratorChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual Qt3DRender::QTextureImageDataGeneratorPtr</type>
            <name>dataGenerator</name>
            <anchorfile>qt3drender-qabstracttextureimage.html</anchorfile>
            <anchor>dataGenerator</anchor>
            <arglist>() const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAlphaCoverage</name>
        <filename>qt3drender-qalphacoverage.html</filename>
        <base>QRenderState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAlphaCoverage</name>
            <anchorfile>qt3drender-qalphacoverage.html</anchorfile>
            <anchor>QAlphaCoverage</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAlphaTest</name>
        <filename>qt3drender-qalphatest.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="AlphaFunction">
            <name>alphaFunction</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>alphaFunction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>referenceValue</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AlphaFunction</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>AlphaFunction-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Never</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Always</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Less</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LessOrEqual</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Equal</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GreaterOrEqual</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Greater</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotEqual</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>AlphaFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAlphaTest::AlphaFunction</type>
            <name>alphaFunction</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>alphaFunction-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>referenceValue</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaFunction</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>alphaFunction-prop</anchor>
            <arglist>(Qt3DRender::QAlphaTest::AlphaFunction alphaFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReferenceValue</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist>(float referenceValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaFunctionChanged</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>alphaFunction-prop</anchor>
            <arglist>(Qt3DRender::QAlphaTest::AlphaFunction alphaFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>referenceValueChanged</name>
            <anchorfile>qt3drender-qalphatest.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist>(float referenceValue)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QAttribute</name>
        <filename>qt3drender-qattribute.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QBuffer*">
            <name>buffer</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="VertexBaseType">
            <name>vertexBaseType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexBaseType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>vertexSize</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>count</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>byteStride</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>byteOffset</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>divisor</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="AttributeType">
            <name>attributeType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AttributeType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>VertexAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IndexAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DrawIndirectAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>VertexBaseType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>VertexBaseType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Byte</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsignedByte</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Short</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsignedShort</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Int</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsignedInt</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HalfFloat</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Double</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>VertexBaseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>QAttribute</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>QAttribute-1</anchor>
            <arglist>(Qt3DRender::QBuffer *buf, Qt3DRender::QAttribute::VertexBaseType type, uint dataSize, uint count, uint offset, uint stride, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAttribute</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>QAttribute-2</anchor>
            <arglist>(Qt3DRender::QBuffer *buf, const QString &amp;name, Qt3DRender::QAttribute::VertexBaseType type, uint dataSize, uint count, uint offset, uint stride, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBuffer *</type>
            <name>buffer</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute::VertexBaseType</type>
            <name>vertexBaseType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexBaseType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertexSize</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>count</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>byteStride</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>byteOffset</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>divisor</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute::AttributeType</type>
            <name>attributeType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultPositionAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultPositionAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultNormalAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultNormalAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultColorAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultColorAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultTextureCoordinateAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultTextureCoordinateAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultTangentAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultTangentAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultJointIndicesAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultJointIndicesAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultJointWeightsAttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultJointWeightsAttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultTextureCoordinate1AttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultTextureCoordinate1AttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>defaultTextureCoordinate2AttributeName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>defaultTextureCoordinate2AttributeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBuffer</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist>(Qt3DRender::QBuffer *buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexBaseType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexBaseType-prop</anchor>
            <arglist>(Qt3DRender::QAttribute::VertexBaseType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexSize</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexSize-prop</anchor>
            <arglist>(uint size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCount</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>(uint count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setByteStride</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist>(uint byteStride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setByteOffset</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist>(uint byteOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDivisor</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist>(uint divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeType</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist>(Qt3DRender::QAttribute::AttributeType attributeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bufferChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>buffer-prop</anchor>
            <arglist>(Qt3DRender::QBuffer *buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vertexBaseTypeChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexBaseType-prop</anchor>
            <arglist>(Qt3DRender::QAttribute::VertexBaseType vertexBaseType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vertexSizeChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>vertexSize-prop</anchor>
            <arglist>(uint vertexSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataTypeChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>dataTypeChanged</anchor>
            <arglist>(Qt3DRender::QAttribute::VertexBaseType vertexBaseType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataSizeChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>dataSizeChanged</anchor>
            <arglist>(uint vertexSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>countChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>(uint count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>byteStrideChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteStride-prop</anchor>
            <arglist>(uint byteStride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>byteOffsetChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>byteOffset-prop</anchor>
            <arglist>(uint byteOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>divisorChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>divisor-prop</anchor>
            <arglist>(uint divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>attributeTypeChanged</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>attributeType-prop</anchor>
            <arglist>(Qt3DRender::QAttribute::AttributeType attributeType)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QBufferPtr</name>
            <anchorfile>qt3drender-qattribute.html</anchorfile>
            <anchor>QBufferPtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBlendEquation</name>
        <filename>qt3drender-qblendequation.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="BlendFunction">
            <name>blendFunction</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>blendFunction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>BlendFunction</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>BlendFunction-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Add</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>BlendFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Subtract</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>BlendFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReverseSubtract</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>BlendFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Min</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>BlendFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Max</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>BlendFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBlendEquation</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>QBlendEquation</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquation::BlendFunction</type>
            <name>blendFunction</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>blendFunction-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlendFunction</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>blendFunction-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquation::BlendFunction blendFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blendFunctionChanged</name>
            <anchorfile>qt3drender-qblendequation.html</anchorfile>
            <anchor>blendFunction-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquation::BlendFunction blendFunction)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBlendEquationArguments</name>
        <filename>qt3drender-qblendequationarguments.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="Blending">
            <name>sourceRgb</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceRgb-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Blending">
            <name>sourceAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceAlpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Blending">
            <name>destinationRgb</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationRgb-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Blending">
            <name>destinationAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationAlpha-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>bufferIndex</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>bufferIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Blending</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Zero</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>One</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SourceColor</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SourceAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Source1Alpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Source1Color</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DestinationColor</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DestinationAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SourceAlphaSaturate</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConstantColor</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConstantAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusSourceColor</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusSourceAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusDestinationAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusDestinationColor</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusConstantColor</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusConstantAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusSource1Alpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusSource1Color</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneMinusSource1Color0</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>Blending-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBlendEquationArguments</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>QBlendEquationArguments</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquationArguments::Blending</type>
            <name>sourceRgb</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceRgb-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquationArguments::Blending</type>
            <name>destinationRgb</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationRgb-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquationArguments::Blending</type>
            <name>sourceAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceAlpha-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlendEquationArguments::Blending</type>
            <name>destinationAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationAlpha-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bufferIndex</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>bufferIndex-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceRgb</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceRgb-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceRgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationRgb</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationRgb-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationRgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceAlpha-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationAlpha</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationAlpha-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceRgba</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>setSourceRgba</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceRgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationRgba</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>setDestinationRgba</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationRgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBufferIndex</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>bufferIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceRgbChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceRgb-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceRgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceAlphaChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceAlpha-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationRgbChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationRgb-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationRgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationAlphaChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationAlpha-prop</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceRgbaChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>sourceRgbaChanged</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending sourceRgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationRgbaChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>destinationRgbaChanged</anchor>
            <arglist>(Qt3DRender::QBlendEquationArguments::Blending destinationRgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bufferIndexChanged</name>
            <anchorfile>qt3drender-qblendequationarguments.html</anchorfile>
            <anchor>bufferIndex-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBlitFramebuffer</name>
        <filename>qt3drender-qblitframebuffer.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="Qt3DRender::QRenderTarget*">
            <name>source</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QRenderTarget*">
            <name>destination</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>destination-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>sourceRect</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>sourceRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>destinationRect</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>destinationRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QRenderTargetOutput::AttachmentPoint">
            <name>sourceAttachmentPoint</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>sourceAttachmentPoint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QRenderTargetOutput::AttachmentPoint">
            <name>destinationAttachmentPoint</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>destinationAttachmentPoint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>InterpolationMethod</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>InterpolationMethod-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Nearest</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>InterpolationMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Linear</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>InterpolationMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBlitFramebuffer</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>QBlitFramebuffer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBlitFramebuffer</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>dtor.QBlitFramebuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderTarget *</type>
            <name>source</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderTarget *</type>
            <name>destination</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>destination</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>sourceRect</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>sourceRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>destinationRect</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>destinationRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderTargetOutput::AttachmentPoint</type>
            <name>sourceAttachmentPoint</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>sourceAttachmentPoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderTargetOutput::AttachmentPoint</type>
            <name>destinationAttachmentPoint</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>destinationAttachmentPoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBlitFramebuffer::InterpolationMethod</type>
            <name>interpolationMethod</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>interpolationMethod</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(Qt3DRender::QRenderTarget *source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestination</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>setDestination</anchor>
            <arglist>(Qt3DRender::QRenderTarget *destination)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceRect</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>setSourceRect</anchor>
            <arglist>(const QRectF &amp;inputRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationRect</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>setDestinationRect</anchor>
            <arglist>(const QRectF &amp;outputRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceAttachmentPoint</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>setSourceAttachmentPoint</anchor>
            <arglist>(Qt3DRender::QRenderTargetOutput::AttachmentPoint sourceAttachmentPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationAttachmentPoint</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>setDestinationAttachmentPoint</anchor>
            <arglist>(Qt3DRender::QRenderTargetOutput::AttachmentPoint destinationAttachmentPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInterpolationMethod</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>setInterpolationMethod</anchor>
            <arglist>(Qt3DRender::QBlitFramebuffer::InterpolationMethod interpolationMethod)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationChanged</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>destination-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceRectChanged</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>sourceRect-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationRectChanged</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>destinationRect-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceAttachmentPointChanged</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>sourceAttachmentPoint-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destinationAttachmentPointChanged</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>destinationAttachmentPoint-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>interpolationMethodChanged</name>
            <anchorfile>qt3drender-qblitframebuffer.html</anchorfile>
            <anchor>interpolationMethod-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBuffer</name>
        <filename>qt3drender-qbuffer.html</filename>
        <base>QNode</base>
        <member kind="property" type="BufferType">
            <name>type</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="UsageType">
            <name>usage</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>usage-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>syncData</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>syncData-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="AccessType">
            <name>accessType</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>accessType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>BufferType</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>BufferType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>VertexBuffer</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IndexBuffer</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PixelPackBuffer</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PixelUnpackBuffer</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UniformBuffer</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShaderStorageBuffer</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DrawIndirectBuffer</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>UsageType</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>UsageType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StreamDraw</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StreamRead</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StreamCopy</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticDraw</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticRead</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticCopy</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicDraw</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicRead</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicCopy</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>UsageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AccessType</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>AccessType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Write</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>AccessType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Read</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>AccessType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadWrite</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>AccessType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBuffer</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>QBuffer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBuffer</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>QBuffer-1</anchor>
            <arglist>(Qt3DRender::QBuffer::BufferType ty, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBuffer::UsageType</type>
            <name>usage</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>usage-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBuffer::BufferType</type>
            <name>type</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSyncData</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>syncData-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBuffer::AccessType</type>
            <name>accessType</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>accessType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataGenerator</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>setDataGenerator</anchor>
            <arglist>(const Qt3DRender::QBufferDataGeneratorPtr &amp;functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QBufferDataGeneratorPtr</type>
            <name>dataGenerator</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>dataGenerator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateData</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>updateData</anchor>
            <arglist>(int offset, const QByteArray &amp;bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(Qt3DRender::QBuffer::BufferType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUsage</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>usage-prop</anchor>
            <arglist>(Qt3DRender::QBuffer::UsageType usage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSyncData</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>syncData-prop</anchor>
            <arglist>(bool syncData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccessType</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>accessType-prop</anchor>
            <arglist>(Qt3DRender::QBuffer::AccessType access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>(const QByteArray &amp;bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>typeChanged</name>
            <anchorfile>qt3drender-qbuffer-obsolete.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(Qt3DRender::QBuffer::BufferType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>usageChanged</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>usage-prop</anchor>
            <arglist>(Qt3DRender::QBuffer::UsageType usage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>syncDataChanged</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>syncData-prop</anchor>
            <arglist>(bool syncData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accessTypeChanged</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>accessType-prop</anchor>
            <arglist>(Qt3DRender::QBuffer::AccessType access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataAvailable</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>dataAvailable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QBufferDataGeneratorPtr</name>
            <anchorfile>qt3drender-qbuffer.html</anchorfile>
            <anchor>QBufferDataGeneratorPtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBufferCapture</name>
        <filename>qt3drender-qbuffercapture.html</filename>
        <base>QFrameGraphNode</base>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QBufferDataGenerator</name>
        <filename>qt3drender-qbufferdatagenerator.html</filename>
        <base>QAbstractFunctor</base>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QByteArray</type>
            <name>operator()</name>
            <anchorfile>qt3drender-qbufferdatagenerator.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qbufferdatagenerator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const Qt3DRender::QBufferDataGenerator &amp;other) const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCamera</name>
        <filename>qt3drender-qcamera.html</filename>
        <base>QEntity</base>
        <member kind="property" type="Qt3DRender::QCameraLens::ProjectionType">
            <name>projectionType</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>nearPlane</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>farPlane</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>fieldOfView</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>aspectRatio</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>left</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>right</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>bottom</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>top</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>projectionMatrix</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>exposure</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>exposure-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>position</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>upVector</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>viewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>viewVector</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewVector-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>viewMatrix</name>
            <anchorfile>qt3drender-qcamera-obsolete.html</anchorfile>
            <anchor>viewMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QCameraLens*">
            <name>lens</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>lens-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DCore::QTransform*">
            <name>transform</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>transform-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCamera</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>QCamera</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enumeration">
            <name>CameraTranslationOption</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>CameraTranslationOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TranslateViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>CameraTranslationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DontTranslateViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>CameraTranslationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QCameraLens *</type>
            <name>lens</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>lens</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QTransform *</type>
            <name>transform</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>tiltRotation</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>tiltRotation</anchor>
            <arglist>(float angle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>panRotation</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>panRotation</anchor>
            <arglist>(float angle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>rollRotation</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>rollRotation</anchor>
            <arglist>(float angle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>rotation</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>rotation</anchor>
            <arglist>(float angle, const QVector3D &amp;axis) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QVector3D &amp;vLocal, Qt3DRender::QCamera::CameraTranslationOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translateWorld</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>translateWorld</anchor>
            <arglist>(const QVector3D &amp;vWorld, Qt3DRender::QCamera::CameraTranslationOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tilt</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>tilt</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pan</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>pan</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pan</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>pan-1</anchor>
            <arglist>(float angle, const QVector3D &amp;axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>roll</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>roll</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tiltAboutViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>tiltAboutViewCenter</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>panAboutViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>panAboutViewCenter</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>panAboutViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>panAboutViewCenter-1</anchor>
            <arglist>(float angle, const QVector3D &amp;axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rollAboutViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>rollAboutViewCenter</anchor>
            <arglist>(float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(const QQuaternion &amp;q)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotateAboutViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>rotateAboutViewCenter</anchor>
            <arglist>(const QQuaternion &amp;q)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCameraLens::ProjectionType</type>
            <name>projectionType</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>nearPlane</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>farPlane</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>fieldOfView</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>aspectRatio</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>left</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>right</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>bottom</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>top</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>exposure</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>exposure-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>position</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>upVector</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>viewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>viewVector</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewVector-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>viewMatrix</name>
            <anchorfile>qt3drender-qcamera-obsolete.html</anchorfile>
            <anchor>viewMatrix-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionType</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setProjectionType</anchor>
            <arglist>(QCameraLens::ProjectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNearPlane</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setNearPlane</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFarPlane</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setFarPlane</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldOfView</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setFieldOfView</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAspectRatio</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setAspectRatio</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionMatrix</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setProjectionMatrix</anchor>
            <arglist>(const QMatrix4x4 &amp;projectionMatrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExposure</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setExposure</anchor>
            <arglist>(float exposure)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(const QVector3D &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUpVector</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setUpVector</anchor>
            <arglist>(const QVector3D &amp;upVector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewCenter</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>setViewCenter</anchor>
            <arglist>(const QVector3D &amp;viewCenter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewAll</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewSphere</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewSphere</anchor>
            <arglist>(const QVector3D &amp;center, float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewEntity</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewEntity</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionTypeChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>(QCameraLens::ProjectionType projectionType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nearPlaneChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>farPlaneChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fieldOfViewChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aspectRatioChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rightChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionMatrixChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;projectionMatrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exposureChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>exposure-prop</anchor>
            <arglist>(float exposure)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(const QVector3D &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>upVectorChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>upVector-prop</anchor>
            <arglist>(const QVector3D &amp;upVector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewCenterChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewCenter-prop</anchor>
            <arglist>(const QVector3D &amp;viewCenter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewVectorChanged</name>
            <anchorfile>qt3drender-qcamera.html</anchorfile>
            <anchor>viewVector-prop</anchor>
            <arglist>(const QVector3D &amp;viewVector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewMatrixChanged</name>
            <anchorfile>qt3drender-qcamera-obsolete.html</anchorfile>
            <anchor>viewMatrix-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCameraLens</name>
        <filename>qt3drender-qcameralens.html</filename>
        <base>QComponent</base>
        <member kind="property" type="ProjectionType">
            <name>projectionType</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>nearPlane</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>farPlane</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>fieldOfView</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>aspectRatio</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>left</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>right</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>bottom</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>top</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMatrix4x4">
            <name>projectionMatrix</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>exposure</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>exposure-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCameraLens</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>QCameraLens</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enumeration">
            <name>ProjectionType</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>ProjectionType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>OrthographicProjection</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PerspectiveProjection</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrustumProjection</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomProjection</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>ProjectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QCameraLens::ProjectionType</type>
            <name>projectionType</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>nearPlane</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>farPlane</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>fieldOfView</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>aspectRatio</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>left</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>right</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>bottom</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>top</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>projectionMatrix</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrthographicProjection</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setOrthographicProjection</anchor>
            <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrustumProjection</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setFrustumProjection</anchor>
            <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPerspectiveProjection</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setPerspectiveProjection</anchor>
            <arglist>(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>exposure</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>exposure-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionType</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setProjectionType</anchor>
            <arglist>(Qt3DRender::QCameraLens::ProjectionType projectionType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNearPlane</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setNearPlane</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFarPlane</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setFarPlane</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldOfView</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setFieldOfView</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAspectRatio</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setAspectRatio</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProjectionMatrix</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setProjectionMatrix</anchor>
            <arglist>(const QMatrix4x4 &amp;projectionMatrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExposure</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>setExposure</anchor>
            <arglist>(float exposure)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionTypeChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>projectionType-prop</anchor>
            <arglist>(QCameraLens::ProjectionType projectionType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nearPlaneChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>nearPlane-prop</anchor>
            <arglist>(float nearPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>farPlaneChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>farPlane-prop</anchor>
            <arglist>(float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fieldOfViewChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>fieldOfView-prop</anchor>
            <arglist>(float fieldOfView)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aspectRatioChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>aspectRatio-prop</anchor>
            <arglist>(float aspectRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(float left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rightChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>right-prop</anchor>
            <arglist>(float right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(float bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(float top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>projectionMatrixChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>projectionMatrix-prop</anchor>
            <arglist>(const QMatrix4x4 &amp;projectionMatrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exposureChanged</name>
            <anchorfile>qt3drender-qcameralens.html</anchorfile>
            <anchor>exposure-prop</anchor>
            <arglist>(float exposure)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCameraSelector</name>
        <filename>qt3drender-qcameraselector.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="Qt3DCore::QEntity*">
            <name>camera</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCameraSelector</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>QCameraSelector</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>camera</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DCore::QEntity *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cameraChanged</name>
            <anchorfile>qt3drender-qcameraselector.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DCore::QEntity *camera)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QClearBuffers</name>
        <filename>qt3drender-qclearbuffers.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="BufferType">
            <name>buffers</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>buffers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QColor">
            <name>clearColor</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>clearDepthValue</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearDepthValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>clearStencilValue</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearStencilValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QRenderTargetOutput*">
            <name>colorBuffer</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>colorBuffer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QClearBuffers</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>QClearBuffers</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enumeration">
            <name>BufferType</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>BufferType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>None</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColorBuffer</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DepthBuffer</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StencilBuffer</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DepthStencilBuffer</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColorDepthBuffer</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColorDepthStencilBuffer</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllBuffers</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt3DRender::QClearBuffers::BufferType">
            <name>BufferTypeFlags</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>BufferType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QClearBuffers::BufferType</type>
            <name>buffers</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>buffers-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>clearColor</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>clearDepthValue</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearDepthValue-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>clearStencilValue</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearStencilValue-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderTargetOutput *</type>
            <name>colorBuffer</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>colorBuffer-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBuffers</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>buffers-prop</anchor>
            <arglist>(Qt3DRender::QClearBuffers::BufferType buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearColor</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearDepthValue</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearDepthValue-prop</anchor>
            <arglist>(float clearDepthValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClearStencilValue</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearStencilValue-prop</anchor>
            <arglist>(int clearStencilValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorBuffer</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>colorBuffer-prop</anchor>
            <arglist>(Qt3DRender::QRenderTargetOutput *buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>buffersChanged</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>buffers-prop</anchor>
            <arglist>(Qt3DRender::QClearBuffers::BufferType buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearColorChanged</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearColor-prop</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearDepthValueChanged</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearDepthValue-prop</anchor>
            <arglist>(float clearDepthValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearStencilValueChanged</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>clearStencilValue-prop</anchor>
            <arglist>(int clearStencilValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>colorBufferChanged</name>
            <anchorfile>qt3drender-qclearbuffers.html</anchorfile>
            <anchor>colorBuffer-prop</anchor>
            <arglist>(Qt3DRender::QRenderTargetOutput *buffer)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QClipPlane</name>
        <filename>qt3drender-qclipplane.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="int">
            <name>planeIndex</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>planeIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>normal</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>distance</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>distance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>planeIndex</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>planeIndex-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>normal</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distance</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>distance-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaneIndex</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>planeIndex-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormal</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(QVector3D )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistance</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>distance-prop</anchor>
            <arglist>(float )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>planeIndexChanged</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>planeIndex-prop</anchor>
            <arglist>(int planeIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalChanged</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>normal-prop</anchor>
            <arglist>(QVector3D normal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>distanceChanged</name>
            <anchorfile>qt3drender-qclipplane.html</anchorfile>
            <anchor>distance-prop</anchor>
            <arglist>(float distance)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QColorMask</name>
        <filename>qt3drender-qcolormask.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="bool">
            <name>redMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>redMasked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>greenMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>greenMasked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>blueMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>blueMasked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>alphaMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>alphaMasked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColorMask</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>QColorMask</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRedMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>redMasked-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isGreenMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>greenMasked-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBlueMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>blueMasked-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAlphaMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>alphaMasked-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRedMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>redMasked-prop</anchor>
            <arglist>(bool redMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGreenMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>greenMasked-prop</anchor>
            <arglist>(bool greenMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlueMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>blueMasked-prop</anchor>
            <arglist>(bool blueMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaMasked</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>alphaMasked-prop</anchor>
            <arglist>(bool alphaMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redMaskedChanged</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>redMasked-prop</anchor>
            <arglist>(bool redMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>greenMaskedChanged</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>greenMasked-prop</anchor>
            <arglist>(bool greenMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blueMaskedChanged</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>blueMasked-prop</anchor>
            <arglist>(bool blueMasked)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alphaMaskedChanged</name>
            <anchorfile>qt3drender-qcolormask.html</anchorfile>
            <anchor>alphaMasked-prop</anchor>
            <arglist>(bool alphaMasked)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QComputeCommand</name>
        <filename>qt3drender-qcomputecommand.html</filename>
        <base>QComponent</base>
        <member kind="property" type="int">
            <name>workGroupX</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>workGroupY</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>workGroupZ</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="RunType">
            <name>runType</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>runType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QComputeCommand</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>QComputeCommand</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupX</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupY</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupZ</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QComputeCommand::RunType</type>
            <name>runType</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>runType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupX</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>setWorkGroupX</anchor>
            <arglist>(int workGroupX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupY</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>setWorkGroupY</anchor>
            <arglist>(int workGroupY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupZ</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>setWorkGroupZ</anchor>
            <arglist>(int workGroupZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRunType</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>runType-prop</anchor>
            <arglist>(Qt3DRender::QComputeCommand::RunType runType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>trigger</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>trigger</anchor>
            <arglist>(int frameCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>trigger</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>trigger-1</anchor>
            <arglist>(int workGroupX, int workGroupY, int workGroupZ, int frameCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupXChanged</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupYChanged</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupZChanged</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>runTypeChanged</name>
            <anchorfile>qt3drender-qcomputecommand.html</anchorfile>
            <anchor>runType-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QCullFace</name>
        <filename>qt3drender-qcullface.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="CullingMode">
            <name>mode</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CullingMode</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>CullingMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoCulling</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Front</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Back</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrontAndBack</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>CullingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCullFace</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>QCullFace</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QCullFace::CullingMode</type>
            <name>mode</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMode</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>(Qt3DRender::QCullFace::CullingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modeChanged</name>
            <anchorfile>qt3drender-qcullface.html</anchorfile>
            <anchor>mode-prop</anchor>
            <arglist>(Qt3DRender::QCullFace::CullingMode mode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDepthRange</name>
        <filename>qt3drender-qdepthrange.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="double">
            <name>nearValue</name>
            <anchorfile>qt3drender-qdepthrange.html</anchorfile>
            <anchor>nearValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>farValue</name>
            <anchorfile>qt3drender-qdepthrange.html</anchorfile>
            <anchor>farValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>nearValue</name>
            <anchorfile>qt3drender-qdepthrange.html</anchorfile>
            <anchor>nearValue-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>farValue</name>
            <anchorfile>qt3drender-qdepthrange.html</anchorfile>
            <anchor>farValue-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNearValue</name>
            <anchorfile>qt3drender-qdepthrange.html</anchorfile>
            <anchor>nearValue-prop</anchor>
            <arglist>(double value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFarValue</name>
            <anchorfile>qt3drender-qdepthrange.html</anchorfile>
            <anchor>farValue-prop</anchor>
            <arglist>(double value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nearValueChanged</name>
            <anchorfile>qt3drender-qdepthrange.html</anchorfile>
            <anchor>nearValue-prop</anchor>
            <arglist>(double nearValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>farValueChanged</name>
            <anchorfile>qt3drender-qdepthrange.html</anchorfile>
            <anchor>farValue-prop</anchor>
            <arglist>(double farValue)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDepthTest</name>
        <filename>qt3drender-qdepthtest.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="DepthFunction">
            <name>depthFunction</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>depthFunction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>DepthFunction</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>DepthFunction-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Never</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Always</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Less</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LessOrEqual</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Equal</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GreaterOrEqual</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Greater</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotEqual</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>DepthFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDepthTest</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>QDepthTest</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QDepthTest::DepthFunction</type>
            <name>depthFunction</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>depthFunction-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthFunction</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>depthFunction-prop</anchor>
            <arglist>(Qt3DRender::QDepthTest::DepthFunction depthFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthFunctionChanged</name>
            <anchorfile>qt3drender-qdepthtest.html</anchorfile>
            <anchor>depthFunction-prop</anchor>
            <arglist>(Qt3DRender::QDepthTest::DepthFunction depthFunction)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDirectionalLight</name>
        <filename>qt3drender-qdirectionallight.html</filename>
        <base>QAbstractLight</base>
        <member kind="property" type="QVector3D">
            <name>worldDirection</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>worldDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirectionalLight</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>QDirectionalLight</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>worldDirection</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>worldDirection-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorldDirection</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>worldDirection-prop</anchor>
            <arglist>(const QVector3D &amp;worldDirection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>worldDirectionChanged</name>
            <anchorfile>qt3drender-qdirectionallight.html</anchorfile>
            <anchor>worldDirection-prop</anchor>
            <arglist>(const QVector3D &amp;worldDirection)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDispatchCompute</name>
        <filename>qt3drender-qdispatchcompute.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="int">
            <name>workGroupX</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>workGroupY</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>workGroupZ</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDispatchCompute</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>QDispatchCompute</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupX</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupY</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>workGroupZ</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupX</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>(int workGroupX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupY</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>(int workGroupY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkGroupZ</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>(int workGroupZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupXChanged</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupX-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupYChanged</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupY-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>workGroupZChanged</name>
            <anchorfile>qt3drender-qdispatchcompute.html</anchorfile>
            <anchor>workGroupZ-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QDithering</name>
        <filename>qt3drender-qdithering.html</filename>
        <base>QRenderState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDithering</name>
            <anchorfile>qt3drender-qdithering.html</anchorfile>
            <anchor>QDithering</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QEffect</name>
        <filename>qt3drender-qeffect.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(Qt3DRender::QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(Qt3DRender::QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addTechnique</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>addTechnique</anchor>
            <arglist>(Qt3DRender::QTechnique *t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeTechnique</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>removeTechnique</anchor>
            <arglist>(Qt3DRender::QTechnique *t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QTechnique *&gt;</type>
            <name>techniques</name>
            <anchorfile>qt3drender-qeffect.html</anchorfile>
            <anchor>techniques</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QEnvironmentLight</name>
        <filename>qt3drender-qenvironmentlight.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DRender::QAbstractTexture*">
            <name>irradiance</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>irradiance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture*">
            <name>specular</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>irradiance</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>irradiance-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>specular</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIrradiance</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>irradiance-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *irradiance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpecular</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *specular)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>irradianceChanged</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>irradiance-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *environmentIrradiance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>specularChanged</name>
            <anchorfile>qt3drender-qenvironmentlight.html</anchorfile>
            <anchor>specular-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *environmentSpecular)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFilterKey</name>
        <filename>qt3drender-qfilterkey.html</filename>
        <base>QNode</base>
        <member kind="property" type="QVariant">
            <name>value</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;customType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3drender-qfilterkey.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrameGraphNode</name>
        <filename>qt3drender-qframegraphnode.html</filename>
        <base>QNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrameGraphNode</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>QFrameGraphNode</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QFrameGraphNode *</type>
            <name>parentFrameGraphNode</name>
            <anchorfile>qt3drender-qframegraphnode.html</anchorfile>
            <anchor>parentFrameGraphNode</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrameGraphNodeCreatedChangeBase</name>
        <filename>qt3drender-qframegraphnodecreatedchangebase.html</filename>
        <base>QNodeCreatedChangeBase</base>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrontFace</name>
        <filename>qt3drender-qfrontface.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="WindingDirection">
            <name>direction</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>WindingDirection</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>WindingDirection-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ClockWise</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>WindingDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CounterClockWise</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>WindingDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrontFace</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>QFrontFace</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QFrontFace::WindingDirection</type>
            <name>direction</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(Qt3DRender::QFrontFace::WindingDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directionChanged</name>
            <anchorfile>qt3drender-qfrontface.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(Qt3DRender::QFrontFace::WindingDirection direction)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QFrustumCulling</name>
        <filename>qt3drender-qfrustumculling.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFrustumCulling</name>
            <anchorfile>qt3drender-qfrustumculling.html</anchorfile>
            <anchor>QFrustumCulling</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QGeometry</name>
        <filename>qt3drender-qgeometry.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QAttribute*">
            <name>boundingVolumePositionAttribute</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>boundingVolumePositionAttribute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>minExtent</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>minExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>maxExtent</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>maxExtent-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeometry</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>QGeometry</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QAttribute *&gt;</type>
            <name>attributes</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAttribute</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>addAttribute</anchor>
            <arglist>(Qt3DRender::QAttribute *attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAttribute</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>removeAttribute</anchor>
            <arglist>(Qt3DRender::QAttribute *attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAttribute *</type>
            <name>boundingVolumePositionAttribute</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>boundingVolumePositionAttribute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>minExtent</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>minExtent-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>maxExtent</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>maxExtent-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBoundingVolumePositionAttribute</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>boundingVolumePositionAttribute-prop</anchor>
            <arglist>(Qt3DRender::QAttribute *boundingVolumePositionAttribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>boundingVolumePositionAttributeChanged</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>boundingVolumePositionAttribute-prop</anchor>
            <arglist>(Qt3DRender::QAttribute *boundingVolumePositionAttribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minExtentChanged</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>minExtent-prop</anchor>
            <arglist>(const QVector3D &amp;minExtent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>maxExtentChanged</name>
            <anchorfile>qt3drender-qgeometry.html</anchorfile>
            <anchor>maxExtent-prop</anchor>
            <arglist>(const QVector3D &amp;maxExtent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QGeometryRenderer</name>
        <filename>qt3drender-qgeometryrenderer.html</filename>
        <base>QComponent</base>
        <member kind="property" type="int">
            <name>instanceCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>instanceCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>vertexCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>vertexCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>indexOffset</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>indexOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>firstInstance</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstInstance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>firstVertex</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstVertex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>indexBufferByteOffset</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>indexBufferByteOffset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>restartIndexValue</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>restartIndexValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>verticesPerPatch</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>verticesPerPatch-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>primitiveRestartEnabled</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveRestartEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QGeometry*">
            <name>geometry</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="PrimitiveType">
            <name>primitiveType</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeometryRenderer</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>QGeometryRenderer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enumeration">
            <name>PrimitiveType</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Points</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Lines</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineLoop</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineStrip</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Triangles</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TriangleStrip</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TriangleFan</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinesAdjacency</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TrianglesAdjacency</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineStripAdjacency</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TriangleStripAdjacency</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Patches</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>PrimitiveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>instanceCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>instanceCount-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>vertexCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>vertexCount-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOffset</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>indexOffset-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>firstInstance</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstInstance-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>firstVertex</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstVertex-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexBufferByteOffset</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>indexBufferByteOffset-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>restartIndexValue</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>restartIndexValue-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>verticesPerPatch</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>verticesPerPatch-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>primitiveRestartEnabled</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveRestartEnabled-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QGeometry *</type>
            <name>geometry</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QGeometryRenderer::PrimitiveType</type>
            <name>primitiveType</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QGeometryFactoryPtr</type>
            <name>geometryFactory</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometryFactory</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometryFactory</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>setGeometryFactory</anchor>
            <arglist>(const Qt3DRender::QGeometryFactoryPtr &amp;factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInstanceCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>instanceCount-prop</anchor>
            <arglist>(int instanceCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexCount</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>vertexCount-prop</anchor>
            <arglist>(int vertexCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndexOffset</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>indexOffset-prop</anchor>
            <arglist>(int indexOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirstInstance</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstInstance-prop</anchor>
            <arglist>(int firstInstance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirstVertex</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstVertex-prop</anchor>
            <arglist>(int firstVertex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndexBufferByteOffset</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>indexBufferByteOffset-prop</anchor>
            <arglist>(int offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRestartIndexValue</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>restartIndexValue-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticesPerPatch</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>verticesPerPatch-prop</anchor>
            <arglist>(int verticesPerPatch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrimitiveRestartEnabled</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveRestartEnabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>(Qt3DRender::QGeometry *geometry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrimitiveType</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveType-prop</anchor>
            <arglist>(Qt3DRender::QGeometryRenderer::PrimitiveType primitiveType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>instanceCountChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>instanceCount-prop</anchor>
            <arglist>(int instanceCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vertexCountChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>vertexCount-prop</anchor>
            <arglist>(int vertexCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>indexOffsetChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>indexOffset-prop</anchor>
            <arglist>(int indexOffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>firstInstanceChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstInstance-prop</anchor>
            <arglist>(int firstInstance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>firstVertexChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>firstVertex-prop</anchor>
            <arglist>(int firstVertex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>indexBufferByteOffsetChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>indexBufferByteOffset-prop</anchor>
            <arglist>(int offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>restartIndexValueChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>restartIndexValue-prop</anchor>
            <arglist>(int restartIndexValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>verticesPerPatchChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>verticesPerPatch-prop</anchor>
            <arglist>(int verticesPerPatch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>primitiveRestartEnabledChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveRestartEnabled-prop</anchor>
            <arglist>(bool primitiveRestartEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>geometryChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>(Qt3DRender::QGeometry *geometry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>primitiveTypeChanged</name>
            <anchorfile>qt3drender-qgeometryrenderer.html</anchorfile>
            <anchor>primitiveType-prop</anchor>
            <arglist>(Qt3DRender::QGeometryRenderer::PrimitiveType primitiveType)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QGraphicsApiFilter</name>
        <filename>qt3drender-qgraphicsapifilter.html</filename>
        <base>QObject</base>
        <member kind="property" type="Qt3DRender::QGraphicsApiFilter::Api">
            <name>api</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QGraphicsApiFilter::OpenGLProfile">
            <name>profile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>majorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>extensions</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>vendor</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Api</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>Api-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>OpenGLES</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>Api-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>Api-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Vulkan</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>Api-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirectX</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>Api-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RHI</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>Api-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>OpenGLProfile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>OpenGLProfile-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoProfile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>OpenGLProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CoreProfile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>OpenGLProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompatibilityProfile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>OpenGLProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsApiFilter</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>QGraphicsApiFilter</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QGraphicsApiFilter::Api</type>
            <name>api</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QGraphicsApiFilter::OpenGLProfile</type>
            <name>profile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>majorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>extensions</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>vendor</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setApi</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist>(Qt3DRender::QGraphicsApiFilter::Api api)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProfile</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist>(Qt3DRender::QGraphicsApiFilter::OpenGLProfile profile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist>(int minorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMajorVersion</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist>(int majorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtensions</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist>(const QStringList &amp;extensions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVendor</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist>(const QString &amp;vendor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>apiChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist>(Qt3DRender::QGraphicsApiFilter::Api api)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>profileChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist>(Qt3DRender::QGraphicsApiFilter::OpenGLProfile profile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minorVersionChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist>(int minorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>majorVersionChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist>(int majorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>extensionsChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist>(const QStringList &amp;extensions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vendorChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist>(const QString &amp;vendor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>graphicsApiFilterChanged</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>graphicsApiFilterChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const Qt3DRender::QGraphicsApiFilter &amp;reference, const Qt3DRender::QGraphicsApiFilter &amp;sample)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt3drender-qgraphicsapifilter.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const Qt3DRender::QGraphicsApiFilter &amp;reference, const Qt3DRender::QGraphicsApiFilter &amp;sample)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLayer</name>
        <filename>qt3drender-qlayer.html</filename>
        <base>QComponent</base>
        <member kind="property" type="bool">
            <name>recursive</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLayer</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>QLayer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>recursive</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRecursive</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist>(bool recursive)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>recursiveChanged</name>
            <anchorfile>qt3drender-qlayer.html</anchorfile>
            <anchor>recursive-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLayerFilter</name>
        <filename>qt3drender-qlayerfilter.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="FilterMode">
            <name>filterMode</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>filterMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FilterMode</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>FilterMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AcceptAnyMatchingLayers</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>FilterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AcceptAllMatchingLayers</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>FilterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DiscardAnyMatchingLayers</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>FilterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DiscardAllMatchingLayers</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>FilterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLayerFilter</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>QLayerFilter</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addLayer</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>addLayer</anchor>
            <arglist>(Qt3DRender::QLayer *layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLayer</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>removeLayer</anchor>
            <arglist>(Qt3DRender::QLayer *layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QLayer *&gt;</type>
            <name>layers</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>layers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QLayerFilter::FilterMode</type>
            <name>filterMode</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>filterMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterMode</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>filterMode-prop</anchor>
            <arglist>(Qt3DRender::QLayerFilter::FilterMode filterMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>filterModeChanged</name>
            <anchorfile>qt3drender-qlayerfilter.html</anchorfile>
            <anchor>filterMode-prop</anchor>
            <arglist>(Qt3DRender::QLayerFilter::FilterMode filterMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLevelOfDetail</name>
        <filename>qt3drender-qlevelofdetail.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DRender::QCamera*">
            <name>camera</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentIndex</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ThresholdType">
            <name>thresholdType</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>thresholdType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector&lt;qreal&gt;">
            <name>thresholds</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>thresholds-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QLevelOfDetailBoundingSphere">
            <name>volumeOverride</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>volumeOverride-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ThresholdType</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>ThresholdType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DistanceToCameraThreshold</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>ThresholdType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProjectedScreenPixelSizeThreshold</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>ThresholdType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLevelOfDetail</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>QLevelOfDetail</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QCamera *</type>
            <name>camera</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentIndex</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QLevelOfDetail::ThresholdType</type>
            <name>thresholdType</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>thresholdType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;qreal&gt;</type>
            <name>thresholds</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>thresholds-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QLevelOfDetailBoundingSphere</type>
            <name>volumeOverride</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>volumeOverride-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCamera</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>setCamera</anchor>
            <arglist>(Qt3DRender::QCamera *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>setCurrentIndex</anchor>
            <arglist>(int currentIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setThresholdType</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>setThresholdType</anchor>
            <arglist>(Qt3DRender::QLevelOfDetail::ThresholdType thresholdType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setThresholds</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>setThresholds</anchor>
            <arglist>(const QVector&lt;qreal&gt; &amp;thresholds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVolumeOverride</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>volumeOverride-prop</anchor>
            <arglist>(const Qt3DRender::QLevelOfDetailBoundingSphere &amp;volumeOverride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cameraChanged</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>camera-prop</anchor>
            <arglist>(Qt3DRender::QCamera *camera)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentIndexChanged</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int currentIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>thresholdTypeChanged</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>thresholdType-prop</anchor>
            <arglist>(Qt3DRender::QLevelOfDetail::ThresholdType thresholdType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>thresholdsChanged</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>thresholds-prop</anchor>
            <arglist>(const QVector&lt;qreal&gt; &amp;thresholds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeOverrideChanged</name>
            <anchorfile>qt3drender-qlevelofdetail.html</anchorfile>
            <anchor>volumeOverride-prop</anchor>
            <arglist>(const Qt3DRender::QLevelOfDetailBoundingSphere &amp;volumeOverride)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLevelOfDetailBoundingSphere</name>
        <filename>qt3drender-qlevelofdetailboundingsphere.html</filename>
        <member kind="property" type="QVector3D">
            <name>center</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>center-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>radius</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLevelOfDetailBoundingSphere</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>QLevelOfDetailBoundingSphere</anchor>
            <arglist>(QVector3D center, float radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>center</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>center-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>radius</name>
            <anchorfile>qt3drender-qlevelofdetailboundingsphere.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLevelOfDetailSwitch</name>
        <filename>qt3drender-qlevelofdetailswitch.html</filename>
        <base>QLevelOfDetail</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLevelOfDetailSwitch</name>
            <anchorfile>qt3drender-qlevelofdetailswitch.html</anchorfile>
            <anchor>QLevelOfDetailSwitch</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QLineWidth</name>
        <filename>qt3drender-qlinewidth.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="float">
            <name>value</name>
            <anchorfile>qt3drender-qlinewidth.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>value</name>
            <anchorfile>qt3drender-qlinewidth.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>smooth</name>
            <anchorfile>qt3drender-qlinewidth.html</anchorfile>
            <anchor>smooth-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3drender-qlinewidth.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSmooth</name>
            <anchorfile>qt3drender-qlinewidth.html</anchorfile>
            <anchor>smooth-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3drender-qlinewidth.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>smoothChanged</name>
            <anchorfile>qt3drender-qlinewidth.html</anchorfile>
            <anchor>smooth-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QMaterial</name>
        <filename>qt3drender-qmaterial.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DRender::QEffect*">
            <name>effect</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>effect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QEffect *</type>
            <name>effect</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>effect-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(Qt3DRender::QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(Qt3DRender::QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEffect</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>effect-prop</anchor>
            <arglist>(Qt3DRender::QEffect *effect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>effectChanged</name>
            <anchorfile>qt3drender-qmaterial.html</anchorfile>
            <anchor>effect-prop</anchor>
            <arglist>(Qt3DRender::QEffect *effect)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QMemoryBarrier</name>
        <filename>qt3drender-qmemorybarrier.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="enumeration">
            <name>Operation</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>None</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VertexAttributeArray</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ElementArray</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Uniform</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureFetch</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShaderImageAccess</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Command</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PixelBuffer</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureUpdate</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BufferUpdate</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrameBuffer</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransformFeedback</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AtomicCounter</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShaderStorage</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QueryBuffer</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>All</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt3DRender::QMemoryBarrier::Operation">
            <name>Operations</name>
            <anchorfile>qt3drender-qmemorybarrier.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QMesh</name>
        <filename>qt3drender-qmesh.html</filename>
        <base>QGeometryRenderer</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>meshName</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>meshName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMesh</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>QMesh</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>None</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Loading</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ready</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>meshName</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>meshName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QMesh::Status</type>
            <name>status</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMeshName</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>meshName-prop</anchor>
            <arglist>(const QString &amp;meshName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>meshNameChanged</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>meshName-prop</anchor>
            <arglist>(const QString &amp;meshName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3drender-qmesh.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Qt3DRender::QMesh::Status status)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QMultiSampleAntiAliasing</name>
        <filename>qt3drender-qmultisampleantialiasing.html</filename>
        <base>QRenderState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiSampleAntiAliasing</name>
            <anchorfile>qt3drender-qmultisampleantialiasing.html</anchorfile>
            <anchor>QMultiSampleAntiAliasing</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QNoDepthMask</name>
        <filename>qt3drender-qnodepthmask.html</filename>
        <base>QRenderState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNoDepthMask</name>
            <anchorfile>qt3drender-qnodepthmask.html</anchorfile>
            <anchor>QNoDepthMask</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QNoDraw</name>
        <filename>qt3drender-qnodraw.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNoDraw</name>
            <anchorfile>qt3drender-qnodraw.html</anchorfile>
            <anchor>QNoDraw</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QNoPicking</name>
        <filename>qt3drender-qnopicking.html</filename>
        <base>QFrameGraphNode</base>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QObjectPicker</name>
        <filename>qt3drender-qobjectpicker.html</filename>
        <base>QComponent</base>
        <member kind="property" type="bool">
            <name>hoverEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>hoverEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>dragEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>dragEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>pressed</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>pressed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>containsMouse</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>priority</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>priority-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHoverEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>isHoverEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDragEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>isDragEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsMouse</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>containsMouse</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPressed</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>pressed-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>priority</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>priority-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHoverEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>setHoverEnabled</anchor>
            <arglist>(bool hoverEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDragEnabled</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>setDragEnabled</anchor>
            <arglist>(bool dragEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPriority</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>setPriority</anchor>
            <arglist>(int priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressed</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>pressed</anchor>
            <arglist>(Qt3DRender::QPickEvent *pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>released</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>released</anchor>
            <arglist>(Qt3DRender::QPickEvent *pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clicked</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>clicked</anchor>
            <arglist>(Qt3DRender::QPickEvent *pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moved</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>moved</anchor>
            <arglist>(Qt3DRender::QPickEvent *pick)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entered</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>entered</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exited</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>exited</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hoverEnabledChanged</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>hoverEnabled-prop</anchor>
            <arglist>(bool hoverEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dragEnabledChanged</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>dragEnabled-prop</anchor>
            <arglist>(bool dragEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pressedChanged</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>pressed-prop</anchor>
            <arglist>(bool pressed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>containsMouseChanged</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>containsMouse-prop</anchor>
            <arglist>(bool containsMouse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>priorityChanged</name>
            <anchorfile>qt3drender-qobjectpicker.html</anchorfile>
            <anchor>priority-prop</anchor>
            <arglist>(int priority)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPaintedTextureImage</name>
        <filename>qt3drender-qpaintedtextureimage.html</filename>
        <base>QAbstractTextureImage</base>
        <member kind="property" type="int">
            <name>width</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>height</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>size</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(QSize size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sizeChanged</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>(QSize size)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qt3drender-qpaintedtextureimage.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QParameter</name>
        <filename>qt3drender-qparameter.html</filename>
        <base>QNode</base>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>value</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParameter</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>QParameter</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParameter</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>QParameter-1</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParameter</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>QParameter-2</anchor>
            <arglist>(const QString &amp;name, Qt3DRender::QAbstractTexture *texture, Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QVariant &amp;dv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qt3drender-qparameter.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPickEvent</name>
        <filename>qt3drender-qpickevent.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPointF">
            <name>position</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>distance</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>distance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>localIntersection</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>localIntersection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>worldIntersection</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>worldIntersection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QPickEvent::Buttons">
            <name>button</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>button-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>buttons</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>buttons-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>modifiers</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>modifiers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QViewport*">
            <name>viewport</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>viewport-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DCore::QEntity*">
            <name>entity</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Buttons</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LeftButton</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightButton</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MiddleButton</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BackButton</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoButton</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Buttons-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Modifiers</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoModifier</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShiftModifier</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ControlModifier</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AltModifier</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MetaModifier</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeypadModifier</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>Modifiers-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickEvent</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>QPickEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickEvent</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>QPickEvent-1</anchor>
            <arglist>(const QPointF &amp;position, const QVector3D &amp;intersection, const QVector3D &amp;localIntersection, float distance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickEvent</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>QPickEvent-2</anchor>
            <arglist>(const QPointF &amp;position, const QVector3D &amp;worldIntersection, const QVector3D &amp;localIntersection, float distance, Qt3DRender::QPickEvent::Buttons button, int buttons, int modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>isAccepted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccepted</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>setAccepted</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>position</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distance</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>distance</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>worldIntersection</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>worldIntersection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>localIntersection</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>localIntersection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QPickEvent::Buttons</type>
            <name>button</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>button</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>buttons</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>modifiers</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QViewport *</type>
            <name>viewport</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>viewport-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>entity</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>acceptedChanged</name>
            <anchorfile>qt3drender-qpickevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPickLineEvent</name>
        <filename>qt3drender-qpicklineevent.html</filename>
        <base>QPickEvent</base>
        <member kind="property" type="uint">
            <name>edgeIndex</name>
            <anchorfile>qt3drender-qpicklineevent.html</anchorfile>
            <anchor>edgeIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>vertex1Index</name>
            <anchorfile>qt3drender-qpicklineevent.html</anchorfile>
            <anchor>vertex1Index-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>vertex2Index</name>
            <anchorfile>qt3drender-qpicklineevent.html</anchorfile>
            <anchor>vertex2Index-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickLineEvent</name>
            <anchorfile>qt3drender-qpicklineevent.html</anchorfile>
            <anchor>QPickLineEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>edgeIndex</name>
            <anchorfile>qt3drender-qpicklineevent.html</anchorfile>
            <anchor>edgeIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertex1Index</name>
            <anchorfile>qt3drender-qpicklineevent.html</anchorfile>
            <anchor>vertex1Index</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertex2Index</name>
            <anchorfile>qt3drender-qpicklineevent.html</anchorfile>
            <anchor>vertex2Index</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPickPointEvent</name>
        <filename>qt3drender-qpickpointevent.html</filename>
        <base>QPickEvent</base>
        <member kind="property" type="uint">
            <name>pointIndex</name>
            <anchorfile>qt3drender-qpickpointevent.html</anchorfile>
            <anchor>pointIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickPointEvent</name>
            <anchorfile>qt3drender-qpickpointevent.html</anchorfile>
            <anchor>QPickPointEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>pointIndex</name>
            <anchorfile>qt3drender-qpickpointevent.html</anchorfile>
            <anchor>pointIndex</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPickTriangleEvent</name>
        <filename>qt3drender-qpicktriangleevent.html</filename>
        <base>QPickEvent</base>
        <member kind="property" type="uint">
            <name>triangleIndex</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>triangleIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>vertex1Index</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>vertex1Index-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>vertex2Index</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>vertex2Index-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>vertex3Index</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>vertex3Index-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>uvw</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>uvw-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickTriangleEvent</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>QPickTriangleEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPickTriangleEvent</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>QPickTriangleEvent-1</anchor>
            <arglist>(const QPointF &amp;position, const QVector3D &amp;worldIntersection, const QVector3D &amp;localIntersection, float distance, uint triangleIndex, uint vertex1Index, uint vertex2Index, uint vertex3Index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>triangleIndex</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>triangleIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertex1Index</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>vertex1Index</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertex2Index</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>vertex2Index</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertex3Index</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>vertex3Index</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>uvw</name>
            <anchorfile>qt3drender-qpicktriangleevent.html</anchorfile>
            <anchor>uvw</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPickingSettings</name>
        <filename>qt3drender-qpickingsettings.html</filename>
        <base>QNode</base>
        <member kind="property" type="PickMethod">
            <name>pickMethod</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickMethod-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="PickResultMode">
            <name>pickResultMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickResultMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="FaceOrientationPickingMode">
            <name>faceOrientationPickingMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>faceOrientationPickingMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>worldSpaceTolerance</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>worldSpaceTolerance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PickMethod</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>PickMethod-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BoundingVolumePicking</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>PickMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TrianglePicking</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>PickMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinePicking</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>PickMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PointPicking</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>PickMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PrimitivePicking</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>PickMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PickResultMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>PickResultMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NearestPick</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>PickResultMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllPicks</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>PickResultMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NearestPriorityPick</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>PickResultMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FaceOrientationPickingMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>FaceOrientationPickingMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>FrontFace</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>FaceOrientationPickingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BackFace</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>FaceOrientationPickingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrontAndBackFace</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>FaceOrientationPickingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QPickingSettings::PickMethod</type>
            <name>pickMethod</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickMethod-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QPickingSettings::PickResultMode</type>
            <name>pickResultMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickResultMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QPickingSettings::FaceOrientationPickingMode</type>
            <name>faceOrientationPickingMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>faceOrientationPickingMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>worldSpaceTolerance</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>worldSpaceTolerance</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPickMethod</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickMethod-prop</anchor>
            <arglist>(Qt3DRender::QPickingSettings::PickMethod pickMethod)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPickResultMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickResultMode-prop</anchor>
            <arglist>(Qt3DRender::QPickingSettings::PickResultMode pickResultMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFaceOrientationPickingMode</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>faceOrientationPickingMode-prop</anchor>
            <arglist>(Qt3DRender::QPickingSettings::FaceOrientationPickingMode faceOrientationPickingMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorldSpaceTolerance</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>setWorldSpaceTolerance</anchor>
            <arglist>(float worldSpaceTolerance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pickMethodChanged</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickMethod-prop</anchor>
            <arglist>(QPickingSettings::PickMethod pickMethod)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pickResultModeChanged</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>pickResultMode-prop</anchor>
            <arglist>(QPickingSettings::PickResultMode pickResult)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceOrientationPickingModeChanged</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>faceOrientationPickingMode-prop</anchor>
            <arglist>(QPickingSettings::FaceOrientationPickingMode faceOrientationPickingMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>worldSpaceToleranceChanged</name>
            <anchorfile>qt3drender-qpickingsettings.html</anchorfile>
            <anchor>worldSpaceTolerance-prop</anchor>
            <arglist>(float worldSpaceTolerance)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPointLight</name>
        <filename>qt3drender-qpointlight.html</filename>
        <base>QAbstractLight</base>
        <member kind="property" type="float">
            <name>constantAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>linearAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>quadraticAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointLight</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>QPointLight</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>constantAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>linearAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>quadraticAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConstantAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLinearAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuadraticAttenuation</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>constantAttenuationChanged</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist>(float constantAttenuation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linearAttenuationChanged</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist>(float linearAttenuation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quadraticAttenuationChanged</name>
            <anchorfile>qt3drender-qpointlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist>(float quadraticAttenuation)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPointSize</name>
        <filename>qt3drender-qpointsize.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="SizeMode">
            <name>sizeMode</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>sizeMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>value</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SizeMode</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>SizeMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Fixed</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>SizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Programmable</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>SizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QPointSize::SizeMode</type>
            <name>sizeMode</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>sizeMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>value</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeMode</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>sizeMode-prop</anchor>
            <arglist>(Qt3DRender::QPointSize::SizeMode sizeMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sizeModeChanged</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>sizeMode-prop</anchor>
            <arglist>(Qt3DRender::QPointSize::SizeMode sizeMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qt3drender-qpointsize.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QPolygonOffset</name>
        <filename>qt3drender-qpolygonoffset.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="float">
            <name>scaleFactor</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>scaleFactor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>depthSteps</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>depthSteps-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonOffset</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>QPolygonOffset</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scaleFactor</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>scaleFactor-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>depthSteps</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>depthSteps-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScaleFactor</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>scaleFactor-prop</anchor>
            <arglist>(float scaleFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthSteps</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>depthSteps-prop</anchor>
            <arglist>(float depthSteps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scaleFactorChanged</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>scaleFactor-prop</anchor>
            <arglist>(float scaleFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthStepsChanged</name>
            <anchorfile>qt3drender-qpolygonoffset.html</anchorfile>
            <anchor>depthSteps-prop</anchor>
            <arglist>(float depthSteps)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QProximityFilter</name>
        <filename>qt3drender-qproximityfilter.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="Qt3DCore::QEntity*">
            <name>entity</name>
            <anchorfile>qt3drender-qproximityfilter.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>distanceThreshold</name>
            <anchorfile>qt3drender-qproximityfilter.html</anchorfile>
            <anchor>distanceThreshold-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>entity</name>
            <anchorfile>qt3drender-qproximityfilter.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distanceThreshold</name>
            <anchorfile>qt3drender-qproximityfilter.html</anchorfile>
            <anchor>distanceThreshold-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEntity</name>
            <anchorfile>qt3drender-qproximityfilter.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistanceThreshold</name>
            <anchorfile>qt3drender-qproximityfilter.html</anchorfile>
            <anchor>distanceThreshold-prop</anchor>
            <arglist>(float distanceThreshold)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>entityChanged</name>
            <anchorfile>qt3drender-qproximityfilter.html</anchorfile>
            <anchor>entity-prop</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>distanceThresholdChanged</name>
            <anchorfile>qt3drender-qproximityfilter.html</anchorfile>
            <anchor>distanceThreshold-prop</anchor>
            <arglist>(float distanceThreshold)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRasterMode</name>
        <filename>qt3drender-qrastermode.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="RasterMode">
            <name>rasterMode</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>rasterMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="FaceMode">
            <name>faceMode</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RasterMode</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>RasterMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Points</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>RasterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Lines</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>RasterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Fill</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>RasterMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FaceMode</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>FaceMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Front</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>FaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Back</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>FaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrontAndBack</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>FaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRasterMode::RasterMode</type>
            <name>rasterMode</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>rasterMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRasterMode::FaceMode</type>
            <name>faceMode</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRasterMode</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>rasterMode-prop</anchor>
            <arglist>(Qt3DRender::QRasterMode::RasterMode rasterMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFaceMode</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>(Qt3DRender::QRasterMode::FaceMode faceMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rasterModeChanged</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>rasterMode-prop</anchor>
            <arglist>(Qt3DRender::QRasterMode::RasterMode rasterMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceModeChanged</name>
            <anchorfile>qt3drender-qrastermode.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>(Qt3DRender::QRasterMode::FaceMode faceMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRayCaster</name>
        <filename>qt3drender-qraycaster.html</filename>
        <base>QAbstractRayCaster</base>
        <member kind="property" type="QVector3D">
            <name>origin</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>direction</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>length</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>origin</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>direction</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrigin</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist>(const QVector3D &amp;origin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(const QVector3D &amp;direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>setLength</anchor>
            <arglist>(float length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>trigger</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>trigger</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>trigger</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>trigger-1</anchor>
            <arglist>(const QVector3D &amp;origin, const QVector3D &amp;direction, float length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>originChanged</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist>(const QVector3D &amp;origin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directionChanged</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(const QVector3D &amp;direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lengthChanged</name>
            <anchorfile>qt3drender-qraycaster.html</anchorfile>
            <anchor>length-prop</anchor>
            <arglist>(float length)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRayCasterHit</name>
        <filename>qt3drender-qraycasterhit.html</filename>
        <member kind="enumeration">
            <name>HitType</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>HitType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TriangleHit</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>HitType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineHit</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>HitType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PointHit</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>HitType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EntityHit</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>HitType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRayCasterHit::HitType</type>
            <name>type</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QNodeId</type>
            <name>entityId</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>entityId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>entity</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>entity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distance</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>distance</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>localIntersection</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>localIntersection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>worldIntersection</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>worldIntersection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>primitiveIndex</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>primitiveIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertex1Index</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>vertex1Index</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertex2Index</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>vertex2Index</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>vertex3Index</name>
            <anchorfile>qt3drender-qraycasterhit.html</anchorfile>
            <anchor>vertex3Index</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderAspect</name>
        <filename>qt3drender-qrenderaspect.html</filename>
        <base>QAbstractAspect</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderAspect</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>QRenderAspect</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderAspect</name>
            <anchorfile>qt3drender-qrenderaspect.html</anchorfile>
            <anchor>QRenderAspect-1</anchor>
            <arglist>(Qt3DRender::QRenderAspect::RenderType type, QObject *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderCapabilities</name>
        <filename>qt3drender-qrendercapabilities.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>valid</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>valid-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="API">
            <name>api</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Profile">
            <name>profile</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>majorVersion</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minorVersion</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>extensions</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>vendor</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>renderer</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>renderer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>driverVersion</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>driverVersion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>glslVersion</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>glslVersion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxSamples</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxSamples-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxTextureSize</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxTextureSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxTextureUnits</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxTextureUnits-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxTextureLayers</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxTextureLayers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>supportsUBO</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>supportsUBO-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxUBOSize</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxUBOSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxUBOBindings</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxUBOBindings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>supportsSSBO</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>supportsSSBO-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxSSBOSize</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxSSBOSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxSSBOBindings</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxSSBOBindings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>supportsImageStore</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>supportsImageStore-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxImageUnits</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxImageUnits-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>supportsCompute</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>supportsCompute-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxWorkGroupCountX</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxWorkGroupCountX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxWorkGroupCountY</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxWorkGroupCountY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxWorkGroupCountZ</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxWorkGroupCountZ-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxWorkGroupSizeX</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxWorkGroupSizeX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxWorkGroupSizeY</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxWorkGroupSizeY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxWorkGroupSizeZ</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxWorkGroupSizeZ-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxComputeInvocations</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxComputeInvocations-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxComputeSharedMemorySize</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxComputeSharedMemorySize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>valid-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderCapabilities::API</type>
            <name>api</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>api-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderCapabilities::Profile</type>
            <name>profile</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>profile-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>majorVersion</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>majorVersion-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minorVersion</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>minorVersion-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>extensions</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>extensions-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>vendor</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>vendor-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>renderer</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>renderer-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>driverVersion</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>driverVersion-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>glslVersion</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>glslVersion-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxSamples</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxSamples-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxTextureSize</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxTextureSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxTextureUnits</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxTextureUnits-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxTextureLayers</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxTextureLayers-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsUBO</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>supportsUBO-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxUBOSize</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxUBOSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxUBOBindings</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxUBOBindings-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsSSBO</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>supportsSSBO-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxSSBOSize</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxSSBOSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxSSBOBindings</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxSSBOBindings-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsImageStore</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>supportsImageStore-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxImageUnits</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxImageUnits-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsCompute</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>supportsCompute-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxWorkGroupCountX</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxWorkGroupCountX-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxWorkGroupCountY</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxWorkGroupCountY-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxWorkGroupCountZ</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxWorkGroupCountZ-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxWorkGroupSizeX</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxWorkGroupSizeX-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxWorkGroupSizeY</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxWorkGroupSizeY-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxWorkGroupSizeZ</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxWorkGroupSizeZ-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxComputeInvocations</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxComputeInvocations-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxComputeSharedMemorySize</name>
            <anchorfile>qt3drender-qrendercapabilities.html</anchorfile>
            <anchor>maxComputeSharedMemorySize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderCapture</name>
        <filename>qt3drender-qrendercapture.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderCapture</name>
            <anchorfile>qt3drender-qrendercapture.html</anchorfile>
            <anchor>QRenderCapture</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderCaptureReply *</type>
            <name>requestCapture</name>
            <anchorfile>qt3drender-qrendercapture-obsolete.html</anchorfile>
            <anchor>requestCapture</anchor>
            <arglist>(int captureId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderCaptureReply *</type>
            <name>requestCapture</name>
            <anchorfile>qt3drender-qrendercapture.html</anchorfile>
            <anchor>requestCapture-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderCaptureReply *</type>
            <name>requestCapture</name>
            <anchorfile>qt3drender-qrendercapture.html</anchorfile>
            <anchor>requestCapture-2</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderCaptureReply</name>
        <filename>qt3drender-qrendercapturereply.html</filename>
        <base>QObject</base>
        <member kind="property" type="QImage">
            <name>image</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>image-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>captureId</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>captureId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>complete</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>complete-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>image</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>image-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>captureId</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>captureId-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isComplete</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>complete-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveImage</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>saveImage</anchor>
            <arglist>(const QString &amp;fileName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>saveToFile</name>
            <anchorfile>qt3drender-qrendercapturereply-obsolete.html</anchorfile>
            <anchor>saveToFile</anchor>
            <arglist>(const QString &amp;fileName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>completed</name>
            <anchorfile>qt3drender-qrendercapturereply.html</anchorfile>
            <anchor>complete-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderPass</name>
        <filename>qt3drender-qrenderpass.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QShaderProgram*">
            <name>shaderProgram</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderPass</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>QRenderPass</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QShaderProgram *</type>
            <name>shaderProgram</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addFilterKey</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>addFilterKey</anchor>
            <arglist>(Qt3DRender::QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFilterKey</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>removeFilterKey</anchor>
            <arglist>(Qt3DRender::QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QFilterKey *&gt;</type>
            <name>filterKeys</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>filterKeys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRenderState</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>addRenderState</anchor>
            <arglist>(Qt3DRender::QRenderState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRenderState</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>removeRenderState</anchor>
            <arglist>(Qt3DRender::QRenderState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QRenderState *&gt;</type>
            <name>renderStates</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>renderStates</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(Qt3DRender::QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(Qt3DRender::QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderProgram</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist>(Qt3DRender::QShaderProgram *shaderProgram)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shaderProgramChanged</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist>(Qt3DRender::QShaderProgram *shaderProgram)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>ParameterList</name>
            <anchorfile>qt3drender-qrenderpass.html</anchorfile>
            <anchor>ParameterList-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderPassFilter</name>
        <filename>qt3drender-qrenderpassfilter.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderPassFilter</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>QRenderPassFilter</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QFilterKey *&gt;</type>
            <name>matchAny</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>matchAny</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMatch</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>addMatch</anchor>
            <arglist>(Qt3DRender::QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMatch</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>removeMatch</anchor>
            <arglist>(Qt3DRender::QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(Qt3DRender::QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(Qt3DRender::QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qrenderpassfilter.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderSettings</name>
        <filename>qt3drender-qrendersettings.html</filename>
        <base>QComponent</base>
        <member kind="property" type="Qt3DRender::QRenderCapabilities*">
            <name>renderCapabilities</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>renderCapabilities-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QPickingSettings*">
            <name>pickingSettings</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>pickingSettings-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="RenderPolicy">
            <name>renderPolicy</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QFrameGraphNode*">
            <name>activeFrameGraph</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>activeFrameGraph-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RenderPolicy</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>RenderPolicy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>OnDemand</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>RenderPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Always</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>RenderPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderCapabilities *</type>
            <name>renderCapabilities</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>renderCapabilities-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QPickingSettings *</type>
            <name>pickingSettings</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>pickingSettings-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QFrameGraphNode *</type>
            <name>activeFrameGraph</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>activeFrameGraph-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderSettings::RenderPolicy</type>
            <name>renderPolicy</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActiveFrameGraph</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>activeFrameGraph-prop</anchor>
            <arglist>(Qt3DRender::QFrameGraphNode *activeFrameGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderPolicy</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist>(Qt3DRender::QRenderSettings::RenderPolicy renderPolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeFrameGraphChanged</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>activeFrameGraph-prop</anchor>
            <arglist>(Qt3DRender::QFrameGraphNode *activeFrameGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderPolicyChanged</name>
            <anchorfile>qt3drender-qrendersettings.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist>(Qt3DRender::QRenderSettings::RenderPolicy renderPolicy)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderState</name>
        <filename>qt3drender-qrenderstate.html</filename>
        <base>QNode</base>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderStateSet</name>
        <filename>qt3drender-qrenderstateset.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRenderState</name>
            <anchorfile>qt3drender-qrenderstateset.html</anchorfile>
            <anchor>addRenderState</anchor>
            <arglist>(Qt3DRender::QRenderState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRenderState</name>
            <anchorfile>qt3drender-qrenderstateset.html</anchorfile>
            <anchor>removeRenderState</anchor>
            <arglist>(Qt3DRender::QRenderState *state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QRenderState *&gt;</type>
            <name>renderStates</name>
            <anchorfile>qt3drender-qrenderstateset.html</anchorfile>
            <anchor>renderStates</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderSurfaceSelector</name>
        <filename>qt3drender-qrendersurfaceselector.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="QObject*">
            <name>surface</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surface-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>externalRenderTargetSize</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>surfacePixelRatio</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surfacePixelRatio-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderSurfaceSelector</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>QRenderSurfaceSelector</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>surface</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surface-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>externalRenderTargetSize</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>surfacePixelRatio</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surfacePixelRatio-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSurface</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>setSurface</anchor>
            <arglist>(QObject *surfaceObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSurfacePixelRatio</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surfacePixelRatio-prop</anchor>
            <arglist>(float ratio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExternalRenderTargetSize</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>setExternalRenderTargetSize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>surfaceChanged</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surface-prop</anchor>
            <arglist>(QObject *surface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>externalRenderTargetSizeChanged</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>externalRenderTargetSize-prop</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>surfacePixelRatioChanged</name>
            <anchorfile>qt3drender-qrendersurfaceselector.html</anchorfile>
            <anchor>surfacePixelRatio-prop</anchor>
            <arglist>(float ratio)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderTarget</name>
        <filename>qt3drender-qrendertarget.html</filename>
        <base>QComponent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderTarget</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>QRenderTarget</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addOutput</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>addOutput</anchor>
            <arglist>(Qt3DRender::QRenderTargetOutput *output)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeOutput</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>removeOutput</anchor>
            <arglist>(Qt3DRender::QRenderTargetOutput *output)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QRenderTargetOutput *&gt;</type>
            <name>outputs</name>
            <anchorfile>qt3drender-qrendertarget.html</anchorfile>
            <anchor>outputs</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderTargetOutput</name>
        <filename>qt3drender-qrendertargetoutput.html</filename>
        <base>QNode</base>
        <member kind="property" type="AttachmentPoint">
            <name>attachmentPoint</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>attachmentPoint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QAbstractTexture*">
            <name>texture</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>mipLevel</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>layer</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QAbstractTexture::CubeMapFace">
            <name>face</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AttachmentPoint</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Color0</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color1</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color2</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color3</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color4</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color5</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color6</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color7</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color8</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color9</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color10</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color11</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color12</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color13</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color14</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color15</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Depth</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Stencil</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DepthStencil</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>AttachmentPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderTargetOutput</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>QRenderTargetOutput</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderTargetOutput::AttachmentPoint</type>
            <name>attachmentPoint</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>attachmentPoint-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>texture</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipLevel</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layer</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::CubeMapFace</type>
            <name>face</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttachmentPoint</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>attachmentPoint-prop</anchor>
            <arglist>(Qt3DRender::QRenderTargetOutput::AttachmentPoint attachmentPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipLevel</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayer</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFace</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>(QAbstractTexture::CubeMapFace face)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>attachmentPointChanged</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>attachmentPoint-prop</anchor>
            <arglist>(Qt3DRender::QRenderTargetOutput::AttachmentPoint attachmentPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureChanged</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mipLevelChanged</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>(int mipLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layerChanged</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceChanged</name>
            <anchorfile>qt3drender-qrendertargetoutput.html</anchorfile>
            <anchor>face-prop</anchor>
            <arglist>(QAbstractTexture::CubeMapFace face)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QRenderTargetSelector</name>
        <filename>qt3drender-qrendertargetselector.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="Qt3DRender::QRenderTarget*">
            <name>target</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRenderTargetSelector</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>QRenderTargetSelector</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderTarget *</type>
            <name>target</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOutputs</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>setOutputs</anchor>
            <arglist>(const QVector&lt;QRenderTargetOutput::AttachmentPoint&gt; &amp;buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRenderTargetOutput::AttachmentPoint&gt;</type>
            <name>outputs</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>outputs</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DRender::QRenderTarget *target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qt3drender-qrendertargetselector.html</anchorfile>
            <anchor>target-prop</anchor>
            <arglist>(Qt3DRender::QRenderTarget *target)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSceneLoader</name>
        <filename>qt3drender-qsceneloader.html</filename>
        <base>QComponent</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSceneLoader</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>QSceneLoader</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>None</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Loading</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ready</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ComponentType</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>ComponentType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownComponent</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GeometryRendererComponent</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransformComponent</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MaterialComponent</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LightComponent</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CameraLensComponent</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>ComponentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QSceneLoader::Status</type>
            <name>status</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QEntity *</type>
            <name>entity</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>entity</anchor>
            <arglist>(const QString &amp;entityName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>entityNames</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>entityNames</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DCore::QComponent *</type>
            <name>component</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>component</anchor>
            <arglist>(const QString &amp;entityName, Qt3DRender::QSceneLoader::ComponentType componentType) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3drender-qsceneloader.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Qt3DRender::QSceneLoader::Status status)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QScissorTest</name>
        <filename>qt3drender-qscissortest.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="int">
            <name>left</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>bottom</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>width</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>height</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScissorTest</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>QScissorTest</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>left</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bottom</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(int left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>leftChanged</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>left-prop</anchor>
            <arglist>(int left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qt3drender-qscissortest.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int height)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QScreenRayCaster</name>
        <filename>qt3drender-qscreenraycaster.html</filename>
        <base>QAbstractRayCaster</base>
        <member kind="property" type="QPoint">
            <name>position</name>
            <anchorfile>qt3drender-qscreenraycaster.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>position</name>
            <anchorfile>qt3drender-qscreenraycaster.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qt3drender-qscreenraycaster.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>trigger</name>
            <anchorfile>qt3drender-qscreenraycaster.html</anchorfile>
            <anchor>trigger</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>trigger</name>
            <anchorfile>qt3drender-qscreenraycaster.html</anchorfile>
            <anchor>trigger-1</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qt3drender-qscreenraycaster.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSeamlessCubemap</name>
        <filename>qt3drender-qseamlesscubemap.html</filename>
        <base>QRenderState</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSeamlessCubemap</name>
            <anchorfile>qt3drender-qseamlesscubemap.html</anchorfile>
            <anchor>QSeamlessCubemap</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSetFence</name>
        <filename>qt3drender-qsetfence.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="HandleType">
            <name>handleType</name>
            <anchorfile>qt3drender-qsetfence.html</anchorfile>
            <anchor>handleType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>handle</name>
            <anchorfile>qt3drender-qsetfence.html</anchorfile>
            <anchor>handle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QSetFence::HandleType</type>
            <name>handleType</name>
            <anchorfile>qt3drender-qsetfence.html</anchorfile>
            <anchor>handleType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>handle</name>
            <anchorfile>qt3drender-qsetfence.html</anchorfile>
            <anchor>handle-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>handleTypeChanged</name>
            <anchorfile>qt3drender-qsetfence.html</anchorfile>
            <anchor>handleType-prop</anchor>
            <arglist>(Qt3DRender::QSetFence::HandleType handleType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>handleChanged</name>
            <anchorfile>qt3drender-qsetfence.html</anchorfile>
            <anchor>handle-prop</anchor>
            <arglist>(QVariant handle)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QShaderData</name>
        <filename>qt3drender-qshaderdata.html</filename>
        <base>QComponent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderData</name>
            <anchorfile>qt3drender-qshaderdata.html</anchorfile>
            <anchor>QShaderData</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::PropertyReaderInterfacePtr</type>
            <name>propertyReader</name>
            <anchorfile>qt3drender-qshaderdata.html</anchorfile>
            <anchor>propertyReader</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QShaderImage</name>
        <filename>qt3drender-qshaderimage.html</filename>
        <base>QNode</base>
        <member kind="property" type="bool">
            <name>layered</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>layered-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>mipLevel</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>layer</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Access">
            <name>access</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>access-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="ImageFormat">
            <name>format</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Access</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>Access-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ReadOnly</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteOnly</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadWrite</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ImageFormat</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoFormat</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Automatic</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8_UNorm</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8_UNorm</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8_UNorm</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16_UNorm</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16_UNorm</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16_UNorm</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8_SNorm</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8_SNorm</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8_SNorm</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16_SNorm</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16_SNorm</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16_SNorm</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8U</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8U</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8U</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16U</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16U</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16U</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R32U</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG32U</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA32U</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8I</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8I</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8I</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16I</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16I</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16I</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R32I</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG32I</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA32I</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16F</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16F</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16F</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R32F</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG32F</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA32F</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG11B10F</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB10A2</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB10A2U</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QAbstractTexture *</type>
            <name>texture</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>layered</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>layered-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipLevel</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layer</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QShaderImage::Access</type>
            <name>access</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>access-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QShaderImage::ImageFormat</type>
            <name>format</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayered</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>layered-prop</anchor>
            <arglist>(bool layered)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipLevel</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>(int mipLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayer</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccess</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>access-prop</anchor>
            <arglist>(Qt3DRender::QShaderImage::Access access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>(Qt3DRender::QShaderImage::ImageFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureChanged</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>texture-prop</anchor>
            <arglist>(Qt3DRender::QAbstractTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layeredChanged</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>layered-prop</anchor>
            <arglist>(bool layered)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mipLevelChanged</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>mipLevel-prop</anchor>
            <arglist>(int mipLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layerChanged</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>layer-prop</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accessChanged</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>access-prop</anchor>
            <arglist>(Qt3DRender::QShaderImage::Access access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>formatChanged</name>
            <anchorfile>qt3drender-qshaderimage.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>(Qt3DRender::QShaderImage::ImageFormat format)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QShaderProgram</name>
        <filename>qt3drender-qshaderprogram.html</filename>
        <base>QNode</base>
        <member kind="property" type="QByteArray">
            <name>vertexShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>tessellationControlShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>tessellationEvaluationShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>geometryShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>fragmentShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>computeShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>log</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>log-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Format">
            <name>format</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ShaderType</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>ShaderType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Vertex</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Fragment</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TessellationControl</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TessellationEvaluation</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Geometry</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Compute</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>ShaderType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NotReady</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ready</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Format</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>Format-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>GLSL</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SPIRV</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>vertexShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>tessellationControlShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>tessellationEvaluationShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>geometryShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>fragmentShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>computeShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>setShaderCode</anchor>
            <arglist>(Qt3DRender::QShaderProgram::ShaderType type, const QByteArray &amp;shaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>shaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>shaderCode</anchor>
            <arglist>(Qt3DRender::QShaderProgram::ShaderType type) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>log</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>log-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QShaderProgram::Status</type>
            <name>status</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>(Qt3DRender::QShaderProgram::Format format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QShaderProgram::Format</type>
            <name>format</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>loadSource</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>loadSource</anchor>
            <arglist>(const QUrl &amp;sourceUrl)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;vertexShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTessellationControlShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationControlShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTessellationEvaluationShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationEvaluationShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometryShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;geometryShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFragmentShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;fragmentShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComputeShaderCode</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;computeShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vertexShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;vertexShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tessellationControlShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationControlShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tessellationEvaluationShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationEvaluationShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>geometryShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;geometryShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fragmentShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;fragmentShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>computeShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;computeShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>logChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>log-prop</anchor>
            <arglist>(const QString &amp;log)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Qt3DRender::QShaderProgram::Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>formatChanged</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>format-prop</anchor>
            <arglist>(Qt3DRender::QShaderProgram::Format format)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3drender-qshaderprogram.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QShaderProgramBuilder</name>
        <filename>qt3drender-qshaderprogrambuilder.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QShaderProgram*">
            <name>shaderProgram</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>enabledLayers</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>enabledLayers-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>vertexShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>vertexShaderGraph-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>tessellationControlShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationControlShaderGraph-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>tessellationEvaluationShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationEvaluationShaderGraph-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>geometryShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>geometryShaderGraph-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>fragmentShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>fragmentShaderGraph-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>computeShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>computeShaderGraph-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>vertexShaderCode</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>tessellationControlShaderCode</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>tessellationEvaluationShaderCode</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>geometryShaderCode</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>fragmentShaderCode</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>computeShaderCode</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QShaderProgram *</type>
            <name>shaderProgram</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>enabledLayers</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>enabledLayers-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>vertexShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>vertexShaderGraph-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>tessellationControlShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationControlShaderGraph-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>tessellationEvaluationShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationEvaluationShaderGraph-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>geometryShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>geometryShaderGraph-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>fragmentShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>fragmentShaderGraph-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>computeShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>computeShaderGraph-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>vertexShaderCode</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>tessellationControlShaderCode</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>tessellationEvaluationShaderCode</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>geometryShaderCode</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>fragmentShaderCode</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>computeShaderCode</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderProgram</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist>(Qt3DRender::QShaderProgram *program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabledLayers</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>enabledLayers-prop</anchor>
            <arglist>(const QStringList &amp;layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>vertexShaderGraph-prop</anchor>
            <arglist>(const QUrl &amp;vertexShaderGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTessellationControlShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationControlShaderGraph-prop</anchor>
            <arglist>(const QUrl &amp;tessellationControlShaderGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTessellationEvaluationShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationEvaluationShaderGraph-prop</anchor>
            <arglist>(const QUrl &amp;tessellationEvaluationShaderGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometryShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>geometryShaderGraph-prop</anchor>
            <arglist>(const QUrl &amp;geometryShaderGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFragmentShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>fragmentShaderGraph-prop</anchor>
            <arglist>(const QUrl &amp;fragmentShaderGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComputeShaderGraph</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>computeShaderGraph-prop</anchor>
            <arglist>(const QUrl &amp;computeShaderGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shaderProgramChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>shaderProgram-prop</anchor>
            <arglist>(Qt3DRender::QShaderProgram *shaderProgram)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enabledLayersChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>enabledLayers-prop</anchor>
            <arglist>(const QStringList &amp;layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vertexShaderGraphChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>vertexShaderGraph-prop</anchor>
            <arglist>(const QUrl &amp;vertexShaderGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tessellationControlShaderGraphChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationControlShaderGraph-prop</anchor>
            <arglist>(const QUrl &amp;tessellationControlShaderGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tessellationEvaluationShaderGraphChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationEvaluationShaderGraph-prop</anchor>
            <arglist>(const QUrl &amp;tessellationEvaluationShaderGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>geometryShaderGraphChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>geometryShaderGraph-prop</anchor>
            <arglist>(const QUrl &amp;geometryShaderGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fragmentShaderGraphChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>fragmentShaderGraph-prop</anchor>
            <arglist>(const QUrl &amp;fragmentShaderGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>computeShaderGraphChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>computeShaderGraph-prop</anchor>
            <arglist>(const QUrl &amp;computeShaderGraph)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>vertexShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>vertexShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;vertexShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tessellationControlShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationControlShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationControlShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tessellationEvaluationShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>tessellationEvaluationShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;tessellationEvaluationShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>geometryShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>geometryShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;geometryShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fragmentShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>fragmentShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;fragmentShaderCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>computeShaderCodeChanged</name>
            <anchorfile>qt3drender-qshaderprogrambuilder.html</anchorfile>
            <anchor>computeShaderCode-prop</anchor>
            <arglist>(const QByteArray &amp;computeShaderCode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSharedGLTexture</name>
        <filename>qt3drender-qsharedgltexture.html</filename>
        <base>QAbstractTexture</base>
        <member kind="property" type="int">
            <name>textureId</name>
            <anchorfile>qt3drender-qsharedgltexture.html</anchorfile>
            <anchor>textureId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>textureId</name>
            <anchorfile>qt3drender-qsharedgltexture.html</anchorfile>
            <anchor>textureId-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureId</name>
            <anchorfile>qt3drender-qsharedgltexture.html</anchorfile>
            <anchor>textureId-prop</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>textureIdChanged</name>
            <anchorfile>qt3drender-qsharedgltexture.html</anchorfile>
            <anchor>textureId-prop</anchor>
            <arglist>(int textureId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSortPolicy</name>
        <filename>qt3drender-qsortpolicy.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="QVector&lt;int&gt;">
            <name>sortTypes</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSortPolicy</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>QSortPolicy</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enumeration">
            <name>SortType</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>SortType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StateChangeCost</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BackToFront</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Material</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrontToBack</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Texture</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Uniform</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QSortPolicy::SortType&gt;</type>
            <name>sortTypes</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;int&gt;</type>
            <name>sortTypesInt</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortTypes</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes-prop</anchor>
            <arglist>(const QVector&lt;Qt3DRender::QSortPolicy::SortType&gt; &amp;sortTypes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortTypes</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes-prop</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;sortTypesInt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortTypesChanged</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes-prop</anchor>
            <arglist>(const QVector&lt;Qt3DRender::QSortPolicy::SortType&gt; &amp;sortTypes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortTypesChanged</name>
            <anchorfile>qt3drender-qsortpolicy.html</anchorfile>
            <anchor>sortTypes-prop</anchor>
            <arglist>(const QVector&lt;int&gt; &amp;sortTypes)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSpotLight</name>
        <filename>qt3drender-qspotlight.html</filename>
        <base>QAbstractLight</base>
        <member kind="property" type="float">
            <name>constantAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>linearAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>quadraticAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVector3D">
            <name>localDirection</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>localDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>cutOffAngle</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>cutOffAngle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpotLight</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>QSpotLight</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>localDirection</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>localDirection-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>cutOffAngle</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>cutOffAngle-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>constantAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>linearAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>quadraticAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConstantAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLinearAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuadraticAttenuation</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalDirection</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>localDirection-prop</anchor>
            <arglist>(const QVector3D &amp;localDirection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCutOffAngle</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>cutOffAngle-prop</anchor>
            <arglist>(float cutOffAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>constantAttenuationChanged</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>constantAttenuation-prop</anchor>
            <arglist>(float constantAttenuation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>linearAttenuationChanged</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>linearAttenuation-prop</anchor>
            <arglist>(float linearAttenuation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quadraticAttenuationChanged</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>quadraticAttenuation-prop</anchor>
            <arglist>(float quadraticAttenuation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>localDirectionChanged</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>localDirection-prop</anchor>
            <arglist>(const QVector3D &amp;localDirection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cutOffAngleChanged</name>
            <anchorfile>qt3drender-qspotlight.html</anchorfile>
            <anchor>cutOffAngle-prop</anchor>
            <arglist>(float cutOffAngle)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilMask</name>
        <filename>qt3drender-qstencilmask.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="uint">
            <name>frontOutputMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>frontOutputMask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>backOutputMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>backOutputMask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStencilMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>QStencilMask</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>frontOutputMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>frontOutputMask-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>backOutputMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>backOutputMask-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrontOutputMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>frontOutputMask-prop</anchor>
            <arglist>(uint frontOutputMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackOutputMask</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>backOutputMask-prop</anchor>
            <arglist>(uint backOutputMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frontOutputMaskChanged</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>frontOutputMask-prop</anchor>
            <arglist>(uint frontOutputMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>backOutputMaskChanged</name>
            <anchorfile>qt3drender-qstencilmask.html</anchorfile>
            <anchor>backOutputMask-prop</anchor>
            <arglist>(uint backOutputMask)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilOperation</name>
        <filename>qt3drender-qstenciloperation.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="Qt3DRender::QStencilOperationArguments*">
            <name>front</name>
            <anchorfile>qt3drender-qstenciloperation.html</anchorfile>
            <anchor>front-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QStencilOperationArguments*">
            <name>back</name>
            <anchorfile>qt3drender-qstenciloperation.html</anchorfile>
            <anchor>back-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStencilOperation</name>
            <anchorfile>qt3drender-qstenciloperation.html</anchorfile>
            <anchor>QStencilOperation</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QStencilOperationArguments *</type>
            <name>front</name>
            <anchorfile>qt3drender-qstenciloperation.html</anchorfile>
            <anchor>front-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QStencilOperationArguments *</type>
            <name>back</name>
            <anchorfile>qt3drender-qstenciloperation.html</anchorfile>
            <anchor>back-prop</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilOperationArguments</name>
        <filename>qt3drender-qstenciloperationarguments.html</filename>
        <base>QObject</base>
        <member kind="property" type="FaceMode">
            <name>faceMode</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Operation">
            <name>stencilTestFailureOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>stencilTestFailureOperation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Operation">
            <name>depthTestFailureOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>depthTestFailureOperation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Operation">
            <name>allTestsPassOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>allTestsPassOperation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FaceMode</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>FaceMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Front</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>FaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Back</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>FaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrontAndBack</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>FaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Operation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>Operation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Zero</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Keep</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Replace</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Increment</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Decrement</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IncrementWrap</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DecrementWrap</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Invert</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QStencilOperationArguments::FaceMode</type>
            <name>faceMode</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QStencilOperationArguments::Operation</type>
            <name>stencilTestFailureOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>stencilTestFailureOperation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QStencilOperationArguments::Operation</type>
            <name>depthTestFailureOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>depthTestFailureOperation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QStencilOperationArguments::Operation</type>
            <name>allTestsPassOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>allTestsPassOperation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilTestFailureOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>stencilTestFailureOperation-prop</anchor>
            <arglist>(Qt3DRender::QStencilOperationArguments::Operation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthTestFailureOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>depthTestFailureOperation-prop</anchor>
            <arglist>(Qt3DRender::QStencilOperationArguments::Operation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAllTestsPassOperation</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>allTestsPassOperation-prop</anchor>
            <arglist>(Qt3DRender::QStencilOperationArguments::Operation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stencilTestFailureOperationChanged</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>stencilTestFailureOperation-prop</anchor>
            <arglist>(Qt3DRender::QStencilOperationArguments::Operation stencilFail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>depthTestFailureOperationChanged</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>depthTestFailureOperation-prop</anchor>
            <arglist>(Qt3DRender::QStencilOperationArguments::Operation depthFail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allTestsPassOperationChanged</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>allTestsPassOperation-prop</anchor>
            <arglist>(Qt3DRender::QStencilOperationArguments::Operation stencilDepthPass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceModeChanged</name>
            <anchorfile>qt3drender-qstenciloperationarguments.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>(Qt3DRender::QStencilOperationArguments::FaceMode faceMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilTest</name>
        <filename>qt3drender-qstenciltest.html</filename>
        <base>QRenderState</base>
        <member kind="property" type="Qt3DRender::QStencilTestArguments*">
            <name>front</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>front-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt3DRender::QStencilTestArguments*">
            <name>back</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>back-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStencilTest</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>QStencilTest</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QStencilTestArguments *</type>
            <name>front</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>front-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QStencilTestArguments *</type>
            <name>back</name>
            <anchorfile>qt3drender-qstenciltest.html</anchorfile>
            <anchor>back-prop</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QStencilTestArguments</name>
        <filename>qt3drender-qstenciltestarguments.html</filename>
        <base>QObject</base>
        <member kind="property" type="StencilFaceMode">
            <name>faceMode</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>comparisonMask</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>comparisonMask-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>referenceValue</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="StencilFunction">
            <name>stencilFunction</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>stencilFunction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>StencilFaceMode</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFaceMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Front</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Back</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrontAndBack</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>StencilFunction</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFunction-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Never</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Always</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Less</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LessOrEqual</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Equal</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GreaterOrEqual</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Greater</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotEqual</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>StencilFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>comparisonMask</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>comparisonMask-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>referenceValue</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QStencilTestArguments::StencilFunction</type>
            <name>stencilFunction</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>stencilFunction-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QStencilTestArguments::StencilFaceMode</type>
            <name>faceMode</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonMask</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>comparisonMask-prop</anchor>
            <arglist>(uint comparisonMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReferenceValue</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist>(int referenceValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilFunction</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>stencilFunction-prop</anchor>
            <arglist>(Qt3DRender::QStencilTestArguments::StencilFunction stencilFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>comparisonMaskChanged</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>comparisonMask-prop</anchor>
            <arglist>(uint comparisonMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stencilFunctionChanged</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>stencilFunction-prop</anchor>
            <arglist>(Qt3DRender::QStencilTestArguments::StencilFunction stencilFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>referenceValueChanged</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>referenceValue-prop</anchor>
            <arglist>(int referenceValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>faceModeChanged</name>
            <anchorfile>qt3drender-qstenciltestarguments.html</anchorfile>
            <anchor>faceMode-prop</anchor>
            <arglist>(Qt3DRender::QStencilTestArguments::StencilFaceMode faceMode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QSubtreeEnabler</name>
        <filename>qt3drender-qsubtreeenabler.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="Enablement">
            <name>enablement</name>
            <anchorfile>qt3drender-qsubtreeenabler.html</anchorfile>
            <anchor>enablement-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Enablement</name>
            <anchorfile>qt3drender-qsubtreeenabler.html</anchorfile>
            <anchor>Enablement-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Persistent</name>
            <anchorfile>qt3drender-qsubtreeenabler.html</anchorfile>
            <anchor>Enablement-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SingleShot</name>
            <anchorfile>qt3drender-qsubtreeenabler.html</anchorfile>
            <anchor>Enablement-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QSubtreeEnabler::Enablement</type>
            <name>enablement</name>
            <anchorfile>qt3drender-qsubtreeenabler.html</anchorfile>
            <anchor>enablement-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnablement</name>
            <anchorfile>qt3drender-qsubtreeenabler.html</anchorfile>
            <anchor>enablement-prop</anchor>
            <arglist>(Qt3DRender::QSubtreeEnabler::Enablement enablement)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestUpdate</name>
            <anchorfile>qt3drender-qsubtreeenabler.html</anchorfile>
            <anchor>requestUpdate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enablementChanged</name>
            <anchorfile>qt3drender-qsubtreeenabler.html</anchorfile>
            <anchor>enablement-prop</anchor>
            <arglist>(Qt3DRender::QSubtreeEnabler::Enablement enablement)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTechnique</name>
        <filename>qt3drender-qtechnique.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QGraphicsApiFilter*">
            <name>graphicsApiFilter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>graphicsApiFilter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addFilterKey</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>addFilterKey</anchor>
            <arglist>(Qt3DRender::QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFilterKey</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>removeFilterKey</anchor>
            <arglist>(Qt3DRender::QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QFilterKey *&gt;</type>
            <name>filterKeys</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>filterKeys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(Qt3DRender::QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(Qt3DRender::QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRenderPass</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>addRenderPass</anchor>
            <arglist>(Qt3DRender::QRenderPass *pass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRenderPass</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>removeRenderPass</anchor>
            <arglist>(Qt3DRender::QRenderPass *pass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QRenderPass *&gt;</type>
            <name>renderPasses</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>renderPasses</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QGraphicsApiFilter *</type>
            <name>graphicsApiFilter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>graphicsApiFilter-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Qt3DRender::QGraphicsApiFilter *</type>
            <name>graphicsApiFilter</name>
            <anchorfile>qt3drender-qtechnique.html</anchorfile>
            <anchor>graphicsApiFilter-prop</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTechniqueFilter</name>
        <filename>qt3drender-qtechniquefilter.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTechniqueFilter</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>QTechniqueFilter</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QFilterKey *&gt;</type>
            <name>matchAll</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>matchAll</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMatch</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>addMatch</anchor>
            <arglist>(Qt3DRender::QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMatch</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>removeMatch</anchor>
            <arglist>(Qt3DRender::QFilterKey *filterKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addParameter</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>addParameter</anchor>
            <arglist>(Qt3DRender::QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(Qt3DRender::QParameter *parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QParameter *&gt;</type>
            <name>parameters</name>
            <anchorfile>qt3drender-qtechniquefilter.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture1D</name>
        <filename>qt3drender-qtexture1d.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture1D</name>
            <anchorfile>qt3drender-qtexture1d.html</anchorfile>
            <anchor>QTexture1D</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture1DArray</name>
        <filename>qt3drender-qtexture1darray.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture1DArray</name>
            <anchorfile>qt3drender-qtexture1darray.html</anchorfile>
            <anchor>QTexture1DArray</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture2D</name>
        <filename>qt3drender-qtexture2d.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture2D</name>
            <anchorfile>qt3drender-qtexture2d.html</anchorfile>
            <anchor>QTexture2D</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture2DArray</name>
        <filename>qt3drender-qtexture2darray.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture2DArray</name>
            <anchorfile>qt3drender-qtexture2darray.html</anchorfile>
            <anchor>QTexture2DArray</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture2DMultisample</name>
        <filename>qt3drender-qtexture2dmultisample.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture2DMultisample</name>
            <anchorfile>qt3drender-qtexture2dmultisample.html</anchorfile>
            <anchor>QTexture2DMultisample</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture2DMultisampleArray</name>
        <filename>qt3drender-qtexture2dmultisamplearray.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture2DMultisampleArray</name>
            <anchorfile>qt3drender-qtexture2dmultisamplearray.html</anchorfile>
            <anchor>QTexture2DMultisampleArray</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTexture3D</name>
        <filename>qt3drender-qtexture3d.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTexture3D</name>
            <anchorfile>qt3drender-qtexture3d.html</anchorfile>
            <anchor>QTexture3D</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureBuffer</name>
        <filename>qt3drender-qtexturebuffer.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureBuffer</name>
            <anchorfile>qt3drender-qtexturebuffer.html</anchorfile>
            <anchor>QTextureBuffer</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureCubeMap</name>
        <filename>qt3drender-qtexturecubemap.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureCubeMap</name>
            <anchorfile>qt3drender-qtexturecubemap.html</anchorfile>
            <anchor>QTextureCubeMap</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureCubeMapArray</name>
        <filename>qt3drender-qtexturecubemaparray.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureCubeMapArray</name>
            <anchorfile>qt3drender-qtexturecubemaparray.html</anchorfile>
            <anchor>QTextureCubeMapArray</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureData</name>
        <filename>qt3drender-qtexturedata.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureData</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>QTextureData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::Target</type>
            <name>target</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setTarget</anchor>
            <arglist>(QAbstractTexture::Target target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::TextureFormat</type>
            <name>format</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(QAbstractTexture::TextureFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepth</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setDepth</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layers</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>layers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayers</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setLayers</anchor>
            <arglist>(int layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAutoMipMapGenerationEnabled</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>isAutoMipMapGenerationEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoMipMapGenerationEnabled</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setAutoMipMapGenerationEnabled</anchor>
            <arglist>(bool autoMipMap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>maximumAnisotropy</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>maximumAnisotropy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumAnisotropy</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setMaximumAnisotropy</anchor>
            <arglist>(float maximumAnisotropy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::Filter</type>
            <name>minificationFilter</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>minificationFilter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinificationFilter</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setMinificationFilter</anchor>
            <arglist>(QAbstractTexture::Filter filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::Filter</type>
            <name>magnificationFilter</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>magnificationFilter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMagnificationFilter</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setMagnificationFilter</anchor>
            <arglist>(QAbstractTexture::Filter filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextureWrapMode::WrapMode</type>
            <name>wrapModeX</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>wrapModeX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapModeX</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setWrapModeX</anchor>
            <arglist>(QTextureWrapMode::WrapMode wrapModeX)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextureWrapMode::WrapMode</type>
            <name>wrapModeY</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>wrapModeY</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapModeY</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setWrapModeY</anchor>
            <arglist>(QTextureWrapMode::WrapMode wrapModeY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextureWrapMode::WrapMode</type>
            <name>wrapModeZ</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>wrapModeZ</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapModeZ</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setWrapModeZ</anchor>
            <arglist>(QTextureWrapMode::WrapMode wrapModeZ)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::ComparisonFunction</type>
            <name>comparisonFunction</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>comparisonFunction</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonFunction</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setComparisonFunction</anchor>
            <arglist>(QAbstractTexture::ComparisonFunction comparisonFunction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTexture::ComparisonMode</type>
            <name>comparisonMode</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>comparisonMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonMode</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>setComparisonMode</anchor>
            <arglist>(QAbstractTexture::ComparisonMode comparisonMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DRender::QTextureImageDataPtr&gt;</type>
            <name>imageData</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>imageData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addImageData</name>
            <anchorfile>qt3drender-qtexturedata.html</anchorfile>
            <anchor>addImageData</anchor>
            <arglist>(const Qt3DRender::QTextureImageDataPtr &amp;imageData)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureDataUpdate</name>
        <filename>qt3drender-qtexturedataupdate.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureGenerator</name>
        <filename>qt3drender-qtexturegenerator.html</filename>
        <base>QAbstractFunctor</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextureGenerator</name>
            <anchorfile>qt3drender-qtexturegenerator.html</anchorfile>
            <anchor>dtor.QTextureGenerator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual Qt3DRender::QTextureDataPtr</type>
            <name>operator()</name>
            <anchorfile>qt3drender-qtexturegenerator.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qtexturegenerator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const Qt3DRender::QTextureGenerator &amp;other) const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureImage</name>
        <filename>qt3drender-qtextureimage.html</filename>
        <base>QAbstractTextureImage</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Status">
            <name>status</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>mirrored</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureImage</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>QTextureImage</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>None</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Loading</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ready</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QTextureImage::Status</type>
            <name>status</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMirrored</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>isMirrored</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMirrored</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>setMirrored</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>status-prop</anchor>
            <arglist>(Qt3DRender::QTextureImage::Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mirroredChanged</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sceneChangeEvent</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>sceneChangeEvent</anchor>
            <arglist>(const Qt3DCore::QSceneChangePtr &amp;change) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qt3drender-qtextureimage.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(Qt3DRender::QTextureImage::Status status)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureImageData</name>
        <filename>qt3drender-qtextureimagedata.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureImageData</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>QTextureImageData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cleanup</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>cleanup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCompressed</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>isCompressed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layers</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>layers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipLevels</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>mipLevels</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>faces</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>faces</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepth</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setDepth</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayers</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setLayers</anchor>
            <arglist>(int layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipLevels</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setMipLevels</anchor>
            <arglist>(int mipLevels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFaces</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setFaces</anchor>
            <arglist>(int faces)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::Target</type>
            <name>target</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::TextureFormat</type>
            <name>format</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::PixelFormat</type>
            <name>pixelFormat</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>pixelFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::PixelType</type>
            <name>pixelType</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>pixelType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTarget</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setTarget</anchor>
            <arglist>(QOpenGLTexture::Target target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(QOpenGLTexture::TextureFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelFormat</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setPixelFormat</anchor>
            <arglist>(QOpenGLTexture::PixelFormat pixelFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelType</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setPixelType</anchor>
            <arglist>(QOpenGLTexture::PixelType pixelType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImage</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setImage</anchor>
            <arglist>(const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;data, int blockSize, bool isCompressed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qt3drender-qtextureimagedata.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(int layer, int face, int mipmapLevel) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureImageDataGenerator</name>
        <filename>qt3drender-qtextureimagedatagenerator.html</filename>
        <base>QAbstractFunctor</base>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual Qt3DRender::QTextureImageDataPtr</type>
            <name>operator()</name>
            <anchorfile>qt3drender-qtextureimagedatagenerator.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>operator==</name>
            <anchorfile>qt3drender-qtextureimagedatagenerator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const Qt3DRender::QTextureImageDataGenerator &amp;other) const const = 0</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QTextureImageDataPtr</name>
            <anchorfile>qt3drender-qtextureimagedatagenerator.html</anchorfile>
            <anchor>QTextureImageDataPtr-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureLoader</name>
        <filename>qt3drender-qtextureloader.html</filename>
        <base>QAbstractTexture</base>
        <member kind="property" type="QUrl">
            <name>source</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>mirrored</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureLoader</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>QTextureLoader</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>source</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMirrored</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMirrored</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>setMirrored</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceChanged</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>source-prop</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mirroredChanged</name>
            <anchorfile>qt3drender-qtextureloader.html</anchorfile>
            <anchor>mirrored-prop</anchor>
            <arglist>(bool mirrored)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureRectangle</name>
        <filename>qt3drender-qtexturerectangle.html</filename>
        <base>QAbstractTexture</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureRectangle</name>
            <anchorfile>qt3drender-qtexturerectangle.html</anchorfile>
            <anchor>QTextureRectangle</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QTextureWrapMode</name>
        <filename>qt3drender-qtexturewrapmode.html</filename>
        <base>QObject</base>
        <member kind="property" type="WrapMode">
            <name>x</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="WrapMode">
            <name>y</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="WrapMode">
            <name>z</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>WrapMode</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Repeat</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MirroredRepeat</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClampToEdge</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClampToBorder</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextureWrapMode</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>QTextureWrapMode-1</anchor>
            <arglist>(Qt3DRender::QTextureWrapMode::WrapMode x, Qt3DRender::QTextureWrapMode::WrapMode y, Qt3DRender::QTextureWrapMode::WrapMode z, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QTextureWrapMode::WrapMode</type>
            <name>x</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QTextureWrapMode::WrapMode</type>
            <name>y</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QTextureWrapMode::WrapMode</type>
            <name>z</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(Qt3DRender::QTextureWrapMode::WrapMode x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(Qt3DRender::QTextureWrapMode::WrapMode y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>setZ</anchor>
            <arglist>(Qt3DRender::QTextureWrapMode::WrapMode z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xChanged</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(Qt3DRender::QTextureWrapMode::WrapMode x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yChanged</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(Qt3DRender::QTextureWrapMode::WrapMode y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zChanged</name>
            <anchorfile>qt3drender-qtexturewrapmode.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>(Qt3DRender::QTextureWrapMode::WrapMode z)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QViewport</name>
        <filename>qt3drender-qviewport.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="QRectF">
            <name>normalizedRect</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>normalizedRect-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="float">
            <name>gamma</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QViewport</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>QViewport</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>normalizedRect</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>normalizedRect-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>gamma</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNormalizedRect</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>normalizedRect-prop</anchor>
            <arglist>(const QRectF &amp;normalizedRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGamma</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist>(float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalizedRectChanged</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>normalizedRect-prop</anchor>
            <arglist>(const QRectF &amp;normalizedRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>gammaChanged</name>
            <anchorfile>qt3drender-qviewport.html</anchorfile>
            <anchor>gamma-prop</anchor>
            <arglist>(float gamma)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::QWaitFence</name>
        <filename>qt3drender-qwaitfence.html</filename>
        <base>QFrameGraphNode</base>
        <member kind="property" type="HandleType">
            <name>handleType</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>handleType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>handle</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>handle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>waitOnCPU</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>waitOnCPU-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="quint64">
            <name>timeout</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHandleType</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>handleType-prop</anchor>
            <arglist>(Qt3DRender::QWaitFence::HandleType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHandle</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>handle-prop</anchor>
            <arglist>(QVariant handle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QWaitFence::HandleType</type>
            <name>handleType</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>handleType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>handle</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>handle-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitOnCPU</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>waitOnCPU-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWaitOnCPU</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>waitOnCPU-prop</anchor>
            <arglist>(bool waitOnCPU)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>timeout</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeout</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>(quint64 timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>waitOnCPUChanged</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>waitOnCPU-prop</anchor>
            <arglist>(bool waitOnCPU)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>timeoutChanged</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>(quint64 timeoutChanged)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>handleTypeChanged</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>handleType-prop</anchor>
            <arglist>(Qt3DRender::QWaitFence::HandleType handleType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>handleChanged</name>
            <anchorfile>qt3drender-qwaitfence.html</anchorfile>
            <anchor>handle-prop</anchor>
            <arglist>(QVariant handle)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DRender::Quick</name>
        <filename>qt3drender-quick.html</filename>
        <class>Qt3DRender::Quick::QScene2D</class>
    </compound>
    <compound kind="class">
        <name>Qt3DRender::Quick::QScene2D</name>
        <filename>qt3drender-quick-qscene2d.html</filename>
        <base>QNode</base>
        <member kind="property" type="Qt3DRender::QRenderTargetOutput*">
            <name>output</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>output-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QScene2D::RenderPolicy">
            <name>renderPolicy</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QQuickItem*">
            <name>item</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>item-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>mouseEnabled</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>mouseEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RenderPolicy</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>RenderPolicy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Continuous</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>RenderPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SingleShot</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>RenderPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScene2D</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>QScene2D</anchor>
            <arglist>(Qt3DCore::QNode *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt3DRender::QRenderTargetOutput *</type>
            <name>output</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>output-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScene2D::RenderPolicy</type>
            <name>renderPolicy</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuickItem *</type>
            <name>item</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>item-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMouseEnabled</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>mouseEnabled-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DCore::QEntity *&gt;</type>
            <name>entities</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>entities</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;Qt3DCore::QEntity *&gt;</type>
            <name>entities</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>entities-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addEntity</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>addEntity</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeEntity</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>removeEntity</anchor>
            <arglist>(Qt3DCore::QEntity *entity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOutput</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>output-prop</anchor>
            <arglist>(Qt3DRender::QRenderTargetOutput *output)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderPolicy</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist>(QScene2D::RenderPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItem</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>item-prop</anchor>
            <arglist>(QQuickItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMouseEnabled</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>mouseEnabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>outputChanged</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>output-prop</anchor>
            <arglist>(Qt3DRender::QRenderTargetOutput *output)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>renderPolicyChanged</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>renderPolicy-prop</anchor>
            <arglist>(QScene2D::RenderPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemChanged</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>item-prop</anchor>
            <arglist>(QQuickItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseEnabledChanged</name>
            <anchorfile>qt3drender-quick-qscene2d.html</anchorfile>
            <anchor>mouseEnabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt3DRender::Render</name>
        <filename>qt3drender-render.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.QuaternionAnimation</name>
        <filename>qml-qt3d-core-quaternionanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RasterMode</name>
        <filename>qml-qt3d-render-rastermode.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RayCaster</name>
        <filename>qml-qt3d-render-raycaster.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderCapabilities</name>
        <filename>qml-qt3d-render-rendercapabilities.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderCapture</name>
        <filename>qml-qt3d-render-rendercapture.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RenderCaptureReply</type>
            <name>requestCapture</name>
            <anchorfile>qml-qt3d-render-rendercapture-obsolete.html</anchorfile>
            <anchor>requestCapture-method</anchor>
            <arglist>( captureId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RenderCaptureReply</type>
            <name>requestCapture</name>
            <anchorfile>qml-qt3d-render-rendercapture.html</anchorfile>
            <anchor>requestCapture-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RenderCaptureReply</type>
            <name>requestCapture</name>
            <anchorfile>qml-qt3d-render-rendercapture.html</anchorfile>
            <anchor>requestCapture-method</anchor>
            <arglist>( rect)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderCaptureReply</name>
        <filename>qml-qt3d-render-rendercapturereply.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveImage</name>
            <anchorfile>qml-qt3d-render-rendercapturereply.html</anchorfile>
            <anchor>saveImage-method</anchor>
            <arglist>( fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>saveToFile</name>
            <anchorfile>qml-qt3d-render-rendercapturereply-obsolete.html</anchorfile>
            <anchor>saveToFile-method</anchor>
            <arglist>( fileName)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderPass</name>
        <filename>qml-qt3d-render-renderpass.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderPassFilter</name>
        <filename>qml-qt3d-render-renderpassfilter.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderSettings</name>
        <filename>qml-qt3d-render-rendersettings.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderState</name>
        <filename>qml-qt3d-render-renderstate.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderStateSet</name>
        <filename>qml-qt3d-render-renderstateset.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderSurfaceSelector</name>
        <filename>qml-qt3d-render-rendersurfaceselector.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderTarget</name>
        <filename>qml-qt3d-render-rendertarget.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderTargetOutput</name>
        <filename>qml-qt3d-render-rendertargetoutput.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.RenderTargetSelector</name>
        <filename>qml-qt3d-render-rendertargetselector.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Scene2D.Scene2D</name>
        <filename>qml-qtquick-scene2d-scene2d.html</filename>
    </compound>
    <compound kind="class">
        <name>QtQuick.Scene3D.Scene3D</name>
        <filename>qml-qtquick-scene3d-scene3d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemAreaAndDevicePixelRatio</name>
            <anchorfile>qml-qtquick-scene3d-scene3d.html</anchorfile>
            <anchor>setItemAreaAndDevicePixelRatio-method</anchor>
            <arglist>( area,  real devicePixelRatio)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.Scene3D.Scene3DView</name>
        <filename>qml-qtquick-scene3d-scene3dview.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SceneLoader</name>
        <filename>qml-qt3d-render-sceneloader.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Entity</type>
            <name>entity</name>
            <anchorfile>qml-qt3d-render-sceneloader.html</anchorfile>
            <anchor>entity-method</anchor>
            <arglist>( entityName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>list</type>
            <name>entityNames</name>
            <anchorfile>qml-qt3d-render-sceneloader.html</anchorfile>
            <anchor>entityNames-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Entity</type>
            <name>component</name>
            <anchorfile>qml-qt3d-render-sceneloader.html</anchorfile>
            <anchor>component-method</anchor>
            <arglist>( entityName,  enumeration componentType)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ScissorTest</name>
        <filename>qml-qt3d-render-scissortest.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ScreenRayCaster</name>
        <filename>qml-qt3d-render-screenraycaster.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SeamlessCubemap</name>
        <filename>qml-qt3d-render-seamlesscubemap.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ShaderImage</name>
        <filename>qml-qt3d-render-shaderimage.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ShaderProgram</name>
        <filename>qml-qt3d-render-shaderprogram.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>string</type>
            <name>loadSource</name>
            <anchorfile>qml-qt3d-render-shaderprogram.html</anchorfile>
            <anchor>loadSource-method</anchor>
            <arglist>( sourceUrl)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.ShaderProgramBuilder</name>
        <filename>qml-qt3d-render-shaderprogrambuilder.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SharedGLTexture</name>
        <filename>qml-qt3d-render-sharedgltexture.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Skeleton</name>
        <filename>qml-qt3d-core-skeleton.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.SkeletonLoader</name>
        <filename>qml-qt3d-core-skeletonloader.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.SkyboxEntity</name>
        <filename>qml-qt3d-extras-skyboxentity.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SortPolicy</name>
        <filename>qml-qt3d-render-sortpolicy.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.SphereGeometry</name>
        <filename>qml-qt3d-extras-spheregeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.SphereMesh</name>
        <filename>qml-qt3d-extras-spheremesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SpotLight</name>
        <filename>qml-qt3d-render-spotlight.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.StencilMask</name>
        <filename>qml-qt3d-render-stencilmask.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.StencilOperation</name>
        <filename>qml-qt3d-render-stenciloperation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.StencilOperationArguments</name>
        <filename>qml-qt3d-render-stenciloperationarguments.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.StencilTest</name>
        <filename>qml-qt3d-render-stenciltest.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.StencilTestArguments</name>
        <filename>qml-qt3d-render-stenciltestarguments.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.SubtreeEnabler</name>
        <filename>qml-qt3d-render-subtreeenabler.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestUpdate</name>
            <anchorfile>qml-qt3d-render-subtreeenabler.html</anchorfile>
            <anchor>requestUpdate-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Technique</name>
        <filename>qml-qt3d-render-technique.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.TechniqueFilter</name>
        <filename>qml-qt3d-render-techniquefilter.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.Text2DEntity</name>
        <filename>qml-qt3d-extras-text2dentity.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Texture1D</name>
        <filename>qml-qt3d-render-texture1d.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Texture1DArray</name>
        <filename>qml-qt3d-render-texture1darray.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Texture2D</name>
        <filename>qml-qt3d-render-texture2d.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Texture2DArray</name>
        <filename>qml-qt3d-render-texture2darray.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Texture2DMultisample</name>
        <filename>qml-qt3d-render-texture2dmultisample.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Texture2DMultisampleArray</name>
        <filename>qml-qt3d-render-texture2dmultisamplearray.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Texture3D</name>
        <filename>qml-qt3d-render-texture3d.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.TextureBuffer</name>
        <filename>qml-qt3d-render-texturebuffer.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.TextureCubeMap</name>
        <filename>qml-qt3d-render-texturecubemap.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.TextureCubeMapArray</name>
        <filename>qml-qt3d-render-texturecubemaparray.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.TextureImage</name>
        <filename>qml-qt3d-render-textureimage.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.TextureLoader</name>
        <filename>qml-qt3d-render-textureloader.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.TextureRectangle</name>
        <filename>qml-qt3d-render-texturerectangle.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.TorusGeometry</name>
        <filename>qml-qt3d-extras-torusgeometry.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Extras.TorusMesh</name>
        <filename>qml-qt3d-extras-torusmesh.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Core.Transform</name>
        <filename>qml-qt3d-core-transform.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quaternion</type>
            <name>fromAxisAndAngle</name>
            <anchorfile>qml-qt3d-core-transform.html</anchorfile>
            <anchor>fromAxisAndAngle-method</anchor>
            <arglist>( axis,  real angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quaternion</type>
            <name>fromAxisAndAngle</name>
            <anchorfile>qml-qt3d-core-transform.html</anchorfile>
            <anchor>fromAxisAndAngle-method</anchor>
            <arglist>( x,  real y,  real z,  real angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quaternion</type>
            <name>fromAxesAndAngles</name>
            <anchorfile>qml-qt3d-core-transform.html</anchorfile>
            <anchor>fromAxesAndAngles-method</anchor>
            <arglist>( axis1,  real angle1,  vector3d axis2,  real angle2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quaternion</type>
            <name>fromAxesAndAngles</name>
            <anchorfile>qml-qt3d-core-transform.html</anchorfile>
            <anchor>fromAxesAndAngles-method</anchor>
            <arglist>( axis1,  real angle1,  vector3d axis2,  real angle2,  vector3d axis3,  real angle3)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quaternion</type>
            <name>fromEulerAngles</name>
            <anchorfile>qml-qt3d-core-transform.html</anchorfile>
            <anchor>fromEulerAngles-method</anchor>
            <arglist>( eulerAngles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quaternion</type>
            <name>fromEulerAngles</name>
            <anchorfile>qml-qt3d-core-transform.html</anchorfile>
            <anchor>fromEulerAngles-method</anchor>
            <arglist>( pitch,  real yaw,  real roll)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>matrix4x4</type>
            <name>rotateAround</name>
            <anchorfile>qml-qt3d-core-transform.html</anchorfile>
            <anchor>rotateAround-method</anchor>
            <arglist>( point,  real angle,  vector3d axis)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt3D.Animation.VertexBlendAnimation</name>
        <filename>qml-qt3d-animation-vertexblendanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Render.Viewport</name>
        <filename>qml-qt3d-render-viewport.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt3D.Input.WheelEvent</name>
        <filename>qml-qt3d-input-wheelevent.html</filename>
    </compound>
</tagfile>
