<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QAbstractOpenGLFunctions</name>
        <filename>qabstractopenglfunctions.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractOpenGLFunctions</name>
            <anchorfile>qabstractopenglfunctions.html</anchorfile>
            <anchor>dtor.QAbstractOpenGLFunctions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractOpenGLFunctions</name>
            <anchorfile>qabstractopenglfunctions.html</anchorfile>
            <anchor>QAbstractOpenGLFunctions-1</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractTextDocumentLayout</name>
        <filename>qabstracttextdocumentlayout.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTextDocumentLayout</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>QAbstractTextDocumentLayout</anchor>
            <arglist>(QTextDocument *document)</arglist>
        </member>
        <class>QAbstractTextDocumentLayout::Selection</class>
        <class>QAbstractTextDocumentLayout::PaintContext</class>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>draw</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(QPainter *painter, const QAbstractTextDocumentLayout::PaintContext &amp;context) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>hitTest</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>hitTest</anchor>
            <arglist>(const QPointF &amp;point, Qt::HitTestAccuracy accuracy) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>anchorAt</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>anchorAt</anchor>
            <arglist>(const QPointF &amp;position) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>imageAt</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>imageAt</anchor>
            <arglist>(const QPointF &amp;pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFormat</type>
            <name>formatAt</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>formatAt</anchor>
            <arglist>(const QPointF &amp;pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>blockWithMarkerAt</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>blockWithMarkerAt</anchor>
            <arglist>(const QPointF &amp;pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>pageCount</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>pageCount</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSizeF</type>
            <name>documentSize</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>documentSize</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QRectF</type>
            <name>frameBoundingRect</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>frameBoundingRect</anchor>
            <arglist>(QTextFrame *frame) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QRectF</type>
            <name>blockBoundingRect</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>blockBoundingRect</anchor>
            <arglist>(const QTextBlock &amp;block) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaintDevice</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>setPaintDevice</anchor>
            <arglist>(QPaintDevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintDevice *</type>
            <name>paintDevice</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>paintDevice</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>document</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>document</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerHandler</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>registerHandler</anchor>
            <arglist>(int objectType, QObject *component)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterHandler</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>unregisterHandler</anchor>
            <arglist>(int objectType, QObject *component)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextObjectInterface *</type>
            <name>handlerForObject</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>handlerForObject</anchor>
            <arglist>(int objectType) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateBlock</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>updateBlock</anchor>
            <arglist>(const QTextBlock &amp;block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>documentSizeChanged</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>documentSizeChanged</anchor>
            <arglist>(const QSizeF &amp;newSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pageCountChanged</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>pageCountChanged</anchor>
            <arglist>(int newPages)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>documentChanged</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>documentChanged</anchor>
            <arglist>(int position, int charsRemoved, int charsAdded) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeInlineObject</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>resizeInlineObject</anchor>
            <arglist>(QTextInlineObject item, int posInDocument, const QTextFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>positionInlineObject</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>positionInlineObject</anchor>
            <arglist>(QTextInlineObject item, int posInDocument, const QTextFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawInlineObject</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>drawInlineObject</anchor>
            <arglist>(QPainter *painter, const QRectF &amp;rect, QTextInlineObject object, int posInDocument, const QTextFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>format</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>format</anchor>
            <arglist>(int position)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractTextDocumentLayout::PaintContext</name>
        <filename>qabstracttextdocumentlayout-paintcontext.html</filename>
    </compound>
    <compound kind="class">
        <name>QAbstractTextDocumentLayout::Selection</name>
        <filename>qabstracttextdocumentlayout-selection.html</filename>
    </compound>
    <compound kind="class">
        <name>QAbstractUndoItem</name>
        <filename>qabstractundoitem.html</filename>
    </compound>
    <compound kind="class">
        <name>QAccessible</name>
        <filename>qaccessible.html</filename>
        <member kind="enumeration">
            <name>Event</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SoundPlayed</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Alert</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForegroundChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MenuStart</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MenuEnd</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PopupMenuStart</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PopupMenuEnd</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContextHelpStart</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContextHelpEnd</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DragDropStart</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DragDropEnd</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DialogStart</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DialogEnd</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScrollingStart</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScrollingEnd</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MenuCommand</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ActionChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ActiveDescendantChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AttributeChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DocumentContentChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DocumentLoadComplete</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DocumentLoadStopped</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DocumentReload</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HyperlinkEndIndexChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HyperlinkNumberOfAnchorsChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HyperlinkSelectedLinkChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HypertextLinkActivated</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HypertextLinkSelected</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HyperlinkStartIndexChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HypertextChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HypertextNLinksChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ObjectAttributeChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PageChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SectionChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCaptionChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableColumnDescriptionChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableColumnHeaderChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableModelChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableRowDescriptionChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableRowHeaderChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableSummaryChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextAttributeChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextCaretMoved</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextColumnChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextInserted</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextRemoved</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextUpdated</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextSelectionChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VisibleDataChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ObjectCreated</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ObjectDestroyed</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ObjectShow</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ObjectHide</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ObjectReorder</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Focus</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Selection</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectionAdd</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectionRemove</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectionWithin</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StateChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LocationChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NameChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DescriptionChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ValueChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ParentChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HelpChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DefaultActionChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AcceleratorChanged</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidEvent</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Event-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QAccessible::State</class>
        <member kind="enumeration">
            <name>Role</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoRole</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TitleBar</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MenuBar</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScrollBar</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Grip</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sound</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cursor</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Caret</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlertMessage</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Window</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Client</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PopupMenu</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MenuItem</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolTip</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Application</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Document</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pane</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Chart</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dialog</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Border</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Grouping</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Separator</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolBar</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StatusBar</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Table</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColumnHeader</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RowHeader</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Column</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Row</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cell</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Link</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HelpBalloon</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Assistant</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>List</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListItem</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tree</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TreeItem</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PageTab</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PropertyPage</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Indicator</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Graphic</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticText</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EditableText</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Button</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CheckBox</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RadioButton</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ComboBox</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProgressBar</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dial</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HotkeyField</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Slider</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SpinBox</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Canvas</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Animation</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Equation</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ButtonDropDown</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ButtonMenu</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ButtonDropGrid</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Whitespace</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PageTabList</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Clock</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Splitter</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LayeredPane</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Terminal</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Desktop</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Paragraph</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WebDocument</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Section</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Notification</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColorChooser</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Footer</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Form</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Heading</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Note</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ComplementaryContent</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserRole</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Text</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Text-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Name</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Text-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Description</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Text-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Value</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Text-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Help</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Text-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Accelerator</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Text-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DebugDescription</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Text-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserText</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Text-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RelationFlag</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>RelationFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Label</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>RelationFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Labelled</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>RelationFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Controller</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>RelationFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Controlled</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>RelationFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllRelations</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>RelationFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QAccessible::RelationFlag">
            <name>Relation</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>RelationFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>InterfaceType</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TextInterface</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EditableTextInterface</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ValueInterface</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ActionInterface</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImageInterface</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableInterface</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellInterface</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TextBoundaryType</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>TextBoundaryType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CharBoundary</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>TextBoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WordBoundary</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>TextBoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SentenceBoundary</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>TextBoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ParagraphBoundary</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>TextBoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineBoundary</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>TextBoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoBoundary</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>TextBoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>InterfaceFactory</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>InterfaceFactory-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Id</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>Id-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>installFactory</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>installFactory</anchor>
            <arglist>(QAccessible::InterfaceFactory factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>removeFactory</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>removeFactory</anchor>
            <arglist>(QAccessible::InterfaceFactory factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAccessibleInterface *</type>
            <name>queryAccessibleInterface</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>queryAccessibleInterface</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAccessible::Id</type>
            <name>uniqueId</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>uniqueId</anchor>
            <arglist>(QAccessibleInterface *iface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAccessibleInterface *</type>
            <name>accessibleInterface</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>accessibleInterface</anchor>
            <arglist>(QAccessible::Id id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAccessible::Id</type>
            <name>registerAccessibleInterface</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>registerAccessibleInterface</anchor>
            <arglist>(QAccessibleInterface *iface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>deleteAccessibleInterface</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>deleteAccessibleInterface</anchor>
            <arglist>(QAccessible::Id id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateAccessibility</name>
            <anchorfile>qaccessible-obsolete.html</anchorfile>
            <anchor>updateAccessibility</anchor>
            <arglist>(QObject *object, int child, QAccessible::Event reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateAccessibility</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>updateAccessibility-1</anchor>
            <arglist>(QAccessibleEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setRootObject</name>
            <anchorfile>qaccessible.html</anchorfile>
            <anchor>setRootObject</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessible::State</name>
        <filename>qaccessible-state.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>State</name>
            <anchorfile>qaccessible-state.html</anchorfile>
            <anchor>State</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleActionInterface</name>
        <filename>qaccessibleactioninterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAccessibleActionInterface</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>dtor.QAccessibleActionInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QStringList</type>
            <name>actionNames</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>actionNames</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>localizedActionName</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>localizedActionName</anchor>
            <arglist>(const QString &amp;actionName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>localizedActionDescription</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>localizedActionDescription</anchor>
            <arglist>(const QString &amp;actionName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>doAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>doAction</anchor>
            <arglist>(const QString &amp;actionName) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QStringList</type>
            <name>keyBindingsForAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>keyBindingsForAction</anchor>
            <arglist>(const QString &amp;actionName) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QString &amp;</type>
            <name>pressAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>pressAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QString &amp;</type>
            <name>increaseAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>increaseAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QString &amp;</type>
            <name>decreaseAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>decreaseAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QString &amp;</type>
            <name>showMenuAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>showMenuAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QString &amp;</type>
            <name>setFocusAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>setFocusAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QString &amp;</type>
            <name>toggleAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>toggleAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>scrollLeftAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>scrollLeftAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>scrollRightAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>scrollRightAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>scrollUpAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>scrollUpAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>scrollDownAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>scrollDownAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>nextPageAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>nextPageAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>previousPageAction</name>
            <anchorfile>qaccessibleactioninterface.html</anchorfile>
            <anchor>previousPageAction</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleEditableTextInterface</name>
        <filename>qaccessibleeditabletextinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAccessibleEditableTextInterface</name>
            <anchorfile>qaccessibleeditabletextinterface.html</anchorfile>
            <anchor>dtor.QAccessibleEditableTextInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>deleteText</name>
            <anchorfile>qaccessibleeditabletextinterface.html</anchorfile>
            <anchor>deleteText</anchor>
            <arglist>(int startOffset, int endOffset) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>insertText</name>
            <anchorfile>qaccessibleeditabletextinterface.html</anchorfile>
            <anchor>insertText</anchor>
            <arglist>(int offset, const QString &amp;text) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>replaceText</name>
            <anchorfile>qaccessibleeditabletextinterface.html</anchorfile>
            <anchor>replaceText</anchor>
            <arglist>(int startOffset, int endOffset, const QString &amp;text) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleEvent</name>
        <filename>qaccessibleevent.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleEvent</name>
            <anchorfile>qaccessibleevent.html</anchorfile>
            <anchor>QAccessibleEvent-1</anchor>
            <arglist>(QObject *object, QAccessible::Event type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleEvent</name>
            <anchorfile>qaccessibleevent.html</anchorfile>
            <anchor>QAccessibleEvent-2</anchor>
            <arglist>(QAccessibleInterface *interface, QAccessible::Event type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAccessibleEvent</name>
            <anchorfile>qaccessibleevent.html</anchorfile>
            <anchor>dtor.QAccessibleEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAccessible::Event</type>
            <name>type</name>
            <anchorfile>qaccessibleevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>object</name>
            <anchorfile>qaccessibleevent.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChild</name>
            <anchorfile>qaccessibleevent.html</anchorfile>
            <anchor>setChild</anchor>
            <arglist>(int child)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>child</name>
            <anchorfile>qaccessibleevent.html</anchorfile>
            <anchor>child</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>accessibleInterface</name>
            <anchorfile>qaccessibleevent.html</anchorfile>
            <anchor>accessibleInterface</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleInterface</name>
        <filename>qaccessibleinterface.html</filename>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAccessibleInterface</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>dtor.QAccessibleInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>isValid</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QObject *</type>
            <name>object</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QWindow *</type>
            <name>window</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVector&lt;QPair&lt;QAccessibleInterface *, QAccessible::Relation&gt; &gt;</type>
            <name>relations</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>relations</anchor>
            <arglist>(QAccessible::Relation match) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>focusChild</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>focusChild</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>childAt</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>childAt</anchor>
            <arglist>(int x, int y) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>parent</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>child</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>child</anchor>
            <arglist>(int index) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>childCount</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>childCount</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>indexOfChild</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>indexOfChild</anchor>
            <arglist>(const QAccessibleInterface *child) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>text</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>text</anchor>
            <arglist>(QAccessible::Text t) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setText</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(QAccessible::Text t, const QString &amp;text) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QRect</type>
            <name>rect</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QAccessible::Role</type>
            <name>role</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>role</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QAccessible::State</type>
            <name>state</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QColor</type>
            <name>foregroundColor</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>foregroundColor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QColor</type>
            <name>backgroundColor</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>backgroundColor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAccessibleTextInterface *</type>
            <name>textInterface</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>textInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAccessibleValueInterface *</type>
            <name>valueInterface</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>valueInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAccessibleActionInterface *</type>
            <name>actionInterface</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>actionInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAccessibleTableInterface *</type>
            <name>tableInterface</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>tableInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAccessibleTableCellInterface *</type>
            <name>tableCellInterface</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>tableCellInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void *</type>
            <name>interface_cast</name>
            <anchorfile>qaccessibleinterface.html</anchorfile>
            <anchor>interface_cast</anchor>
            <arglist>(QAccessible::InterfaceType type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleObject</name>
        <filename>qaccessibleobject.html</filename>
        <base>QAccessibleInterface</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleObject</name>
            <anchorfile>qaccessibleobject.html</anchorfile>
            <anchor>QAccessibleObject</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isValid</name>
            <anchorfile>qaccessibleobject.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QObject *</type>
            <name>object</name>
            <anchorfile>qaccessibleobject.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>rect</name>
            <anchorfile>qaccessibleobject.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setText</name>
            <anchorfile>qaccessibleobject.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(QAccessible::Text t, const QString &amp;text) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>childAt</name>
            <anchorfile>qaccessibleobject.html</anchorfile>
            <anchor>childAt</anchor>
            <arglist>(int x, int y) const const override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAccessibleObject</name>
            <anchorfile>qaccessibleobject.html</anchorfile>
            <anchor>dtor.QAccessibleObject</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessiblePlugin</name>
        <filename>qaccessibleplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessiblePlugin</name>
            <anchorfile>qaccessibleplugin.html</anchorfile>
            <anchor>QAccessiblePlugin</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAccessiblePlugin</name>
            <anchorfile>qaccessibleplugin.html</anchorfile>
            <anchor>dtor.QAccessiblePlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>create</name>
            <anchorfile>qaccessibleplugin.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QString &amp;key, QObject *object) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleStateChangeEvent</name>
        <filename>qaccessiblestatechangeevent.html</filename>
        <base>QAccessibleEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleStateChangeEvent</name>
            <anchorfile>qaccessiblestatechangeevent.html</anchorfile>
            <anchor>QAccessibleStateChangeEvent</anchor>
            <arglist>(QObject *object, QAccessible::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleStateChangeEvent</name>
            <anchorfile>qaccessiblestatechangeevent.html</anchorfile>
            <anchor>QAccessibleStateChangeEvent-1</anchor>
            <arglist>(QAccessibleInterface *iface, QAccessible::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAccessible::State</type>
            <name>changedStates</name>
            <anchorfile>qaccessiblestatechangeevent.html</anchorfile>
            <anchor>changedStates</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleTableCellInterface</name>
        <filename>qaccessibletablecellinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAccessibleTableCellInterface</name>
            <anchorfile>qaccessibletablecellinterface.html</anchorfile>
            <anchor>dtor.QAccessibleTableCellInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>isSelected</name>
            <anchorfile>qaccessibletablecellinterface.html</anchorfile>
            <anchor>isSelected</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QList&lt;QAccessibleInterface *&gt;</type>
            <name>columnHeaderCells</name>
            <anchorfile>qaccessibletablecellinterface.html</anchorfile>
            <anchor>columnHeaderCells</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QList&lt;QAccessibleInterface *&gt;</type>
            <name>rowHeaderCells</name>
            <anchorfile>qaccessibletablecellinterface.html</anchorfile>
            <anchor>rowHeaderCells</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>columnIndex</name>
            <anchorfile>qaccessibletablecellinterface.html</anchorfile>
            <anchor>columnIndex</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>rowIndex</name>
            <anchorfile>qaccessibletablecellinterface.html</anchorfile>
            <anchor>rowIndex</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>columnExtent</name>
            <anchorfile>qaccessibletablecellinterface.html</anchorfile>
            <anchor>columnExtent</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>rowExtent</name>
            <anchorfile>qaccessibletablecellinterface.html</anchorfile>
            <anchor>rowExtent</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>table</name>
            <anchorfile>qaccessibletablecellinterface.html</anchorfile>
            <anchor>table</anchor>
            <arglist>() const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleTableInterface</name>
        <filename>qaccessibletableinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAccessibleTableInterface</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>dtor.QAccessibleTableInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>caption</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>caption</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>summary</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>summary</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QAccessibleInterface *</type>
            <name>cellAt</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>cellAt</anchor>
            <arglist>(int row, int column) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>selectedCellCount</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>selectedCellCount</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QList&lt;QAccessibleInterface *&gt;</type>
            <name>selectedCells</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>selectedCells</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>columnDescription</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>columnDescription</anchor>
            <arglist>(int column) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>rowDescription</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>rowDescription</anchor>
            <arglist>(int row) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>selectedColumnCount</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>selectedColumnCount</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>selectedRowCount</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>selectedRowCount</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QList&lt;int&gt;</type>
            <name>selectedColumns</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>selectedColumns</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QList&lt;int&gt;</type>
            <name>selectedRows</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>selectedRows</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>isColumnSelected</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>isColumnSelected</anchor>
            <arglist>(int column) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>isRowSelected</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>isRowSelected</anchor>
            <arglist>(int row) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>selectRow</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>selectRow</anchor>
            <arglist>(int row) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>selectColumn</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>selectColumn</anchor>
            <arglist>(int column) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>unselectRow</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>unselectRow</anchor>
            <arglist>(int row) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>unselectColumn</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>unselectColumn</anchor>
            <arglist>(int column) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>modelChange</name>
            <anchorfile>qaccessibletableinterface.html</anchorfile>
            <anchor>modelChange</anchor>
            <arglist>(QAccessibleTableModelChangeEvent *event) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleTableModelChangeEvent</name>
        <filename>qaccessibletablemodelchangeevent.html</filename>
        <base>QAccessibleEvent</base>
        <member kind="enumeration">
            <name>ModelChangeType</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>ModelChangeType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ModelReset</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>ModelChangeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DataChanged</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>ModelChangeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RowsInserted</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>ModelChangeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColumnsInserted</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>ModelChangeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RowsRemoved</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>ModelChangeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColumnsRemoved</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>ModelChangeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleTableModelChangeEvent</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>QAccessibleTableModelChangeEvent</anchor>
            <arglist>(QObject *object, QAccessibleTableModelChangeEvent::ModelChangeType changeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleTableModelChangeEvent</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>QAccessibleTableModelChangeEvent-1</anchor>
            <arglist>(QAccessibleInterface *iface, QAccessibleTableModelChangeEvent::ModelChangeType changeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModelChangeType</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>setModelChangeType</anchor>
            <arglist>(QAccessibleTableModelChangeEvent::ModelChangeType changeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAccessibleTableModelChangeEvent::ModelChangeType</type>
            <name>modelChangeType</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>modelChangeType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirstRow</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>setFirstRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirstColumn</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>setFirstColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLastRow</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>setLastRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLastColumn</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>setLastColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>firstRow</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>firstRow</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>firstColumn</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>firstColumn</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastRow</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>lastRow</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastColumn</name>
            <anchorfile>qaccessibletablemodelchangeevent.html</anchorfile>
            <anchor>lastColumn</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleTextCursorEvent</name>
        <filename>qaccessibletextcursorevent.html</filename>
        <base>QAccessibleEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleTextCursorEvent</name>
            <anchorfile>qaccessibletextcursorevent.html</anchorfile>
            <anchor>QAccessibleTextCursorEvent</anchor>
            <arglist>(QObject *object, int cursorPos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleTextCursorEvent</name>
            <anchorfile>qaccessibletextcursorevent.html</anchorfile>
            <anchor>QAccessibleTextCursorEvent-1</anchor>
            <arglist>(QAccessibleInterface *iface, int cursorPos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursorPosition</name>
            <anchorfile>qaccessibletextcursorevent.html</anchorfile>
            <anchor>setCursorPosition</anchor>
            <arglist>(int position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cursorPosition</name>
            <anchorfile>qaccessibletextcursorevent.html</anchorfile>
            <anchor>cursorPosition</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleTextInsertEvent</name>
        <filename>qaccessibletextinsertevent.html</filename>
        <base>QAccessibleTextCursorEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleTextInsertEvent</name>
            <anchorfile>qaccessibletextinsertevent.html</anchorfile>
            <anchor>QAccessibleTextInsertEvent</anchor>
            <arglist>(QObject *object, int position, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleTextInsertEvent</name>
            <anchorfile>qaccessibletextinsertevent.html</anchorfile>
            <anchor>QAccessibleTextInsertEvent-1</anchor>
            <arglist>(QAccessibleInterface *iface, int position, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>textInserted</name>
            <anchorfile>qaccessibletextinsertevent.html</anchorfile>
            <anchor>textInserted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>changePosition</name>
            <anchorfile>qaccessibletextinsertevent.html</anchorfile>
            <anchor>changePosition</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleTextInterface</name>
        <filename>qaccessibletextinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAccessibleTextInterface</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>dtor.QAccessibleTextInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>selection</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>selection</anchor>
            <arglist>(int selectionIndex, int *startOffset, int *endOffset) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>selectionCount</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>selectionCount</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>addSelection</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>addSelection</anchor>
            <arglist>(int startOffset, int endOffset) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>removeSelection</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>removeSelection</anchor>
            <arglist>(int selectionIndex) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setSelection</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>setSelection</anchor>
            <arglist>(int selectionIndex, int startOffset, int endOffset) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>cursorPosition</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>cursorPosition</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setCursorPosition</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>setCursorPosition</anchor>
            <arglist>(int position) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>text</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>text</anchor>
            <arglist>(int startOffset, int endOffset) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>textBeforeOffset</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>textBeforeOffset</anchor>
            <arglist>(int offset, QAccessible::TextBoundaryType boundaryType, int *startOffset, int *endOffset) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>textAfterOffset</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>textAfterOffset</anchor>
            <arglist>(int offset, QAccessible::TextBoundaryType boundaryType, int *startOffset, int *endOffset) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>textAtOffset</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>textAtOffset</anchor>
            <arglist>(int offset, QAccessible::TextBoundaryType boundaryType, int *startOffset, int *endOffset) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>characterCount</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>characterCount</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QRect</type>
            <name>characterRect</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>characterRect</anchor>
            <arglist>(int offset) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>offsetAtPoint</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>offsetAtPoint</anchor>
            <arglist>(const QPoint &amp;point) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>scrollToSubstring</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>scrollToSubstring</anchor>
            <arglist>(int startIndex, int endIndex) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>attributes</name>
            <anchorfile>qaccessibletextinterface.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>(int offset, int *startOffset, int *endOffset) const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleTextRemoveEvent</name>
        <filename>qaccessibletextremoveevent.html</filename>
        <base>QAccessibleTextCursorEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleTextRemoveEvent</name>
            <anchorfile>qaccessibletextremoveevent.html</anchorfile>
            <anchor>QAccessibleTextRemoveEvent</anchor>
            <arglist>(QObject *object, int position, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleTextRemoveEvent</name>
            <anchorfile>qaccessibletextremoveevent.html</anchorfile>
            <anchor>QAccessibleTextRemoveEvent-1</anchor>
            <arglist>(QAccessibleInterface *iface, int position, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>textRemoved</name>
            <anchorfile>qaccessibletextremoveevent.html</anchorfile>
            <anchor>textRemoved</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>changePosition</name>
            <anchorfile>qaccessibletextremoveevent.html</anchorfile>
            <anchor>changePosition</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleTextSelectionEvent</name>
        <filename>qaccessibletextselectionevent.html</filename>
        <base>QAccessibleTextCursorEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleTextSelectionEvent</name>
            <anchorfile>qaccessibletextselectionevent.html</anchorfile>
            <anchor>QAccessibleTextSelectionEvent</anchor>
            <arglist>(QObject *object, int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleTextSelectionEvent</name>
            <anchorfile>qaccessibletextselectionevent.html</anchorfile>
            <anchor>QAccessibleTextSelectionEvent-1</anchor>
            <arglist>(QAccessibleInterface *iface, int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelection</name>
            <anchorfile>qaccessibletextselectionevent.html</anchorfile>
            <anchor>setSelection</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>selectionStart</name>
            <anchorfile>qaccessibletextselectionevent.html</anchorfile>
            <anchor>selectionStart</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>selectionEnd</name>
            <anchorfile>qaccessibletextselectionevent.html</anchorfile>
            <anchor>selectionEnd</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleTextUpdateEvent</name>
        <filename>qaccessibletextupdateevent.html</filename>
        <base>QAccessibleTextCursorEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleTextUpdateEvent</name>
            <anchorfile>qaccessibletextupdateevent.html</anchorfile>
            <anchor>QAccessibleTextUpdateEvent</anchor>
            <arglist>(QObject *object, int position, const QString &amp;oldText, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleTextUpdateEvent</name>
            <anchorfile>qaccessibletextupdateevent.html</anchorfile>
            <anchor>QAccessibleTextUpdateEvent-1</anchor>
            <arglist>(QAccessibleInterface *iface, int position, const QString &amp;oldText, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>textRemoved</name>
            <anchorfile>qaccessibletextupdateevent.html</anchorfile>
            <anchor>textRemoved</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>textInserted</name>
            <anchorfile>qaccessibletextupdateevent.html</anchorfile>
            <anchor>textInserted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>changePosition</name>
            <anchorfile>qaccessibletextupdateevent.html</anchorfile>
            <anchor>changePosition</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleValueChangeEvent</name>
        <filename>qaccessiblevaluechangeevent.html</filename>
        <base>QAccessibleEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleValueChangeEvent</name>
            <anchorfile>qaccessiblevaluechangeevent.html</anchorfile>
            <anchor>QAccessibleValueChangeEvent</anchor>
            <arglist>(QObject *object, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccessibleValueChangeEvent</name>
            <anchorfile>qaccessiblevaluechangeevent.html</anchorfile>
            <anchor>QAccessibleValueChangeEvent-1</anchor>
            <arglist>(QAccessibleInterface *iface, const QVariant &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qaccessiblevaluechangeevent.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qaccessiblevaluechangeevent.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccessibleValueInterface</name>
        <filename>qaccessiblevalueinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAccessibleValueInterface</name>
            <anchorfile>qaccessiblevalueinterface.html</anchorfile>
            <anchor>dtor.QAccessibleValueInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVariant</type>
            <name>currentValue</name>
            <anchorfile>qaccessiblevalueinterface.html</anchorfile>
            <anchor>currentValue</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setCurrentValue</name>
            <anchorfile>qaccessiblevalueinterface.html</anchorfile>
            <anchor>setCurrentValue</anchor>
            <arglist>(const QVariant &amp;value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVariant</type>
            <name>maximumValue</name>
            <anchorfile>qaccessiblevalueinterface.html</anchorfile>
            <anchor>maximumValue</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVariant</type>
            <name>minimumValue</name>
            <anchorfile>qaccessiblevalueinterface.html</anchorfile>
            <anchor>minimumValue</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVariant</type>
            <name>minimumStepSize</name>
            <anchorfile>qaccessiblevalueinterface.html</anchorfile>
            <anchor>minimumStepSize</anchor>
            <arglist>() const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QActionEvent</name>
        <filename>qactionevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QActionEvent</name>
            <anchorfile>qactionevent.html</anchorfile>
            <anchor>QActionEvent</anchor>
            <arglist>(int type, QAction *action, QAction *before)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>action</name>
            <anchorfile>qactionevent.html</anchorfile>
            <anchor>action</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>before</name>
            <anchorfile>qactionevent.html</anchorfile>
            <anchor>before</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QApplicationStateChangeEvent</name>
        <filename>qapplicationstatechangeevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QApplicationStateChangeEvent</name>
            <anchorfile>qapplicationstatechangeevent.html</anchorfile>
            <anchor>QApplicationStateChangeEvent</anchor>
            <arglist>(Qt::ApplicationState applicationState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ApplicationState</type>
            <name>applicationState</name>
            <anchorfile>qapplicationstatechangeevent.html</anchorfile>
            <anchor>applicationState</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBackingStore</name>
        <filename>qbackingstore.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBackingStore</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>QBackingStore</anchor>
            <arglist>(QWindow *window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBackingStore</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>dtor.QBackingStore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWindow *</type>
            <name>window</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintDevice *</type>
            <name>paintDevice</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>paintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>flush</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>(const QRegion &amp;region, QWindow *window, const QPoint &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>scroll</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>scroll</anchor>
            <arglist>(const QRegion &amp;area, int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginPaint</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>beginPaint</anchor>
            <arglist>(const QRegion &amp;region)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endPaint</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>endPaint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStaticContents</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>setStaticContents</anchor>
            <arglist>(const QRegion &amp;region)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>staticContents</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>staticContents</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasStaticContents</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>hasStaticContents</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlatformBackingStore *</type>
            <name>handle</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBitmap</name>
        <filename>qbitmap.html</filename>
        <base>QPixmap</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitmap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>QBitmap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitmap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>QBitmap-1</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitmap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>QBitmap-2</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitmap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>QBitmap-3</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitmap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>QBitmap-4</anchor>
            <arglist>(const QString &amp;fileName, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBitmap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>dtor.QBitmap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap &amp;</type>
            <name>operator=</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QBitmap &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QBitmap</type>
            <name>fromImage</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>fromImage</anchor>
            <arglist>(const QImage &amp;image, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QBitmap</type>
            <name>fromImage</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>fromImage-1</anchor>
            <arglist>(QImage &amp;&amp;image, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QBitmap</type>
            <name>fromData</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>fromData</anchor>
            <arglist>(const QSize &amp;size, const uchar *bits, QImage::Format monoFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap</type>
            <name>transformed</name>
            <anchorfile>qbitmap-obsolete.html</anchorfile>
            <anchor>transformed-1</anchor>
            <arglist>(const QMatrix &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap</type>
            <name>transformed</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>transformed</anchor>
            <arglist>(const QTransform &amp;matrix) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBrush</name>
        <filename>qbrush.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-1</anchor>
            <arglist>(Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-2</anchor>
            <arglist>(const QColor &amp;color, Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-3</anchor>
            <arglist>(Qt::GlobalColor color, Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-4</anchor>
            <arglist>(const QColor &amp;color, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-5</anchor>
            <arglist>(Qt::GlobalColor color, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-6</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-7</anchor>
            <arglist>(const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-8</anchor>
            <arglist>(const QBrush &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-9</anchor>
            <arglist>(const QGradient &amp;gradient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>dtor.QBrush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush &amp;</type>
            <name>operator=</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush &amp;</type>
            <name>operator=</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QBrush &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QBrush &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::BrushStyle</type>
            <name>style</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyle</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setStyle</anchor>
            <arglist>(Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix &amp;</type>
            <name>matrix</name>
            <anchorfile>qbrush-obsolete.html</anchorfile>
            <anchor>matrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qbrush-obsolete.html</anchorfile>
            <anchor>setMatrix</anchor>
            <arglist>(const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>transform</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransform</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setTransform</anchor>
            <arglist>(const QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>texture</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setTexture</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>textureImage</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>textureImage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureImage</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setTextureImage</anchor>
            <arglist>(const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QColor &amp;</type>
            <name>color</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>color</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setColor-1</anchor>
            <arglist>(Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QGradient *</type>
            <name>gradient</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>gradient</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOpaque</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>isOpaque</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QBrush &amp;brush) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QBrush &amp;brush) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>operator-lt-lt-25</anchor>
            <arglist>(QDataStream &amp;stream, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QBrush &amp;brush)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QClipboard</name>
        <filename>qclipboard.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>Mode</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>Mode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Clipboard</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Selection</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FindBuffer</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastMode</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>(QClipboard::Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsSelection</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>supportsSelection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsFindBuffer</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>supportsFindBuffer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ownsSelection</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>ownsSelection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ownsClipboard</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>ownsClipboard</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ownsFindBuffer</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>ownsFindBuffer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>text</anchor>
            <arglist>(QClipboard::Mode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>text-1</anchor>
            <arglist>(QString &amp;subtype, QClipboard::Mode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text, QClipboard::Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(QClipboard::Mode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMimeData</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>setMimeData</anchor>
            <arglist>(QMimeData *src, QClipboard::Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>image</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>image</anchor>
            <arglist>(QClipboard::Mode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>(QClipboard::Mode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImage</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>setImage</anchor>
            <arglist>(const QImage &amp;image, QClipboard::Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixmap</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>setPixmap</anchor>
            <arglist>(const QPixmap &amp;pixmap, QClipboard::Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>changed</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>changed</anchor>
            <arglist>(QClipboard::Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectionChanged</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>selectionChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>findBufferChanged</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>findBufferChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCloseEvent</name>
        <filename>qcloseevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCloseEvent</name>
            <anchorfile>qcloseevent.html</anchorfile>
            <anchor>QCloseEvent</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QColor</name>
        <filename>qcolor.html</filename>
        <member kind="enumeration">
            <name>Spec</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>Spec-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Invalid</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>Spec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Rgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>Spec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Hsv</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>Spec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cmyk</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>Spec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Hsl</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>Spec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtendedRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>Spec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>NameFormat</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>NameFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>HexRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>NameFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HexArgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>NameFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-1</anchor>
            <arglist>(Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-2</anchor>
            <arglist>(int r, int g, int b, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-3</anchor>
            <arglist>(QRgb color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-4</anchor>
            <arglist>(QRgba64 rgba64)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-5</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-7</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-8</anchor>
            <arglist>(QLatin1String name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor &amp;</type>
            <name>operator=</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor &amp;</type>
            <name>operator=</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>name-1</anchor>
            <arglist>(QColor::NameFormat format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNamedColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setNamedColor</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNamedColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setNamedColor-1</anchor>
            <arglist>(QStringView name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNamedColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setNamedColor-2</anchor>
            <arglist>(QLatin1String name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>colorNames</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>colorNames</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor::Spec</type>
            <name>spec</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>spec</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>alpha</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>alpha</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlpha</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setAlpha</anchor>
            <arglist>(int alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>alphaF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>alphaF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setAlphaF</anchor>
            <arglist>(qreal alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>red</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>red</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>green</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>green</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blue</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>blue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRed</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRed</anchor>
            <arglist>(int red)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGreen</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setGreen</anchor>
            <arglist>(int green)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlue</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setBlue</anchor>
            <arglist>(int blue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>redF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>redF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>greenF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>greenF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>blueF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>blueF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRedF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRedF</anchor>
            <arglist>(qreal red)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGreenF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setGreenF</anchor>
            <arglist>(qreal green)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlueF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setBlueF</anchor>
            <arglist>(qreal blue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getRgb</anchor>
            <arglist>(int *r, int *g, int *b, int *a) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRgb</anchor>
            <arglist>(int r, int g, int b, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getRgbF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getRgbF</anchor>
            <arglist>(qreal *r, qreal *g, qreal *b, qreal *a) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRgbF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRgbF</anchor>
            <arglist>(qreal r, qreal g, qreal b, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgba64</type>
            <name>rgba64</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>rgba64</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRgba64</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRgba64</anchor>
            <arglist>(QRgba64 rgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>rgba</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>rgba</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRgba</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRgba</anchor>
            <arglist>(QRgb rgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>rgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>rgb</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRgb-1</anchor>
            <arglist>(QRgb rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hue</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>saturation</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>saturation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hsvHue</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hsvHue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hsvSaturation</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hsvSaturation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>value</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hueF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hueF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>saturationF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>saturationF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hsvHueF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hsvHueF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hsvSaturationF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hsvSaturationF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>valueF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>valueF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getHsv</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getHsv</anchor>
            <arglist>(int *h, int *s, int *v, int *a) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHsv</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setHsv</anchor>
            <arglist>(int h, int s, int v, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getHsvF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getHsvF</anchor>
            <arglist>(qreal *h, qreal *s, qreal *v, qreal *a) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHsvF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setHsvF</anchor>
            <arglist>(qreal h, qreal s, qreal v, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cyan</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>cyan</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>magenta</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>magenta</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>yellow</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>yellow</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>black</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>black</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>cyanF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>cyanF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>magentaF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>magentaF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>yellowF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>yellowF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>blackF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>blackF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getCmyk</name>
            <anchorfile>qcolor-obsolete.html</anchorfile>
            <anchor>getCmyk</anchor>
            <arglist>(int *c, int *m, int *y, int *k, int *a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getCmyk</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getCmyk-1</anchor>
            <arglist>(int *c, int *m, int *y, int *k, int *a) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCmyk</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setCmyk</anchor>
            <arglist>(int c, int m, int y, int k, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getCmykF</name>
            <anchorfile>qcolor-obsolete.html</anchorfile>
            <anchor>getCmykF</anchor>
            <arglist>(qreal *c, qreal *m, qreal *y, qreal *k, qreal *a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getCmykF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getCmykF-1</anchor>
            <arglist>(qreal *c, qreal *m, qreal *y, qreal *k, qreal *a) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCmykF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setCmykF</anchor>
            <arglist>(qreal c, qreal m, qreal y, qreal k, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hslHue</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hslHue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hslSaturation</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hslSaturation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lightness</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>lightness</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hslHueF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hslHueF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hslSaturationF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hslSaturationF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lightnessF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>lightnessF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getHsl</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getHsl</anchor>
            <arglist>(int *h, int *s, int *l, int *a) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHsl</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setHsl</anchor>
            <arglist>(int h, int s, int l, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getHslF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getHslF</anchor>
            <arglist>(qreal *h, qreal *s, qreal *l, qreal *a) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHslF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setHslF</anchor>
            <arglist>(qreal h, qreal s, qreal l, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>toRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>toRgb</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>toHsv</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>toHsv</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>toCmyk</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>toCmyk</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>toHsl</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>toHsl</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>toExtendedRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>toExtendedRgb</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>convertTo</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>convertTo</anchor>
            <arglist>(QColor::Spec colorSpec) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromRgb</anchor>
            <arglist>(QRgb rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromRgba</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromRgba</anchor>
            <arglist>(QRgb rgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromRgb-1</anchor>
            <arglist>(int r, int g, int b, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromRgbF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromRgbF</anchor>
            <arglist>(qreal r, qreal g, qreal b, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromRgba64</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromRgba64</anchor>
            <arglist>(ushort r, ushort g, ushort b, ushort a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromRgba64</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromRgba64-1</anchor>
            <arglist>(QRgba64 rgba64)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromHsv</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromHsv</anchor>
            <arglist>(int h, int s, int v, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromHsvF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromHsvF</anchor>
            <arglist>(qreal h, qreal s, qreal v, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromCmyk</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromCmyk</anchor>
            <arglist>(int c, int m, int y, int k, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromCmykF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromCmykF</anchor>
            <arglist>(qreal c, qreal m, qreal y, qreal k, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromHsl</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromHsl</anchor>
            <arglist>(int h, int s, int l, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromHslF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromHslF</anchor>
            <arglist>(qreal h, qreal s, qreal l, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>light</name>
            <anchorfile>qcolor-obsolete.html</anchorfile>
            <anchor>light</anchor>
            <arglist>(int factor) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>dark</name>
            <anchorfile>qcolor-obsolete.html</anchorfile>
            <anchor>dark</anchor>
            <arglist>(int factor) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>lighter</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>lighter</anchor>
            <arglist>(int factor) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>darker</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>darker</anchor>
            <arglist>(int factor) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QColor &amp;color) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QColor &amp;color) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isValidColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>isValidColor</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isValidColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>isValidColor-1</anchor>
            <arglist>(QStringView name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isValidColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>isValidColor-2</anchor>
            <arglist>(QLatin1String name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDataStream &amp;stream, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qRed</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qRed</anchor>
            <arglist>(QRgb rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qGreen</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qGreen</anchor>
            <arglist>(QRgb rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qBlue</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qBlue</anchor>
            <arglist>(QRgb rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qAlpha</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qAlpha</anchor>
            <arglist>(QRgb rgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>qRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qRgb</anchor>
            <arglist>(int r, int g, int b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>qRgba</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qRgba</anchor>
            <arglist>(int r, int g, int b, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qGray</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qGray</anchor>
            <arglist>(int r, int g, int b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qGray</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qGray-1</anchor>
            <arglist>(QRgb rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>qPremultiply</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qPremultiply</anchor>
            <arglist>(QRgb rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>qUnpremultiply</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qUnpremultiply</anchor>
            <arglist>(QRgb rgb)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QRgb-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgba64</type>
            <name>qRgba64</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qRgba64</anchor>
            <arglist>(quint16 r, quint16 g, quint16 b, quint16 a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgba64</type>
            <name>qRgba64</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qRgba64-1</anchor>
            <arglist>(quint64 c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgba64</type>
            <name>qPremultiply</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qPremultiply-1</anchor>
            <arglist>(QRgba64 rgba64)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgba64</type>
            <name>qUnpremultiply</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qUnpremultiply-1</anchor>
            <arglist>(QRgba64 rgba64)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qRed</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qRed-1</anchor>
            <arglist>(QRgba64 rgba64)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qGreen</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qGreen-1</anchor>
            <arglist>(QRgba64 rgba64)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qBlue</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qBlue-1</anchor>
            <arglist>(QRgba64 rgba64)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qAlpha</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>qAlpha-1</anchor>
            <arglist>(QRgba64 rgba64)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QColorConstants</name>
        <filename>qcolorconstants.html</filename>
    </compound>
    <compound kind="class">
        <name>QColorDialogOptions</name>
        <filename>qcolordialogoptions.html</filename>
        <member kind="typedef" type="QColorDialogOptions::ColorDialogOption">
            <name>ColorDialogOptions</name>
            <anchorfile>qcolordialogoptions.html</anchorfile>
            <anchor>ColorDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QColorSpace</name>
        <filename>qcolorspace.html</filename>
        <member kind="enumeration">
            <name>NamedColorSpace</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>NamedColorSpace-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SRgb</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>NamedColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRgbLinear</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>NamedColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AdobeRgb</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>NamedColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DisplayP3</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>NamedColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProPhotoRgb</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>NamedColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Primaries</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>Primaries-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Custom</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>Primaries-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRgb</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>Primaries-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AdobeRgb</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>Primaries-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DciP3D65</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>Primaries-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProPhotoRgb</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>Primaries-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TransferFunction</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>TransferFunction-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Custom</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>TransferFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Linear</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>TransferFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Gamma</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>TransferFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRgb</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>TransferFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProPhotoRgb</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>TransferFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColorSpace</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>QColorSpace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColorSpace</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>QColorSpace-1</anchor>
            <arglist>(QColorSpace::NamedColorSpace namedColorSpace)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColorSpace</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>QColorSpace-2</anchor>
            <arglist>(QColorSpace::Primaries primaries, QColorSpace::TransferFunction fun, float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColorSpace</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>QColorSpace-3</anchor>
            <arglist>(QColorSpace::Primaries primaries, float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColorSpace</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>QColorSpace-4</anchor>
            <arglist>(const QPointF &amp;whitePoint, const QPointF &amp;redPoint, const QPointF &amp;greenPoint, const QPointF &amp;bluePoint, QColorSpace::TransferFunction fun, float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QColorSpace &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColorSpace::Primaries</type>
            <name>primaries</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>primaries</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColorSpace::TransferFunction</type>
            <name>transferFunction</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>transferFunction</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>gamma</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>gamma</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransferFunction</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>setTransferFunction</anchor>
            <arglist>(QColorSpace::TransferFunction transferFunction, float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColorSpace</type>
            <name>withTransferFunction</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>withTransferFunction</anchor>
            <arglist>(QColorSpace::TransferFunction transferFunction, float gamma) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrimaries</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>setPrimaries</anchor>
            <arglist>(QColorSpace::Primaries primariesId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrimaries</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>setPrimaries-1</anchor>
            <arglist>(const QPointF &amp;whitePoint, const QPointF &amp;redPoint, const QPointF &amp;greenPoint, const QPointF &amp;bluePoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColorSpace</type>
            <name>fromIccProfile</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>fromIccProfile</anchor>
            <arglist>(const QByteArray &amp;iccProfile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>iccProfile</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>iccProfile</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColorTransform</type>
            <name>transformationToColorSpace</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>transformationToColorSpace</anchor>
            <arglist>(const QColorSpace &amp;colorspace) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>operator-eq-eq-4</anchor>
            <arglist>(const QColorSpace &amp;colorSpace1, const QColorSpace &amp;colorSpace2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>operator-not-eq-6</anchor>
            <arglist>(const QColorSpace &amp;colorSpace1, const QColorSpace &amp;colorSpace2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QColorSpace &amp;colorSpace)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qcolorspace.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QColorSpace &amp;colorSpace)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QColorTransform</name>
        <filename>qcolortransform.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>map</name>
            <anchorfile>qcolortransform.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(QRgb argb) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgba64</type>
            <name>map</name>
            <anchorfile>qcolortransform.html</anchorfile>
            <anchor>map-1</anchor>
            <arglist>(QRgba64 rgba64) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>map</name>
            <anchorfile>qcolortransform.html</anchorfile>
            <anchor>map-2</anchor>
            <arglist>(const QColor &amp;color) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QConicalGradient</name>
        <filename>qconicalgradient.html</filename>
        <base>QGradient</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QConicalGradient</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>QConicalGradient</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QConicalGradient</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>QConicalGradient-1</anchor>
            <arglist>(const QPointF &amp;center, qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QConicalGradient</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>QConicalGradient-2</anchor>
            <arglist>(qreal cx, qreal cy, qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>center</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>setCenter</anchor>
            <arglist>(const QPointF &amp;center)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>setCenter-1</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>angle</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>angle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAngle</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>setAngle</anchor>
            <arglist>(qreal angle)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContextMenuEvent</name>
        <filename>qcontextmenuevent.html</filename>
        <base>QInputEvent</base>
        <member kind="enumeration">
            <name>Reason</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>Reason-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Mouse</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>Reason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Keyboard</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>Reason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Other</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>Reason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContextMenuEvent</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>QContextMenuEvent</anchor>
            <arglist>(QContextMenuEvent::Reason reason, const QPoint &amp;pos, const QPoint &amp;globalPos, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContextMenuEvent</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>QContextMenuEvent-1</anchor>
            <arglist>(QContextMenuEvent::Reason reason, const QPoint &amp;pos, const QPoint &amp;globalPos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContextMenuEvent</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>QContextMenuEvent-2</anchor>
            <arglist>(QContextMenuEvent::Reason reason, const QPoint &amp;pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalX</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>globalX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalY</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>globalY</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint &amp;</type>
            <name>pos</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint &amp;</type>
            <name>globalPos</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContextMenuEvent::Reason</type>
            <name>reason</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>reason</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCursor</name>
        <filename>qcursor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>QCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>QCursor-1</anchor>
            <arglist>(Qt::CursorShape shape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>QCursor-2</anchor>
            <arglist>(const QBitmap &amp;bitmap, const QBitmap &amp;mask, int hotX, int hotY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>QCursor-3</anchor>
            <arglist>(const QPixmap &amp;pixmap, int hotX, int hotY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>QCursor-4</anchor>
            <arglist>(const QCursor &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>dtor.QCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCursor &amp;</type>
            <name>operator=</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCursor &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>QCursor-5</anchor>
            <arglist>(QCursor &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCursor &amp;</type>
            <name>operator=</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QCursor &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCursor &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CursorShape</type>
            <name>shape</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShape</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>setShape</anchor>
            <arglist>(Qt::CursorShape shape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBitmap *</type>
            <name>bitmap</name>
            <anchorfile>qcursor-obsolete.html</anchorfile>
            <anchor>bitmap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBitmap *</type>
            <name>mask</name>
            <anchorfile>qcursor-obsolete.html</anchorfile>
            <anchor>mask</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap</type>
            <name>bitmap</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>bitmap-1</anchor>
            <arglist>(Qt::ReturnByValueConstant ) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap</type>
            <name>mask</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>mask-1</anchor>
            <arglist>(Qt::ReturnByValueConstant ) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>hotSpot</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>hotSpot</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>pos-1</anchor>
            <arglist>(const QScreen *screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPos</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>setPos</anchor>
            <arglist>(int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPos</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>setPos-1</anchor>
            <arglist>(QScreen *screen, int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPos</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>setPos-2</anchor>
            <arglist>(const QPoint &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPos</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>setPos-3</anchor>
            <arglist>(QScreen *screen, const QPoint &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>operator-eq-eq-3</anchor>
            <arglist>(const QCursor &amp;lhs, const QCursor &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>operator-not-eq-5</anchor>
            <arglist>(const QCursor &amp;lhs, const QCursor &amp;rhs)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDesktopServices</name>
        <filename>qdesktopservices.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>openUrl</name>
            <anchorfile>qdesktopservices.html</anchorfile>
            <anchor>openUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setUrlHandler</name>
            <anchorfile>qdesktopservices.html</anchorfile>
            <anchor>setUrlHandler</anchor>
            <arglist>(const QString &amp;scheme, QObject *receiver, const char *method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>unsetUrlHandler</name>
            <anchorfile>qdesktopservices.html</anchorfile>
            <anchor>unsetUrlHandler</anchor>
            <arglist>(const QString &amp;scheme)</arglist>
        </member>
        <member kind="enumeration">
            <name>StandardLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DesktopLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DocumentsLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontsLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationsLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MusicLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoviesLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PicturesLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TempLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HomeLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DataLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CacheLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>storageLocation</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>storageLocation</anchor>
            <arglist>(QDesktopServices::StandardLocation type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>displayName</name>
            <anchorfile>qdesktopservices-obsolete.html</anchorfile>
            <anchor>displayName</anchor>
            <arglist>(QDesktopServices::StandardLocation type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDoubleValidator</name>
        <filename>qdoublevalidator.html</filename>
        <base>QValidator</base>
        <member kind="property" type="double">
            <name>bottom</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>top</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>decimals</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>decimals-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Notation">
            <name>notation</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>notation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDoubleValidator</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>QDoubleValidator</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDoubleValidator</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>QDoubleValidator-1</anchor>
            <arglist>(double bottom, double top, int decimals, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDoubleValidator</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>dtor.QDoubleValidator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>Notation</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>Notation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StandardNotation</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>Notation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScientificNotation</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>Notation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QValidator::State</type>
            <name>validate</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp;input, int &amp;pos) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setRange</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>setRange</anchor>
            <arglist>(double minimum, double maximum, int decimals)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(double )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(double )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDecimals</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>decimals-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNotation</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>notation-prop</anchor>
            <arglist>(QDoubleValidator::Notation )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>bottom</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>top</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>decimals</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>decimals-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDoubleValidator::Notation</type>
            <name>notation</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>notation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(double bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topChanged</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(double top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>decimalsChanged</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>decimals-prop</anchor>
            <arglist>(int decimals)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>notationChanged</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>notation-prop</anchor>
            <arglist>(QDoubleValidator::Notation notation)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDrag</name>
        <filename>qdrag.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDrag</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>QDrag</anchor>
            <arglist>(QObject *dragSource)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDrag</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>dtor.QDrag</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMimeData</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>setMimeData</anchor>
            <arglist>(QMimeData *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixmap</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>setPixmap</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHotSpot</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>setHotSpot</anchor>
            <arglist>(const QPoint &amp;hotspot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>hotSpot</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>hotSpot</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>source</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>target</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>start</name>
            <anchorfile>qdrag-obsolete.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(Qt::DropActions request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>exec</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>(Qt::DropActions supportedActions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>exec</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>exec-1</anchor>
            <arglist>(Qt::DropActions supportedActions, Qt::DropAction defaultDropAction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDragCursor</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>setDragCursor</anchor>
            <arglist>(const QPixmap &amp;cursor, Qt::DropAction action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>dragCursor</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>dragCursor</anchor>
            <arglist>(Qt::DropAction action) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropActions</type>
            <name>supportedActions</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>supportedActions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>defaultAction</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>defaultAction</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>actionChanged</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>actionChanged</anchor>
            <arglist>(Qt::DropAction action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>targetChanged</anchor>
            <arglist>(QObject *newTarget)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDragEnterEvent</name>
        <filename>qdragenterevent.html</filename>
        <base>QDragMoveEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDragEnterEvent</name>
            <anchorfile>qdragenterevent.html</anchorfile>
            <anchor>QDragEnterEvent</anchor>
            <arglist>(const QPoint &amp;point, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDragLeaveEvent</name>
        <filename>qdragleaveevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDragLeaveEvent</name>
            <anchorfile>qdragleaveevent.html</anchorfile>
            <anchor>QDragLeaveEvent</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDragMoveEvent</name>
        <filename>qdragmoveevent.html</filename>
        <base>QDropEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDragMoveEvent</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>QDragMoveEvent</anchor>
            <arglist>(const QPoint &amp;pos, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, QEvent::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDragMoveEvent</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>dtor.QDragMoveEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>answerRect</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>answerRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accept</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>accept-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignore</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>ignore-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accept</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>accept</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignore</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>ignore</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDropEvent</name>
        <filename>qdropevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDropEvent</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>QDropEvent</anchor>
            <arglist>(const QPointF &amp;pos, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, QEvent::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>posF</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>posF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>mouseButtons</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>mouseButtons</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>keyboardModifiers</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>keyboardModifiers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropActions</type>
            <name>possibleActions</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>possibleActions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>proposedAction</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>proposedAction</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>acceptProposedAction</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>acceptProposedAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>dropAction</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>dropAction</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDropAction</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>setDropAction</anchor>
            <arglist>(Qt::DropAction action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>source</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEnterEvent</name>
        <filename>qenterevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEnterEvent</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>QEnterEvent</anchor>
            <arglist>(const QPointF &amp;localPos, const QPointF &amp;windowPos, const QPointF &amp;screenPos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>globalPos</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalX</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>globalX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalY</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>globalY</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>localPos</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>localPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>windowPos</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>windowPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>screenPos</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QExposeEvent</name>
        <filename>qexposeevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExposeEvent</name>
            <anchorfile>qexposeevent.html</anchorfile>
            <anchor>QExposeEvent</anchor>
            <arglist>(const QRegion &amp;exposeRegion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion &amp;</type>
            <name>region</name>
            <anchorfile>qexposeevent.html</anchorfile>
            <anchor>region</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileDialogOptions</name>
        <filename>qfiledialogoptions.html</filename>
        <member kind="typedef" type="QFileDialogOptions::FileDialogOption">
            <name>FileDialogOptions</name>
            <anchorfile>qfiledialogoptions.html</anchorfile>
            <anchor>FileDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileOpenEvent</name>
        <filename>qfileopenevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>file</name>
            <anchorfile>qfileopenevent.html</anchorfile>
            <anchor>file</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qfileopenevent.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>openFile</name>
            <anchorfile>qfileopenevent.html</anchorfile>
            <anchor>openFile</anchor>
            <arglist>(QFile &amp;file, QIODevice::OpenMode flags) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFocusEvent</name>
        <filename>qfocusevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFocusEvent</name>
            <anchorfile>qfocusevent.html</anchorfile>
            <anchor>QFocusEvent</anchor>
            <arglist>(QEvent::Type type, Qt::FocusReason reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>gotFocus</name>
            <anchorfile>qfocusevent.html</anchorfile>
            <anchor>gotFocus</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>lostFocus</name>
            <anchorfile>qfocusevent.html</anchorfile>
            <anchor>lostFocus</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::FocusReason</type>
            <name>reason</name>
            <anchorfile>qfocusevent.html</anchorfile>
            <anchor>reason</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFont</name>
        <filename>qfont.html</filename>
        <member kind="enumeration">
            <name>StyleHint</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Helvetica</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SansSerif</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Times</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Serif</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Courier</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TypeWriter</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OldEnglish</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Decorative</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>System</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnyStyle</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cursive</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Monospace</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Fantasy</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>StyleStrategy</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PreferDefault</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferBitmap</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferDevice</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferOutline</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForceOutline</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferMatch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferQuality</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferAntialias</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoAntialias</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGLCompatible</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForceIntegerMetrics</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoSubpixelAntialias</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferNoShaping</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoFontMerging</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>HintingPreference</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>HintingPreference-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PreferDefaultHinting</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>HintingPreference-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferNoHinting</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>HintingPreference-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferVerticalHinting</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>HintingPreference-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferFullHinting</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>HintingPreference-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Weight</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Weight-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Thin</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraLight</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Light</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Normal</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Medium</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DemiBold</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bold</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraBold</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Black</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Style</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Style-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StyleNormal</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StyleItalic</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StyleOblique</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Stretch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Stretch-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AnyStretch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UltraCondensed</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraCondensed</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Condensed</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SemiCondensed</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unstretched</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SemiExpanded</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Expanded</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraExpanded</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UltraExpanded</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Capitalization</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Capitalization-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MixedCase</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Capitalization-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllUppercase</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Capitalization-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllLowercase</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Capitalization-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SmallCaps</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Capitalization-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Capitalize</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>Capitalization-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SpacingType</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>SpacingType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PercentageSpacing</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>SpacingType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AbsoluteSpacing</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>SpacingType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFont</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>QFont</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFont</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>QFont-1</anchor>
            <arglist>(const QString &amp;family, int pointSize, int weight, bool italic)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFont</name>
            <anchorfile>qfont-obsolete.html</anchorfile>
            <anchor>QFont-2</anchor>
            <arglist>(const QFont &amp;font, QPaintDevice *pd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFont</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>QFont-3</anchor>
            <arglist>(const QFont &amp;font, const QPaintDevice *pd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFont</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>QFont-4</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFont</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>dtor.QFont</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QFont &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>family</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>family</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFamily</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setFamily</anchor>
            <arglist>(const QString &amp;family)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>families</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>families</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFamilies</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setFamilies</anchor>
            <arglist>(const QStringList &amp;families)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>styleName</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>styleName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyleName</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setStyleName</anchor>
            <arglist>(const QString &amp;styleName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pointSize</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>pointSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPointSize</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setPointSize</anchor>
            <arglist>(int pointSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>pointSizeF</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>pointSizeF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPointSizeF</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setPointSizeF</anchor>
            <arglist>(qreal pointSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pixelSize</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>pixelSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelSize</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setPixelSize</anchor>
            <arglist>(int pixelSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>weight</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>weight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWeight</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setWeight</anchor>
            <arglist>(int weight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bold</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>bold</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBold</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setBold</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyle</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setStyle</anchor>
            <arglist>(QFont::Style style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::Style</type>
            <name>style</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>italic</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>italic</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItalic</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setItalic</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>underline</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>underline</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnderline</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setUnderline</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>overline</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>overline</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOverline</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setOverline</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>strikeOut</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>strikeOut</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStrikeOut</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setStrikeOut</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fixedPitch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>fixedPitch</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFixedPitch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setFixedPitch</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>kerning</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>kerning</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKerning</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setKerning</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::StyleHint</type>
            <name>styleHint</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>styleHint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::StyleStrategy</type>
            <name>styleStrategy</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>styleStrategy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyleHint</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setStyleHint</anchor>
            <arglist>(QFont::StyleHint hint, QFont::StyleStrategy strategy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyleStrategy</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setStyleStrategy</anchor>
            <arglist>(QFont::StyleStrategy s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>stretch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>stretch</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStretch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setStretch</anchor>
            <arglist>(int factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>letterSpacing</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>letterSpacing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::SpacingType</type>
            <name>letterSpacingType</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>letterSpacingType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLetterSpacing</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setLetterSpacing</anchor>
            <arglist>(QFont::SpacingType type, qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>wordSpacing</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>wordSpacing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWordSpacing</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setWordSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapitalization</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setCapitalization</anchor>
            <arglist>(QFont::Capitalization caps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::Capitalization</type>
            <name>capitalization</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>capitalization</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHintingPreference</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setHintingPreference</anchor>
            <arglist>(QFont::HintingPreference hintingPreference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::HintingPreference</type>
            <name>hintingPreference</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>hintingPreference</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rawMode</name>
            <anchorfile>qfont-obsolete.html</anchorfile>
            <anchor>rawMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawMode</name>
            <anchorfile>qfont-obsolete.html</anchorfile>
            <anchor>setRawMode</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exactMatch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>exactMatch</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont &amp;</type>
            <name>operator=</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QFont &amp;f) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QFont &amp;f) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QFont &amp;f) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCopyOf</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>isCopyOf</anchor>
            <arglist>(const QFont &amp;f) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont &amp;</type>
            <name>operator=</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QFont &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawName</name>
            <anchorfile>qfont-obsolete.html</anchorfile>
            <anchor>setRawName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>rawName</name>
            <anchorfile>qfont-obsolete.html</anchorfile>
            <anchor>rawName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>key</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fromString</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(const QString &amp;descrip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>substitute</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>substitute</anchor>
            <arglist>(const QString &amp;familyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>substitutes</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>substitutes</anchor>
            <arglist>(const QString &amp;familyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>substitutions</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>substitutions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>insertSubstitution</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>insertSubstitution</anchor>
            <arglist>(const QString &amp;familyName, const QString &amp;substituteName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>insertSubstitutions</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>insertSubstitutions</anchor>
            <arglist>(const QString &amp;familyName, const QStringList &amp;substituteNames)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>removeSubstitutions</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>removeSubstitutions</anchor>
            <arglist>(const QString &amp;familyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>removeSubstitution</name>
            <anchorfile>qfont-obsolete.html</anchorfile>
            <anchor>removeSubstitution</anchor>
            <arglist>(const QString &amp;familyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>defaultFamily</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>defaultFamily</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>lastResortFamily</name>
            <anchorfile>qfont-obsolete.html</anchorfile>
            <anchor>lastResortFamily</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>lastResortFont</name>
            <anchorfile>qfont-obsolete.html</anchorfile>
            <anchor>lastResortFont</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>resolve</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>resolve</anchor>
            <arglist>(const QFont &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>qHash-1</anchor>
            <arglist>(const QFont &amp;font, uint seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator-lt-lt-11</anchor>
            <arglist>(QDataStream &amp;s, const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;s, QFont &amp;font)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFontDatabase</name>
        <filename>qfontdatabase.html</filename>
        <member kind="enumeration">
            <name>WritingSystem</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Any</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Latin</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Greek</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cyrillic</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Armenian</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Hebrew</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Arabic</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Syriac</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Thaana</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Devanagari</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bengali</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Gurmukhi</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Gujarati</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Oriya</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tamil</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Telugu</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kannada</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Malayalam</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sinhala</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Thai</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Lao</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tibetan</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Myanmar</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Georgian</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Khmer</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SimplifiedChinese</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TraditionalChinese</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Japanese</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Korean</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Vietnamese</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Symbol</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Other</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ogham</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Runic</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nko</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WritingSystemsCount</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SystemFont</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>SystemFont-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>GeneralFont</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>SystemFont-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FixedFont</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>SystemFont-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TitleFont</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>SystemFont-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SmallestReadableFont</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>SystemFont-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;int&gt;</type>
            <name>standardSizes</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>standardSizes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontDatabase</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>QFontDatabase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QFontDatabase::WritingSystem&gt;</type>
            <name>writingSystems</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>writingSystems</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QFontDatabase::WritingSystem&gt;</type>
            <name>writingSystems</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>writingSystems-1</anchor>
            <arglist>(const QString &amp;family) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>families</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>families</anchor>
            <arglist>(QFontDatabase::WritingSystem writingSystem) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>styles</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>styles</anchor>
            <arglist>(const QString &amp;family) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>pointSizes</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>pointSizes</anchor>
            <arglist>(const QString &amp;family, const QString &amp;styleName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>smoothSizes</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>smoothSizes</anchor>
            <arglist>(const QString &amp;family, const QString &amp;styleName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>styleString</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>styleString</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>styleString</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>styleString-1</anchor>
            <arglist>(const QFontInfo &amp;fontInfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>font</anchor>
            <arglist>(const QString &amp;family, const QString &amp;style, int pointSize) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBitmapScalable</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>isBitmapScalable</anchor>
            <arglist>(const QString &amp;family, const QString &amp;style) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSmoothlyScalable</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>isSmoothlyScalable</anchor>
            <arglist>(const QString &amp;family, const QString &amp;style) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isScalable</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>isScalable</anchor>
            <arglist>(const QString &amp;family, const QString &amp;style) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFixedPitch</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>isFixedPitch</anchor>
            <arglist>(const QString &amp;family, const QString &amp;style) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>italic</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>italic</anchor>
            <arglist>(const QString &amp;family, const QString &amp;style) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bold</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>bold</anchor>
            <arglist>(const QString &amp;family, const QString &amp;style) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>weight</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>weight</anchor>
            <arglist>(const QString &amp;family, const QString &amp;style) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPrivateFamily</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>isPrivateFamily</anchor>
            <arglist>(const QString &amp;family) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>writingSystemName</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>writingSystemName</anchor>
            <arglist>(QFontDatabase::WritingSystem writingSystem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>writingSystemSample</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>writingSystemSample</anchor>
            <arglist>(QFontDatabase::WritingSystem writingSystem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>addApplicationFont</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>addApplicationFont</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>addApplicationFontFromData</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>addApplicationFontFromData</anchor>
            <arglist>(const QByteArray &amp;fontData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>applicationFontFamilies</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>applicationFontFamilies</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>removeApplicationFont</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>removeApplicationFont</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>removeAllApplicationFonts</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>removeAllApplicationFonts</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>supportsThreadedFontRendering</name>
            <anchorfile>qfontdatabase-obsolete.html</anchorfile>
            <anchor>supportsThreadedFontRendering</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFont</type>
            <name>systemFont</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>systemFont</anchor>
            <arglist>(QFontDatabase::SystemFont type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFontDialogOptions</name>
        <filename>qfontdialogoptions.html</filename>
        <member kind="typedef" type="QFontDialogOptions::FontDialogOption">
            <name>FontDialogOptions</name>
            <anchorfile>qfontdialogoptions.html</anchorfile>
            <anchor>FontDialogOption-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFontInfo</name>
        <filename>qfontinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontInfo</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>QFontInfo</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontInfo</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>QFontInfo-1</anchor>
            <arglist>(const QFontInfo &amp;fi)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFontInfo</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>dtor.QFontInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QFontInfo &amp;fi)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QFontInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>family</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>family</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>styleName</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>styleName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pixelSize</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>pixelSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pointSize</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>pointSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>pointSizeF</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>pointSizeF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>italic</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>italic</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::Style</type>
            <name>style</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>weight</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>weight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bold</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>bold</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fixedPitch</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>fixedPitch</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::StyleHint</type>
            <name>styleHint</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>styleHint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rawMode</name>
            <anchorfile>qfontinfo-obsolete.html</anchorfile>
            <anchor>rawMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exactMatch</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>exactMatch</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFontMetrics</name>
        <filename>qfontmetrics.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetrics</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>QFontMetrics</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetrics</name>
            <anchorfile>qfontmetrics-obsolete.html</anchorfile>
            <anchor>QFontMetrics-1</anchor>
            <arglist>(const QFont &amp;font, QPaintDevice *paintdevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetrics</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>QFontMetrics-2</anchor>
            <arglist>(const QFont &amp;font, const QPaintDevice *paintdevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetrics</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>QFontMetrics-3</anchor>
            <arglist>(const QFontMetrics &amp;fm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFontMetrics</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>dtor.QFontMetrics</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontMetrics &amp;</type>
            <name>operator=</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QFontMetrics &amp;fm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontMetrics &amp;</type>
            <name>operator=</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QFontMetrics &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QFontMetrics &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>ascent</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>ascent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capHeight</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>capHeight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>descent</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>descent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>leading</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>leading</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineSpacing</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>lineSpacing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minLeftBearing</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>minLeftBearing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minRightBearing</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>minRightBearing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxWidth</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>maxWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>xHeight</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>xHeight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>averageCharWidth</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>averageCharWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inFont</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>inFont</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inFontUcs4</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>inFontUcs4</anchor>
            <arglist>(uint ucs4) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>leftBearing</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>leftBearing</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rightBearing</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>rightBearing</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qfontmetrics-obsolete.html</anchorfile>
            <anchor>width</anchor>
            <arglist>(const QString &amp;text, int len) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qfontmetrics-obsolete.html</anchorfile>
            <anchor>width</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>horizontalAdvance</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>horizontalAdvance</anchor>
            <arglist>(const QString &amp;text, int len) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>horizontalAdvance</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>horizontalAdvance-1</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>charWidth</name>
            <anchorfile>qfontmetrics-obsolete.html</anchorfile>
            <anchor>charWidth</anchor>
            <arglist>(const QString &amp;text, int pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>boundingRect-1</anchor>
            <arglist>(const QString &amp;text) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>boundingRect-2</anchor>
            <arglist>(const QRect &amp;rect, int flags, const QString &amp;text, int tabStops, int *tabArray) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>boundingRect-3</anchor>
            <arglist>(int x, int y, int width, int height, int flags, const QString &amp;text, int tabStops, int *tabArray) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>size</anchor>
            <arglist>(int flags, const QString &amp;text, int tabStops, int *tabArray) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>tightBoundingRect</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>tightBoundingRect</anchor>
            <arglist>(const QString &amp;text) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>elidedText</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>elidedText</anchor>
            <arglist>(const QString &amp;text, Qt::TextElideMode mode, int width, int flags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>underlinePos</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>underlinePos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>overlinePos</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>overlinePos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>strikeOutPos</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>strikeOutPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineWidth</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>lineWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>fontDpi</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>fontDpi</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QFontMetrics &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QFontMetrics &amp;other) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFontMetricsF</name>
        <filename>qfontmetricsf.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetricsF</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>QFontMetricsF</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetricsF</name>
            <anchorfile>qfontmetricsf-obsolete.html</anchorfile>
            <anchor>QFontMetricsF-1</anchor>
            <arglist>(const QFont &amp;font, QPaintDevice *paintdevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetricsF</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>QFontMetricsF-2</anchor>
            <arglist>(const QFont &amp;font, const QPaintDevice *paintdevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetricsF</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>QFontMetricsF-3</anchor>
            <arglist>(const QFontMetrics &amp;fontMetrics)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetricsF</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>QFontMetricsF-4</anchor>
            <arglist>(const QFontMetricsF &amp;fm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFontMetricsF</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>dtor.QFontMetricsF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontMetricsF &amp;</type>
            <name>operator=</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QFontMetricsF &amp;fm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontMetricsF &amp;</type>
            <name>operator=</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QFontMetrics &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontMetricsF &amp;</type>
            <name>operator=</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QFontMetricsF &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QFontMetricsF &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>ascent</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>ascent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>capHeight</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>capHeight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>descent</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>descent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leading</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>leading</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lineSpacing</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>lineSpacing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>minLeftBearing</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>minLeftBearing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>minRightBearing</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>minRightBearing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maxWidth</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>maxWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>xHeight</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>xHeight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>averageCharWidth</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>averageCharWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inFont</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>inFont</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inFontUcs4</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>inFontUcs4</anchor>
            <arglist>(uint ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leftBearing</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>leftBearing</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rightBearing</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>rightBearing</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qfontmetricsf-obsolete.html</anchorfile>
            <anchor>width</anchor>
            <arglist>(const QString &amp;text) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qfontmetricsf-obsolete.html</anchorfile>
            <anchor>width-1</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>horizontalAdvance</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>horizontalAdvance</anchor>
            <arglist>(const QString &amp;text, int length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>horizontalAdvance</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>horizontalAdvance-1</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>(const QString &amp;text) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>boundingRect-1</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>boundingRect-2</anchor>
            <arglist>(const QRectF &amp;rect, int flags, const QString &amp;text, int tabStops, int *tabArray) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>size</anchor>
            <arglist>(int flags, const QString &amp;text, int tabStops, int *tabArray) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>tightBoundingRect</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>tightBoundingRect</anchor>
            <arglist>(const QString &amp;text) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>elidedText</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>elidedText</anchor>
            <arglist>(const QString &amp;text, Qt::TextElideMode mode, qreal width, int flags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>underlinePos</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>underlinePos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>overlinePos</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>overlinePos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>strikeOutPos</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>strikeOutPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lineWidth</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>lineWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>fontDpi</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>fontDpi</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QFontMetricsF &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QFontMetricsF &amp;other) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGenericMatrix</name>
        <filename>qgenericmatrix.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGenericMatrix</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QGenericMatrix</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGenericMatrix</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QGenericMatrix-2</anchor>
            <arglist>(const T *values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator()</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()(int row, int column) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator()</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-28-29-1</anchor>
            <arglist>()(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isIdentity</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>isIdentity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToIdentity</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>setToIdentity</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;M, N, T&gt;</type>
            <name>transposed</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt; &amp;</type>
            <name>operator-=</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt; &amp;</type>
            <name>operator*=</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(T factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt; &amp;</type>
            <name>operator/=</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(T divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copyDataTo</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>copyDataTo</anchor>
            <arglist>(T *values) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>data</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>data-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>constData</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt;</type>
            <name>operator+</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp;m1, const QGenericMatrix&lt;N, M, T&gt; &amp;m2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt;</type>
            <name>operator-</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp;m1, const QGenericMatrix&lt;N, M, T&gt; &amp;m2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;M1, M2, TT&gt;</type>
            <name>operator*</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(const QGenericMatrix&lt;NN, M2, TT&gt; &amp;m1, const QGenericMatrix&lt;M1, NN, TT&gt; &amp;m2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt;</type>
            <name>operator-</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt;</type>
            <name>operator*</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-2a-4</anchor>
            <arglist>(T factor, const QGenericMatrix&lt;N, M, T&gt; &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt;</type>
            <name>operator*</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-2a-5</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp;matrix, T factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt;</type>
            <name>operator/</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-2f</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp;matrix, T divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QGenericMatrix&lt;N, M, T&gt; &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QGenericMatrix&lt;N, M, T&gt; &amp;matrix)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QMatrix2x2</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QMatrix2x2-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QMatrix2x3</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QMatrix2x3-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QMatrix2x4</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QMatrix2x4-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QMatrix3x2</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QMatrix3x2-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QMatrix3x3</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QMatrix3x3-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QMatrix3x4</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QMatrix3x4-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QMatrix4x2</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QMatrix4x2-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QMatrix4x3</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QMatrix4x3-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGenericPlugin</name>
        <filename>qgenericplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGenericPlugin</name>
            <anchorfile>qgenericplugin.html</anchorfile>
            <anchor>QGenericPlugin</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGenericPlugin</name>
            <anchorfile>qgenericplugin.html</anchorfile>
            <anchor>dtor.QGenericPlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QObject *</type>
            <name>create</name>
            <anchorfile>qgenericplugin.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QString &amp;key, const QString &amp;specification) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGenericPluginFactory</name>
        <filename>qgenericpluginfactory.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>keys</name>
            <anchorfile>qgenericpluginfactory.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QObject *</type>
            <name>create</name>
            <anchorfile>qgenericpluginfactory.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QString &amp;key, const QString &amp;specification)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGlyphRun</name>
        <filename>qglyphrun.html</filename>
        <member kind="enumeration">
            <name>GlyphRunFlag</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>GlyphRunFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Overline</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>GlyphRunFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Underline</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>GlyphRunFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StrikeOut</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>GlyphRunFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightToLeft</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>GlyphRunFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SplitLigature</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>GlyphRunFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGlyphRun::GlyphRunFlag">
            <name>GlyphRunFlags</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>GlyphRunFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGlyphRun</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>QGlyphRun</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGlyphRun</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>QGlyphRun-1</anchor>
            <arglist>(const QGlyphRun &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGlyphRun &amp;</type>
            <name>operator=</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QGlyphRun &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGlyphRun</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>dtor.QGlyphRun</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QGlyphRun &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRawFont</type>
            <name>rawFont</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>rawFont</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawFont</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setRawFont</anchor>
            <arglist>(const QRawFont &amp;rawFont)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawData</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setRawData</anchor>
            <arglist>(const quint32 *glyphIndexArray, const QPointF *glyphPositionArray, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;quint32&gt;</type>
            <name>glyphIndexes</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>glyphIndexes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGlyphIndexes</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setGlyphIndexes</anchor>
            <arglist>(const QVector&lt;quint32&gt; &amp;glyphIndexes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QPointF&gt;</type>
            <name>positions</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>positions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPositions</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setPositions</anchor>
            <arglist>(const QVector&lt;QPointF&gt; &amp;positions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGlyphRun &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGlyphRun &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOverline</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setOverline</anchor>
            <arglist>(bool overline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>overline</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>overline</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnderline</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setUnderline</anchor>
            <arglist>(bool underline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>underline</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>underline</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStrikeOut</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setStrikeOut</anchor>
            <arglist>(bool strikeOut)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>strikeOut</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>strikeOut</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRightToLeft</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setRightToLeft</anchor>
            <arglist>(bool rightToLeft)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRightToLeft</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>isRightToLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlag</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setFlag</anchor>
            <arglist>(QGlyphRun::GlyphRunFlag flag, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QGlyphRun::GlyphRunFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGlyphRun::GlyphRunFlags</type>
            <name>flags</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBoundingRect</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setBoundingRect</anchor>
            <arglist>(const QRectF &amp;boundingRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGradient</name>
        <filename>qgradient.html</filename>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LinearGradient</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RadialGradient</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConicalGradient</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoGradient</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Spread</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Spread-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PadSpread</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Spread-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReflectSpread</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Spread-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RepeatSpread</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Spread-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CoordinateMode</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>CoordinateMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LogicalMode</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>CoordinateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StretchToDeviceMode</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>CoordinateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ObjectBoundingMode</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>CoordinateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ObjectMode</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>CoordinateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Preset</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>WarmFlame</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NightFade</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SpringWarmth</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JuicyPeach</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>YoungPassion</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LadyLips</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SunnyMorning</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RainyAshville</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrozenDreams</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WinterNeva</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DustyGrass</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TemptingAzure</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HeavyRain</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AmyCrisp</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MeanFruit</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeepBlue</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RipeMalinka</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CloudyKnoxville</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MalibuBeach</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NewLife</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TrueSunset</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MorpheusDen</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RareWind</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NearMoon</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WildApple</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaintPetersburg</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PlumPlate</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EverlastingSky</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HappyFisher</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Blessing</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SharpeyeEagle</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LadogaBottom</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LemonGate</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItmeoBranding</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ZeusMiracle</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OldHat</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StarWine</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HappyAcid</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AwesomePine</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NewYork</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShyRainbow</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MixedHopes</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FlyHigh</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StrongBliss</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FreshMilk</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SnowAgain</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FebruaryInk</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KindSteel</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SoftGrass</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GrownEarly</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SharpBlues</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShadyWater</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyBeauty</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GreatWhale</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TeenNotebook</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PoliteRumors</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SweetPeriod</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WideMatrix</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SoftCherish</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RedSalvation</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BurningSpring</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NightParty</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SkyGlider</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HeavenPeach</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PurpleDivision</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AquaSplash</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SpikyNaga</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LoveKiss</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CleanMirror</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PremiumDark</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColdEvening</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CochitiLake</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SummerGames</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PassionateBed</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MountainRock</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DesertHump</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JungleDay</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PhoenixStart</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OctoberSilence</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FarawayRiver</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlchemistLab</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OverSun</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PremiumWhite</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MarsParty</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EternalConstance</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JapanBlush</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SmilingRain</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CloudyApple</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BigMango</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HealthyWater</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AmourAmour</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RiskyConcrete</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StrongStick</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ViciousStance</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PaloAlto</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HappyMemories</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MidnightBloom</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Crystalline</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PartyBliss</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConfidentCloud</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LeCocktail</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RiverCity</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrozenBerry</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ChildCare</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FlyingLemon</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NewRetrowave</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HiddenJaguar</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AboveTheSky</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nega</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DenseWater</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Seashore</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MarbleWall</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CheerfulCaramel</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NightSky</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MagicLake</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>YoungGrass</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColorfulPeach</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GentleCare</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PlumBath</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HappyUnicorn</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AfricanField</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SolidStone</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OrangeJuice</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GlassWater</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NorthMiracle</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FruitBlend</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MillenniumPine</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HighFlight</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoleHall</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SpaceShift</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForestInei</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RoyalGarden</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RichMetal</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JuicyCake</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SmartIndigo</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SandStrike</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NorseBeauty</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AquaGuidance</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SunVeggie</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SeaLord</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlackSea</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GrassShampoo</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LandingAircraft</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WitchDance</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SleeplessNight</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AngelCare</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CrystalRiver</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SoftLipstick</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaltMountain</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PerfectWhite</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FreshOasis</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StrictNovember</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MorningSalad</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeepRelief</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SeaStrike</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NightCall</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SupremeSky</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LightBlue</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MindCrawl</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LilyMeadow</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SugarLollipop</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SweetDessert</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MagicRay</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TeenParty</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrozenHeat</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GagarinView</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FabledSunset</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PerfectBlue</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NumPresets</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>Preset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGradient</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>QGradient-1</anchor>
            <arglist>(QGradient::Preset preset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGradient::Type</type>
            <name>type</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpread</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>setSpread</anchor>
            <arglist>(QGradient::Spread method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGradient::Spread</type>
            <name>spread</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>spread</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorAt</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>setColorAt</anchor>
            <arglist>(qreal position, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStops</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>setStops</anchor>
            <arglist>(const QGradientStops &amp;stopPoints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGradientStops</type>
            <name>stops</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>stops</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGradient::CoordinateMode</type>
            <name>coordinateMode</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>coordinateMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoordinateMode</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>setCoordinateMode</anchor>
            <arglist>(QGradient::CoordinateMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGradient &amp;gradient) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGradient &amp;gradient) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QGradientStop</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>QGradientStop-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QGradientStops</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>QGradientStops-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGuiApplication</name>
        <filename>qguiapplication.html</filename>
        <base>QCoreApplication</base>
        <member kind="property" type="QIcon">
            <name>windowIcon</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>windowIcon-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>applicationDisplayName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>applicationDisplayName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>desktopFileName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>desktopFileName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::LayoutDirection">
            <name>layoutDirection</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>platformName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>platformName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>quitOnLastWindowClosed</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>quitOnLastWindowClosed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QScreen*">
            <name>primaryScreen</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>primaryScreen-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGuiApplication</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>QGuiApplication</anchor>
            <arglist>(int &amp;argc, char **argv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGuiApplication</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>dtor.QGuiApplication</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setApplicationDisplayName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>applicationDisplayName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>applicationDisplayName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>applicationDisplayName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDesktopFileName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>desktopFileName-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>desktopFileName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>desktopFileName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindowList</type>
            <name>allWindows</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>allWindows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindowList</type>
            <name>topLevelWindows</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>topLevelWindows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindow *</type>
            <name>topLevelAt</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>topLevelAt</anchor>
            <arglist>(const QPoint &amp;pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setWindowIcon</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>windowIcon-prop</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QIcon</type>
            <name>windowIcon</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>windowIcon-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>platformName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>platformName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindow *</type>
            <name>modalWindow</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>modalWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindow *</type>
            <name>focusWindow</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>focusWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QObject *</type>
            <name>focusObject</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>focusObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QScreen *</type>
            <name>primaryScreen</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>primaryScreen-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QScreen *&gt;</type>
            <name>screens</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>screens</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QScreen *</type>
            <name>screenAt</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>screenAt</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>devicePixelRatio</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCursor *</type>
            <name>overrideCursor</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>overrideCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setOverrideCursor</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>setOverrideCursor</anchor>
            <arglist>(const QCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>changeOverrideCursor</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>changeOverrideCursor</anchor>
            <arglist>(const QCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>restoreOverrideCursor</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>restoreOverrideCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>font</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QClipboard *</type>
            <name>clipboard</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>clipboard</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPalette</type>
            <name>palette</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>palette</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPalette</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>setPalette</anchor>
            <arglist>(const QPalette &amp;pal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::KeyboardModifiers</type>
            <name>keyboardModifiers</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>keyboardModifiers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::KeyboardModifiers</type>
            <name>queryKeyboardModifiers</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>queryKeyboardModifiers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::MouseButtons</type>
            <name>mouseButtons</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>mouseButtons</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setLayoutDirection</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist>(Qt::LayoutDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::LayoutDirection</type>
            <name>layoutDirection</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isRightToLeft</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>isRightToLeft</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLeftToRight</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>isLeftToRight</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStyleHints *</type>
            <name>styleHints</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>styleHints</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDesktopSettingsAware</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>setDesktopSettingsAware</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>desktopSettingsAware</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>desktopSettingsAware</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QInputMethod *</type>
            <name>inputMethod</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>inputMethod</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPlatformNativeInterface *</type>
            <name>platformNativeInterface</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>platformNativeInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFunctionPointer</type>
            <name>platformFunction</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>platformFunction</anchor>
            <arglist>(const QByteArray &amp;function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setQuitOnLastWindowClosed</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>quitOnLastWindowClosed-prop</anchor>
            <arglist>(bool quit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>quitOnLastWindowClosed</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>quitOnLastWindowClosed-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::ApplicationState</type>
            <name>applicationState</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>applicationState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setHighDpiScaleFactorRoundingPolicy</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>setHighDpiScaleFactorRoundingPolicy</anchor>
            <arglist>(Qt::HighDpiScaleFactorRoundingPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::HighDpiScaleFactorRoundingPolicy</type>
            <name>highDpiScaleFactorRoundingPolicy</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>highDpiScaleFactorRoundingPolicy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>exec</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>notify</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>notify</anchor>
            <arglist>(QObject *object, QEvent *event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSessionRestored</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>isSessionRestored</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sessionId</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>sessionId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sessionKey</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>sessionKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSavingSession</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>isSavingSession</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFallbackSessionManagementEnabled</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>isFallbackSessionManagementEnabled</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setFallbackSessionManagementEnabled</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>setFallbackSessionManagementEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>sync</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>sync</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fontDatabaseChanged</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>fontDatabaseChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>screenAdded</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>screenAdded</anchor>
            <arglist>(QScreen *screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>screenRemoved</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>screenRemoved</anchor>
            <arglist>(QScreen *screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>primaryScreenChanged</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>primaryScreen-prop</anchor>
            <arglist>(QScreen *screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lastWindowClosed</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>lastWindowClosed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusObjectChanged</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>focusObjectChanged</anchor>
            <arglist>(QObject *focusObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusWindowChanged</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>focusWindowChanged</anchor>
            <arglist>(QWindow *focusWindow)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>applicationStateChanged</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>applicationStateChanged</anchor>
            <arglist>(Qt::ApplicationState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layoutDirectionChanged</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist>(Qt::LayoutDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>commitDataRequest</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>commitDataRequest</anchor>
            <arglist>(QSessionManager &amp;manager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>saveStateRequest</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>saveStateRequest</anchor>
            <arglist>(QSessionManager &amp;manager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>paletteChanged</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>paletteChanged</anchor>
            <arglist>(const QPalette &amp;palette)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>applicationDisplayNameChanged</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>applicationDisplayName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fontChanged</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>fontChanged</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>qGuiApp</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>qGuiApp</anchor>
            <arglist>qGuiApp</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHelpEvent</name>
        <filename>qhelpevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHelpEvent</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>QHelpEvent</anchor>
            <arglist>(QEvent::Type type, const QPoint &amp;pos, const QPoint &amp;globalPos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalX</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>globalX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalY</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>globalY</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint &amp;</type>
            <name>pos</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint &amp;</type>
            <name>globalPos</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHideEvent</name>
        <filename>qhideevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHideEvent</name>
            <anchorfile>qhideevent.html</anchorfile>
            <anchor>QHideEvent</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHoverEvent</name>
        <filename>qhoverevent.html</filename>
        <base>QInputEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHoverEvent</name>
            <anchorfile>qhoverevent.html</anchorfile>
            <anchor>QHoverEvent</anchor>
            <arglist>(QEvent::Type type, const QPointF &amp;pos, const QPointF &amp;oldPos, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qhoverevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>oldPos</name>
            <anchorfile>qhoverevent.html</anchorfile>
            <anchor>oldPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>posF</name>
            <anchorfile>qhoverevent.html</anchorfile>
            <anchor>posF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>oldPosF</name>
            <anchorfile>qhoverevent.html</anchorfile>
            <anchor>oldPosF</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIcon</name>
        <filename>qicon.html</filename>
        <member kind="enumeration">
            <name>Mode</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>Mode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Normal</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Disabled</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Active</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Selected</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>State</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>State-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>On</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Off</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>QIcon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>QIcon-1</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>QIcon-2</anchor>
            <arglist>(const QIcon &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>QIcon-3</anchor>
            <arglist>(QIcon &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>QIcon-4</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>QIcon-5</anchor>
            <arglist>(QIconEngine *engine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>dtor.QIcon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon &amp;</type>
            <name>operator=</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QIcon &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon &amp;</type>
            <name>operator=</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QIcon &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QIcon &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>(const QSize &amp;size, QIcon::Mode mode, QIcon::State state) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>pixmap-1</anchor>
            <arglist>(int w, int h, QIcon::Mode mode, QIcon::State state) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>pixmap-2</anchor>
            <arglist>(int extent, QIcon::Mode mode, QIcon::State state) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>pixmap-3</anchor>
            <arglist>(QWindow *window, const QSize &amp;size, QIcon::Mode mode, QIcon::State state) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>actualSize</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>actualSize</anchor>
            <arglist>(const QSize &amp;size, QIcon::Mode mode, QIcon::State state) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>actualSize</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>actualSize-1</anchor>
            <arglist>(QWindow *window, const QSize &amp;size, QIcon::Mode mode, QIcon::State state) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>paint</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QRect &amp;rect, Qt::Alignment alignment, QIcon::Mode mode, QIcon::State state) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>paint</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>paint-1</anchor>
            <arglist>(QPainter *painter, int x, int y, int w, int h, Qt::Alignment alignment, QIcon::Mode mode, QIcon::State state) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serialNumber</name>
            <anchorfile>qicon-obsolete.html</anchorfile>
            <anchor>serialNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>cacheKey</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>cacheKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addPixmap</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>addPixmap</anchor>
            <arglist>(const QPixmap &amp;pixmap, QIcon::Mode mode, QIcon::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addFile</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>addFile</anchor>
            <arglist>(const QString &amp;fileName, const QSize &amp;size, QIcon::Mode mode, QIcon::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSize&gt;</type>
            <name>availableSizes</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>availableSizes</anchor>
            <arglist>(QIcon::Mode mode, QIcon::State state) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIsMask</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>setIsMask</anchor>
            <arglist>(bool isMask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMask</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>isMask</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QIcon</type>
            <name>fromTheme</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>fromTheme</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QIcon</type>
            <name>fromTheme</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>fromTheme-1</anchor>
            <arglist>(const QString &amp;name, const QIcon &amp;fallback)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasThemeIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>hasThemeIcon</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>themeSearchPaths</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>themeSearchPaths</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setThemeSearchPaths</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>setThemeSearchPaths</anchor>
            <arglist>(const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>fallbackSearchPaths</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>fallbackSearchPaths</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setFallbackSearchPaths</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>setFallbackSearchPaths</anchor>
            <arglist>(const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>themeName</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>themeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setThemeName</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>setThemeName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fallbackThemeName</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>fallbackThemeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setFallbackThemeName</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>setFallbackThemeName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QIcon &amp;icon)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIconDragEvent</name>
        <filename>qicondragevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIconDragEvent</name>
            <anchorfile>qicondragevent.html</anchorfile>
            <anchor>QIconDragEvent</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIconEngine</name>
        <filename>qiconengine.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIconEngine</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>QIconEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QIconEngine</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>dtor.QIconEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter *painter, const QRect &amp;rect, QIcon::Mode mode, QIcon::State state) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>actualSize</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>actualSize</anchor>
            <arglist>(const QSize &amp;size, QIcon::Mode mode, QIcon::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>(const QSize &amp;size, QIcon::Mode mode, QIcon::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>addPixmap</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>addPixmap</anchor>
            <arglist>(const QPixmap &amp;pixmap, QIcon::Mode mode, QIcon::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>addFile</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>addFile</anchor>
            <arglist>(const QString &amp;fileName, const QSize &amp;size, QIcon::Mode mode, QIcon::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>key</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QIconEngine *</type>
            <name>clone</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>read</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(QDataStream &amp;in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>write</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(QDataStream &amp;out) const const</arglist>
        </member>
        <member kind="enumeration">
            <name>IconEngineHook</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>IconEngineHook-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AvailableSizesHook</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>IconEngineHook-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IconNameHook</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>IconEngineHook-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsNullHook</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>IconEngineHook-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScaledPixmapHook</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>IconEngineHook-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QIconEngine::AvailableSizesArgument</class>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QSize&gt;</type>
            <name>availableSizes</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>availableSizes</anchor>
            <arglist>(QIcon::Mode mode, QIcon::State state) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>iconName</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>iconName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>scaledPixmap</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>scaledPixmap</anchor>
            <arglist>(const QSize &amp;size, QIcon::Mode mode, QIcon::State state, qreal scale)</arglist>
        </member>
        <class>QIconEngine::ScaledPixmapArgument</class>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>virtual_hook</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>virtual_hook</anchor>
            <arglist>(int id, void *data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIconEngine::AvailableSizesArgument</name>
        <filename>qiconengine-availablesizesargument.html</filename>
    </compound>
    <compound kind="class">
        <name>QIconEngine::ScaledPixmapArgument</name>
        <filename>qiconengine-scaledpixmapargument.html</filename>
    </compound>
    <compound kind="class">
        <name>QIconEnginePlugin</name>
        <filename>qiconengineplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIconEnginePlugin</name>
            <anchorfile>qiconengineplugin.html</anchorfile>
            <anchor>QIconEnginePlugin</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QIconEnginePlugin</name>
            <anchorfile>qiconengineplugin.html</anchorfile>
            <anchor>dtor.QIconEnginePlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QIconEngine *</type>
            <name>create</name>
            <anchorfile>qiconengineplugin.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QString &amp;filename) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QImage</name>
        <filename>qimage.html</filename>
        <base>QPaintDevice</base>
        <member kind="enumeration">
            <name>InvertMode</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>InvertMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InvertRgb</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>InvertMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvertRgba</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>InvertMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Format</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Format_Invalid</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_Mono</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_MonoLSB</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_Indexed8</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGB32</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_ARGB32</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_ARGB32_Premultiplied</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGB16</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_ARGB8565_Premultiplied</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGB666</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_ARGB6666_Premultiplied</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGB555</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_ARGB8555_Premultiplied</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGB888</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGB444</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_ARGB4444_Premultiplied</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGBX8888</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGBA8888</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGBA8888_Premultiplied</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_BGR30</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_A2BGR30_Premultiplied</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGB30</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_A2RGB30_Premultiplied</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_Alpha8</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_Grayscale8</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGBX64</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGBA64</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_RGBA64_Premultiplied</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_Grayscale16</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Format_BGR888</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-1</anchor>
            <arglist>(const QSize &amp;size, QImage::Format format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-2</anchor>
            <arglist>(int width, int height, QImage::Format format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-3</anchor>
            <arglist>(uchar *data, int width, int height, QImage::Format format, QImageCleanupFunction cleanupFunction, void *cleanupInfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-4</anchor>
            <arglist>(const uchar *data, int width, int height, QImage::Format format, QImageCleanupFunction cleanupFunction, void *cleanupInfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-5</anchor>
            <arglist>(uchar *data, int width, int height, int bytesPerLine, QImage::Format format, QImageCleanupFunction cleanupFunction, void *cleanupInfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-6</anchor>
            <arglist>(const uchar *data, int width, int height, int bytesPerLine, QImage::Format format, QImageCleanupFunction cleanupFunction, void *cleanupInfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-7</anchor>
            <arglist>(const char *const [] xpm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-8</anchor>
            <arglist>(const QString &amp;fileName, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-9</anchor>
            <arglist>(const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-10</anchor>
            <arglist>(QImage &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>dtor.QImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage &amp;</type>
            <name>operator=</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage &amp;</type>
            <name>operator=</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QImage &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QImage &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QImage &amp;image) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QImage &amp;image) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>copy</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QRect &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>copy</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>copy-1</anchor>
            <arglist>(int x, int y, int width, int height) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage::Format</type>
            <name>format</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>convertToFormat</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>convertToFormat</anchor>
            <arglist>(QImage::Format format, Qt::ImageConversionFlags flags) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>convertToFormat</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>convertToFormat-1</anchor>
            <arglist>(QImage::Format format, Qt::ImageConversionFlags flags) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>convertToFormat</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>convertToFormat-2</anchor>
            <arglist>(QImage::Format format, const QVector&lt;QRgb&gt; &amp;colorTable, Qt::ImageConversionFlags flags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>reinterpretAsFormat</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>reinterpretAsFormat</anchor>
            <arglist>(QImage::Format format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>convertTo</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>convertTo</anchor>
            <arglist>(QImage::Format format, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>rect</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>colorCount</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>colorCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bitPlaneCount</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>bitPlaneCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>color</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>color</anchor>
            <arglist>(int i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(int index, QRgb colorValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorCount</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setColorCount</anchor>
            <arglist>(int colorCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>allGray</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>allGray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isGrayscale</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>isGrayscale</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar *</type>
            <name>bits</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>bits</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uchar *</type>
            <name>bits</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>bits-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uchar *</type>
            <name>constBits</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>constBits</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>byteCount</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>byteCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>sizeInBytes</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>sizeInBytes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar *</type>
            <name>scanLine</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>scanLine</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uchar *</type>
            <name>scanLine</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>scanLine-1</anchor>
            <arglist>(int i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uchar *</type>
            <name>constScanLine</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>constScanLine</anchor>
            <arglist>(int i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bytesPerLine</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>bytesPerLine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>valid</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>valid-1</anchor>
            <arglist>(int x, int y) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>valid</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>valid</anchor>
            <arglist>(const QPoint &amp;pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pixelIndex</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>pixelIndex-1</anchor>
            <arglist>(int x, int y) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pixelIndex</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>pixelIndex</anchor>
            <arglist>(const QPoint &amp;position) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>pixel</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>pixel-1</anchor>
            <arglist>(int x, int y) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>pixel</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>pixel</anchor>
            <arglist>(const QPoint &amp;position) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixel</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setPixel-1</anchor>
            <arglist>(int x, int y, uint index_or_rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixel</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setPixel</anchor>
            <arglist>(const QPoint &amp;position, uint index_or_rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>pixelColor</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>pixelColor-1</anchor>
            <arglist>(int x, int y) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>pixelColor</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>pixelColor</anchor>
            <arglist>(const QPoint &amp;position) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelColor</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setPixelColor-1</anchor>
            <arglist>(int x, int y, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelColor</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setPixelColor</anchor>
            <arglist>(const QPoint &amp;position, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRgb&gt;</type>
            <name>colorTable</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>colorTable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorTable</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setColorTable</anchor>
            <arglist>(const QVector&lt;QRgb&gt; colors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>devicePixelRatio</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevicePixelRatio</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setDevicePixelRatio</anchor>
            <arglist>(qreal scaleFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(uint pixelValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>fill-1</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>fill-2</anchor>
            <arglist>(Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAlphaChannel</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>hasAlphaChannel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaChannel</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setAlphaChannel</anchor>
            <arglist>(const QImage &amp;alphaChannel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>alphaChannel</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>alphaChannel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>createAlphaMask</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>createAlphaMask</anchor>
            <arglist>(Qt::ImageConversionFlags flags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>createHeuristicMask</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>createHeuristicMask</anchor>
            <arglist>(bool clipTight) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>createMaskFromColor</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>createMaskFromColor</anchor>
            <arglist>(QRgb color, Qt::MaskMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>scaled</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>scaled-1</anchor>
            <arglist>(int width, int height, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>scaled</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>scaled</anchor>
            <arglist>(const QSize &amp;size, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>scaledToWidth</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>scaledToWidth</anchor>
            <arglist>(int width, Qt::TransformationMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>scaledToHeight</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>scaledToHeight</anchor>
            <arglist>(int height, Qt::TransformationMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>transformed</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>transformed</anchor>
            <arglist>(const QMatrix &amp;matrix, Qt::TransformationMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMatrix</type>
            <name>trueMatrix</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>trueMatrix</anchor>
            <arglist>(const QMatrix &amp;matrix, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>transformed</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>transformed-1</anchor>
            <arglist>(const QTransform &amp;matrix, Qt::TransformationMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTransform</type>
            <name>trueMatrix</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>trueMatrix-1</anchor>
            <arglist>(const QTransform &amp;matrix, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>mirrored</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>mirrored</anchor>
            <arglist>(bool horizontal, bool vertical) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage &amp;&amp;</type>
            <name>mirrored</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>mirrored-1</anchor>
            <arglist>(bool horizontal, bool vertical) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>rgbSwapped</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>rgbSwapped</anchor>
            <arglist>() const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage &amp;&amp;</type>
            <name>rgbSwapped</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>rgbSwapped-1</anchor>
            <arglist>() &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invertPixels</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>invertPixels</anchor>
            <arglist>(QImage::InvertMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColorSpace</type>
            <name>colorSpace</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>colorSpace</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>convertedToColorSpace</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>convertedToColorSpace</anchor>
            <arglist>(const QColorSpace &amp;colorSpace) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>convertToColorSpace</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>convertToColorSpace</anchor>
            <arglist>(const QColorSpace &amp;colorSpace)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorSpace</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setColorSpace</anchor>
            <arglist>(const QColorSpace &amp;colorSpace)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>applyColorTransform</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>applyColorTransform</anchor>
            <arglist>(const QColorTransform &amp;transform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>load-1</anchor>
            <arglist>(QIODevice *device, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QString &amp;fileName, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>loadFromData</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>loadFromData</anchor>
            <arglist>(const uchar *data, int len, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>loadFromData</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>loadFromData-1</anchor>
            <arglist>(const QByteArray &amp;data, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>save</anchor>
            <arglist>(const QString &amp;fileName, const char *format, int quality) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>save-1</anchor>
            <arglist>(QIODevice *device, const char *format, int quality) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QImage</type>
            <name>fromData</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>fromData</anchor>
            <arglist>(const uchar *data, int size, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QImage</type>
            <name>fromData</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>fromData-1</anchor>
            <arglist>(const QByteArray &amp;data, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serialNumber</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>serialNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>cacheKey</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>cacheKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dotsPerMeterX</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>dotsPerMeterX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dotsPerMeterY</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>dotsPerMeterY</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDotsPerMeterX</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setDotsPerMeterX</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDotsPerMeterY</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setDotsPerMeterY</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>offset</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>offset</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setOffset</anchor>
            <arglist>(const QPoint &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>textKeys</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>textKeys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>text</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;key, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat</type>
            <name>pixelFormat</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>pixelFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixelFormat</type>
            <name>toPixelFormat</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>toPixelFormat</anchor>
            <arglist>(QImage::Format format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QImage::Format</type>
            <name>toImageFormat</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>toImageFormat</anchor>
            <arglist>(QPixelFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CGImageRef</type>
            <name>toCGImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>toCGImage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>text-1</anchor>
            <arglist>(const char *key, const char *language) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QImageTextKeyLang&gt;</type>
            <name>textList</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>textList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>textLanguages</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>textLanguages</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>text-2</anchor>
            <arglist>(const QImageTextKeyLang &amp;keywordAndLanguage) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>setText-1</anchor>
            <arglist>(const char *key, const char *language, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>numColors</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>numColors</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumColors</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>setNumColors</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>numBytes</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>numBytes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QImage</type>
            <name>smoothScaled</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>smoothScaled</anchor>
            <arglist>(int w, int h) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QImageCleanupFunction</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImageCleanupFunction-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>operator-lt-lt-21</anchor>
            <arglist>(QDataStream &amp;stream, const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QImage &amp;image)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QImageIOHandler</name>
        <filename>qimageiohandler.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageIOHandler</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>QImageIOHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QImageIOHandler</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>dtor.QImageIOHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QByteArray &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>setFormat-1</anchor>
            <arglist>(const QByteArray &amp;format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>format</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QByteArray</type>
            <name>name</name>
            <anchorfile>qimageiohandler-obsolete.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>canRead</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>canRead</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>read</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(QImage *image) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>write</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(const QImage &amp;image)</arglist>
        </member>
        <member kind="enumeration">
            <name>ImageOption</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Size</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClipRect</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Description</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScaledClipRect</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScaledSize</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompressionRatio</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Gamma</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Quality</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Name</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SubType</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IncrementalReading</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Endianness</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Animation</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BackgroundColor</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImageFormat</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SupportedSubTypes</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OptimizedWrite</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProgressiveScanWrite</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImageTransformation</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransformedByDefault</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Transformation</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>Transformation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TransformationNone</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>Transformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransformationMirror</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>Transformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransformationFlip</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>Transformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransformationRotate180</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>Transformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransformationRotate90</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>Transformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransformationMirrorAndRotate90</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>Transformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransformationFlipAndRotate90</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>Transformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TransformationRotate270</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>Transformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QImageIOHandler::Transformation">
            <name>Transformations</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>Transformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>option</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>option</anchor>
            <arglist>(QImageIOHandler::ImageOption option) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setOption</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(QImageIOHandler::ImageOption option, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>supportsOption</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>supportsOption</anchor>
            <arglist>(QImageIOHandler::ImageOption option) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>jumpToNextImage</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>jumpToNextImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>jumpToImage</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>jumpToImage</anchor>
            <arglist>(int imageNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>loopCount</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>loopCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>imageCount</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>imageCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>nextImageDelay</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>nextImageDelay</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>currentImageNumber</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>currentImageNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>currentImageRect</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>currentImageRect</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QImageIOPlugin</name>
        <filename>qimageioplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageIOPlugin</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>QImageIOPlugin</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QImageIOPlugin</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>dtor.QImageIOPlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>Capability</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>Capability-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CanRead</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CanWrite</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CanReadIncremental</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QImageIOPlugin::Capability">
            <name>Capabilities</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QImageIOPlugin::Capabilities</type>
            <name>capabilities</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>capabilities</anchor>
            <arglist>(QIODevice *device, const QByteArray &amp;format) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QImageIOHandler *</type>
            <name>create</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(QIODevice *device, const QByteArray &amp;format) const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QImageReader</name>
        <filename>qimagereader.html</filename>
        <member kind="enumeration">
            <name>ImageReaderError</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>ImageReaderError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownError</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>ImageReaderError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FileNotFoundError</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>ImageReaderError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeviceError</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>ImageReaderError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsupportedFormatError</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>ImageReaderError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidDataError</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>ImageReaderError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageReader</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>QImageReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageReader</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>QImageReader-1</anchor>
            <arglist>(QIODevice *device, const QByteArray &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageReader</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>QImageReader-2</anchor>
            <arglist>(const QString &amp;fileName, const QByteArray &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QImageReader</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>dtor.QImageReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QByteArray &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>format</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoDetectImageFormat</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setAutoDetectImageFormat</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoDetectImageFormat</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>autoDetectImageFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDecideFormatFromContent</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setDecideFormatFromContent</anchor>
            <arglist>(bool ignored)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>decideFormatFromContent</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>decideFormatFromContent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage::Format</type>
            <name>imageFormat</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>imageFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>textKeys</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>textKeys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>text</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipRect</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setClipRect</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>clipRect</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>clipRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScaledSize</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setScaledSize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>scaledSize</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>scaledSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuality</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setQuality</anchor>
            <arglist>(int quality)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>quality</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>quality</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScaledClipRect</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setScaledClipRect</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>scaledClipRect</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>scaledClipRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackgroundColor</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setBackgroundColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>backgroundColor</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>backgroundColor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsAnimation</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>supportsAnimation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImageIOHandler::Transformations</type>
            <name>transformation</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>transformation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoTransform</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setAutoTransform</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoTransform</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>autoTransform</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGamma</name>
            <anchorfile>qimagereader-obsolete.html</anchorfile>
            <anchor>setGamma</anchor>
            <arglist>(float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>gamma</name>
            <anchorfile>qimagereader-obsolete.html</anchorfile>
            <anchor>gamma</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>subType</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>subType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>supportedSubTypes</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>supportedSubTypes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canRead</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>canRead</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>read</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>read</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>read</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>read-1</anchor>
            <arglist>(QImage *image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>jumpToNextImage</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>jumpToNextImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>jumpToImage</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>jumpToImage</anchor>
            <arglist>(int imageNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>loopCount</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>loopCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>imageCount</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>imageCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>nextImageDelay</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>nextImageDelay</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentImageNumber</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>currentImageNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>currentImageRect</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>currentImageRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImageReader::ImageReaderError</type>
            <name>error</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsOption</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>supportsOption</anchor>
            <arglist>(QImageIOHandler::ImageOption option) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>imageFormat</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>imageFormat-1</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>imageFormat</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>imageFormat-2</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>supportedImageFormats</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>supportedImageFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>supportedMimeTypes</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>supportedMimeTypes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>imageFormatsForMimeType</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>imageFormatsForMimeType</anchor>
            <arglist>(const QByteArray &amp;mimeType)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QImageTextKeyLang</name>
        <filename>qimagetextkeylang.html</filename>
    </compound>
    <compound kind="class">
        <name>QImageWriter</name>
        <filename>qimagewriter.html</filename>
        <member kind="enumeration">
            <name>ImageWriterError</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>ImageWriterError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownError</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>ImageWriterError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeviceError</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>ImageWriterError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsupportedFormatError</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>ImageWriterError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidImageError</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>ImageWriterError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageWriter</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>QImageWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageWriter</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>QImageWriter-1</anchor>
            <arglist>(QIODevice *device, const QByteArray &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageWriter</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>QImageWriter-2</anchor>
            <arglist>(const QString &amp;fileName, const QByteArray &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QImageWriter</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>dtor.QImageWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QByteArray &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>format</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuality</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setQuality</anchor>
            <arglist>(int quality)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>quality</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>quality</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompression</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setCompression</anchor>
            <arglist>(int compression)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compression</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>compression</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGamma</name>
            <anchorfile>qimagewriter-obsolete.html</anchorfile>
            <anchor>setGamma</anchor>
            <arglist>(float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>gamma</name>
            <anchorfile>qimagewriter-obsolete.html</anchorfile>
            <anchor>gamma</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSubType</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setSubType</anchor>
            <arglist>(const QByteArray &amp;type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>subType</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>subType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>supportedSubTypes</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>supportedSubTypes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptimizedWrite</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setOptimizedWrite</anchor>
            <arglist>(bool optimize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>optimizedWrite</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>optimizedWrite</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProgressiveScanWrite</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setProgressiveScanWrite</anchor>
            <arglist>(bool progressive)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>progressiveScanWrite</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>progressiveScanWrite</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImageIOHandler::Transformations</type>
            <name>transformation</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>transformation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransformation</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setTransformation</anchor>
            <arglist>(QImageIOHandler::Transformations transform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qimagewriter-obsolete.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qimagewriter-obsolete.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;key, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canWrite</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>canWrite</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImageWriter::ImageWriterError</type>
            <name>error</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsOption</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>supportsOption</anchor>
            <arglist>(QImageIOHandler::ImageOption option) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>supportedImageFormats</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>supportedImageFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>supportedMimeTypes</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>supportedMimeTypes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>imageFormatsForMimeType</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>imageFormatsForMimeType</anchor>
            <arglist>(const QByteArray &amp;mimeType)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QInputEvent</name>
        <filename>qinputevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>modifiers</name>
            <anchorfile>qinputevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ulong</type>
            <name>timestamp</name>
            <anchorfile>qinputevent.html</anchorfile>
            <anchor>timestamp</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QInputMethod</name>
        <filename>qinputmethod.html</filename>
        <base>QObject</base>
        <member kind="property" type="QRectF">
            <name>cursorRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>cursorRectangle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>anchorRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>anchorRectangle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>keyboardRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>keyboardRectangle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>inputItemClipRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>inputItemClipRectangle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>visible</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>animating</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>animating-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QLocale">
            <name>locale</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>locale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::LayoutDirection">
            <name>inputDirection</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>inputDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>inputItemTransform</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>inputItemTransform</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputItemTransform</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>setInputItemTransform</anchor>
            <arglist>(const QTransform &amp;transform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>inputItemRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>inputItemRectangle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputItemRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>setInputItemRectangle</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>cursorRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>cursorRectangle-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>anchorRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>anchorRectangle-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>keyboardRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>keyboardRectangle-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>inputItemClipRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>inputItemClipRectangle-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>Action</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>Action-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Click</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>Action-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContextMenu</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>Action-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAnimating</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>animating-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>locale-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>inputDirection</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>inputDirection-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVariant</type>
            <name>queryFocusObject</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>queryFocusObject</anchor>
            <arglist>(Qt::InputMethodQuery query, QVariant argument)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>show</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>show</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hide</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>hide</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(Qt::InputMethodQueries queries)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>commit</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>commit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invokeAction</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>invokeAction</anchor>
            <arglist>(QInputMethod::Action a, int cursorPosition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cursorRectangleChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>cursorRectangle-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>anchorRectangleChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>anchorRectangle-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>keyboardRectangleChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>keyboardRectangle-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>inputItemClipRectangleChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>inputItemClipRectangle-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>visibleChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>animatingChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>animating-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>localeChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>locale-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>inputDirectionChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>inputDirection-prop</anchor>
            <arglist>(Qt::LayoutDirection newDirection)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QInputMethodEvent</name>
        <filename>qinputmethodevent.html</filename>
        <base>QEvent</base>
        <member kind="enumeration">
            <name>AttributeType</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TextFormat</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cursor</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Language</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ruby</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Selection</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QInputMethodEvent::Attribute</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputMethodEvent</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>QInputMethodEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputMethodEvent</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>QInputMethodEvent-1</anchor>
            <arglist>(const QString &amp;preeditText, const QList&lt;QInputMethodEvent::Attribute&gt; &amp;attributes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCommitString</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>setCommitString</anchor>
            <arglist>(const QString &amp;commitString, int replaceFrom, int replaceLength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QList&lt;QInputMethodEvent::Attribute&gt; &amp;</type>
            <name>attributes</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QString &amp;</type>
            <name>preeditString</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>preeditString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QString &amp;</type>
            <name>commitString</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>commitString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>replacementStart</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>replacementStart</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>replacementLength</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>replacementLength</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputMethodEvent</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>QInputMethodEvent-2</anchor>
            <arglist>(const QInputMethodEvent &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QInputMethodEvent::Attribute</name>
        <filename>qinputmethodevent-attribute.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Attribute</name>
            <anchorfile>qinputmethodevent-attribute.html</anchorfile>
            <anchor>Attribute</anchor>
            <arglist>(AttributeType type, int start, int length, QVariant value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Attribute</name>
            <anchorfile>qinputmethodevent-attribute.html</anchorfile>
            <anchor>Attribute-1</anchor>
            <arglist>(AttributeType type, int start, int length)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QInputMethodQueryEvent</name>
        <filename>qinputmethodqueryevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputMethodQueryEvent</name>
            <anchorfile>qinputmethodqueryevent.html</anchorfile>
            <anchor>QInputMethodQueryEvent</anchor>
            <arglist>(Qt::InputMethodQueries queries)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::InputMethodQueries</type>
            <name>queries</name>
            <anchorfile>qinputmethodqueryevent.html</anchorfile>
            <anchor>queries</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qinputmethodqueryevent.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(Qt::InputMethodQuery query, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qinputmethodqueryevent.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(Qt::InputMethodQuery query) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIntValidator</name>
        <filename>qintvalidator.html</filename>
        <base>QValidator</base>
        <member kind="property" type="int">
            <name>bottom</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>top</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIntValidator</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>QIntValidator</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIntValidator</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>QIntValidator-1</anchor>
            <arglist>(int minimum, int maximum, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QIntValidator</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>dtor.QIntValidator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QValidator::State</type>
            <name>validate</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp;input, int &amp;pos) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fixup</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>fixup</anchor>
            <arglist>(QString &amp;input) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setRange</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>setRange</anchor>
            <arglist>(int bottom, int top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bottom</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>top</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bottomChanged</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>topChanged</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(int top)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QKeyEvent</name>
        <filename>qkeyevent.html</filename>
        <base>QInputEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyEvent</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>QKeyEvent</anchor>
            <arglist>(QEvent::Type type, int key, Qt::KeyboardModifiers modifiers, const QString &amp;text, bool autorep, ushort count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyEvent</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>QKeyEvent-1</anchor>
            <arglist>(QEvent::Type type, int key, Qt::KeyboardModifiers modifiers, quint32 nativeScanCode, quint32 nativeVirtualKey, quint32 nativeModifiers, const QString &amp;text, bool autorep, ushort count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>key</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matches</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>matches</anchor>
            <arglist>(QKeySequence::StandardKey key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>modifiers</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAutoRepeat</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>isAutoRepeat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>nativeScanCode</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>nativeScanCode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>nativeVirtualKey</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>nativeVirtualKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>nativeModifiers</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>nativeModifiers</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QKeySequence</name>
        <filename>qkeysequence.html</filename>
        <member kind="enumeration">
            <name>StandardKey</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownKey</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HelpContents</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WhatsThis</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Open</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Close</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Save</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>New</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Delete</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cut</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Copy</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Paste</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Undo</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Redo</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Back</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Forward</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Refresh</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ZoomIn</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ZoomOut</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Print</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AddTab</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NextChild</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreviousChild</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Find</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FindNext</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FindPrevious</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Replace</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectAll</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bold</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Italic</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Underline</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToNextChar</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToPreviousChar</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToNextWord</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToPreviousWord</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToNextLine</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToPreviousLine</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToNextPage</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToPreviousPage</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToStartOfLine</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToEndOfLine</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToStartOfBlock</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToEndOfBlock</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToStartOfDocument</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveToEndOfDocument</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectNextChar</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectPreviousChar</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectNextWord</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectPreviousWord</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectNextLine</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectPreviousLine</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectNextPage</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectPreviousPage</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectStartOfLine</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectEndOfLine</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectStartOfBlock</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectEndOfBlock</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectStartOfDocument</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectEndOfDocument</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeleteStartOfWord</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeleteEndOfWord</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeleteEndOfLine</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InsertParagraphSeparator</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InsertLineSeparator</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaveAs</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Preferences</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Quit</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FullScreen</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Deselect</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeleteCompleteLine</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Backspace</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cancel</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SequenceFormat</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>SequenceFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NativeText</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>SequenceFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PortableText</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>SequenceFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeySequence</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>QKeySequence</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeySequence</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>QKeySequence-1</anchor>
            <arglist>(const QString &amp;key, QKeySequence::SequenceFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeySequence</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>QKeySequence-2</anchor>
            <arglist>(int k1, int k2, int k3, int k4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeySequence</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>QKeySequence-3</anchor>
            <arglist>(const QKeySequence &amp;keysequence)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeySequence</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>QKeySequence-4</anchor>
            <arglist>(QKeySequence::StandardKey key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QKeySequence</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>dtor.QKeySequence</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>SequenceMatch</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>SequenceMatch-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoMatch</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>SequenceMatch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PartialMatch</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>SequenceMatch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExactMatch</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>SequenceMatch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(QKeySequence::SequenceFormat format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QKeySequence</type>
            <name>fromString</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(const QString &amp;str, QKeySequence::SequenceFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QKeySequence&gt;</type>
            <name>listFromString</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>listFromString</anchor>
            <arglist>(const QString &amp;str, QKeySequence::SequenceFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>listToString</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>listToString</anchor>
            <arglist>(const QList&lt;QKeySequence&gt; &amp;list, QKeySequence::SequenceFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeySequence::SequenceMatch</type>
            <name>matches</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>matches</anchor>
            <arglist>(const QKeySequence &amp;seq) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QKeySequence</type>
            <name>mnemonic</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>mnemonic</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QKeySequence&gt;</type>
            <name>keyBindings</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>keyBindings</anchor>
            <arglist>(QKeySequence::StandardKey key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator QString</name>
            <anchorfile>qkeysequence-obsolete.html</anchorfile>
            <anchor>operator-QString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>operator int</name>
            <anchorfile>qkeysequence-obsolete.html</anchorfile>
            <anchor>operator-int</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>operator[]</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(uint index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeySequence &amp;</type>
            <name>operator=</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QKeySequence &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeySequence &amp;</type>
            <name>operator=</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QKeySequence &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QKeySequence &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QKeySequence &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QKeySequence &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QKeySequence &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QKeySequence &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QKeySequence &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QKeySequence &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>qt_set_sequence_auto_mnemonic</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>qt_set_sequence_auto_mnemonic</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator-lt-lt-4</anchor>
            <arglist>(QDataStream &amp;stream, const QKeySequence &amp;sequence)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QKeySequence &amp;sequence)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLinearGradient</name>
        <filename>qlineargradient.html</filename>
        <base>QGradient</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLinearGradient</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>QLinearGradient</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLinearGradient</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>QLinearGradient-1</anchor>
            <arglist>(const QPointF &amp;start, const QPointF &amp;finalStop)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLinearGradient</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>QLinearGradient-2</anchor>
            <arglist>(qreal x1, qreal y1, qreal x2, qreal y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>start</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>start</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStart</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>setStart</anchor>
            <arglist>(const QPointF &amp;start)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStart</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>setStart-1</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>finalStop</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>finalStop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFinalStop</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>setFinalStop</anchor>
            <arglist>(const QPointF &amp;stop)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFinalStop</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>setFinalStop-1</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMouseEvent</name>
        <filename>qmouseevent.html</filename>
        <base>QInputEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseEvent</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>QMouseEvent</anchor>
            <arglist>(QEvent::Type type, const QPointF &amp;localPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseEvent</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>QMouseEvent-1</anchor>
            <arglist>(QEvent::Type type, const QPointF &amp;localPos, const QPointF &amp;screenPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseEvent</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>QMouseEvent-2</anchor>
            <arglist>(QEvent::Type type, const QPointF &amp;localPos, const QPointF &amp;windowPos, const QPointF &amp;screenPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseEvent</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>QMouseEvent-3</anchor>
            <arglist>(QEvent::Type type, const QPointF &amp;localPos, const QPointF &amp;windowPos, const QPointF &amp;screenPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::MouseEventSource source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>globalPos</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalX</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>globalX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalY</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>globalY</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>localPos</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>localPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>windowPos</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>windowPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>screenPos</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButton</type>
            <name>button</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>button</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>buttons</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseEventSource</type>
            <name>source</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseEventFlags</type>
            <name>flags</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMoveEvent</name>
        <filename>qmoveevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMoveEvent</name>
            <anchorfile>qmoveevent.html</anchorfile>
            <anchor>QMoveEvent</anchor>
            <arglist>(const QPoint &amp;pos, const QPoint &amp;oldPos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint &amp;</type>
            <name>pos</name>
            <anchorfile>qmoveevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint &amp;</type>
            <name>oldPos</name>
            <anchorfile>qmoveevent.html</anchorfile>
            <anchor>oldPos</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMovie</name>
        <filename>qmovie.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>speed</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>speed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="CacheMode">
            <name>cacheMode</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>cacheMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MovieState</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>MovieState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NotRunning</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>MovieState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Paused</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>MovieState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Running</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>MovieState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CacheMode</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>CacheMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CacheNone</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>CacheMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CacheAll</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>CacheMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMovie</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>QMovie</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMovie</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>QMovie-1</anchor>
            <arglist>(QIODevice *device, const QByteArray &amp;format, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMovie</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>QMovie-2</anchor>
            <arglist>(const QString &amp;fileName, const QByteArray &amp;format, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMovie</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>dtor.QMovie</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>supportedFormats</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>supportedFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QByteArray &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>format</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackgroundColor</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>setBackgroundColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>backgroundColor</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>backgroundColor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMovie::MovieState</type>
            <name>state</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>frameRect</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>frameRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>currentImage</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>currentImage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>currentPixmap</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>currentPixmap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImageReader::ImageReaderError</type>
            <name>lastError</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>lastError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>lastErrorString</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>lastErrorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>jumpToFrame</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>jumpToFrame</anchor>
            <arglist>(int frameNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>loopCount</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>loopCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>frameCount</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>frameCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>nextFrameDelay</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>nextFrameDelay</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentFrameNumber</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>currentFrameNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>speed</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>speed-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>scaledSize</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>scaledSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScaledSize</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>setScaledSize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMovie::CacheMode</type>
            <name>cacheMode</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>cacheMode-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCacheMode</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>cacheMode-prop</anchor>
            <arglist>(QMovie::CacheMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>started</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>started</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resized</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>resized</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updated</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>updated</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QMovie::MovieState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QImageReader::ImageReaderError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frameChanged</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>frameChanged</anchor>
            <arglist>(int frameNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>jumpToNextFrame</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>jumpToNextFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaused</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>setPaused</anchor>
            <arglist>(bool paused)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpeed</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>speed-prop</anchor>
            <arglist>(int percentSpeed)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNativeGestureEvent</name>
        <filename>qnativegestureevent.html</filename>
        <base>QInputEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNativeGestureEvent</name>
            <anchorfile>qnativegestureevent-obsolete.html</anchorfile>
            <anchor>QNativeGestureEvent</anchor>
            <arglist>(Qt::NativeGestureType type, const QPointF &amp;localPos, const QPointF &amp;windowPos, const QPointF &amp;screenPos, qreal realValue, ulong sequenceId, quint64 intValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNativeGestureEvent</name>
            <anchorfile>qnativegestureevent.html</anchorfile>
            <anchor>QNativeGestureEvent-1</anchor>
            <arglist>(Qt::NativeGestureType type, const QTouchDevice *device, const QPointF &amp;localPos, const QPointF &amp;windowPos, const QPointF &amp;screenPos, qreal realValue, ulong sequenceId, quint64 intValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::NativeGestureType</type>
            <name>gestureType</name>
            <anchorfile>qnativegestureevent.html</anchorfile>
            <anchor>gestureType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>value</name>
            <anchorfile>qnativegestureevent.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint</type>
            <name>pos</name>
            <anchorfile>qnativegestureevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint</type>
            <name>globalPos</name>
            <anchorfile>qnativegestureevent.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>localPos</name>
            <anchorfile>qnativegestureevent.html</anchorfile>
            <anchor>localPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>windowPos</name>
            <anchorfile>qnativegestureevent.html</anchorfile>
            <anchor>windowPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>screenPos</name>
            <anchorfile>qnativegestureevent.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTouchDevice *</type>
            <name>device</name>
            <anchorfile>qnativegestureevent.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOffscreenSurface</name>
        <filename>qoffscreensurface.html</filename>
        <base>QObject</base>
        <base>QSurface</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOffscreenSurface</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>QOffscreenSurface</anchor>
            <arglist>(QScreen *targetScreen, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOffscreenSurface</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>QOffscreenSurface-1</anchor>
            <arglist>(QScreen *targetScreen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOffscreenSurface</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>dtor.QOffscreenSurface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSurface::SurfaceType</type>
            <name>surfaceType</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>surfaceType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>create</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat</type>
            <name>requestedFormat</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>requestedFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>size</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScreen *</type>
            <name>screen</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>screen</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScreen</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>setScreen</anchor>
            <arglist>(QScreen *newScreen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>nativeHandle</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>nativeHandle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNativeHandle</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>setNativeHandle</anchor>
            <arglist>(void *handle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>screenChanged</name>
            <anchorfile>qoffscreensurface.html</anchorfile>
            <anchor>screenChanged</anchor>
            <arglist>(QScreen *screen)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLContext</name>
        <filename>qopenglcontext.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLContext</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>QOpenGLContext</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLContext</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>dtor.QOpenGLContext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShareContext</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>setShareContext</anchor>
            <arglist>(QOpenGLContext *shareContext)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScreen</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>setScreen</anchor>
            <arglist>(QScreen *screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNativeHandle</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>setNativeHandle</anchor>
            <arglist>(const QVariant &amp;handle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>shareContext</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>shareContext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContextGroup *</type>
            <name>shareGroup</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>shareGroup</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScreen *</type>
            <name>screen</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>screen</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>nativeHandle</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>nativeHandle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>defaultFramebufferObject</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>defaultFramebufferObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>makeCurrent</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>makeCurrent</anchor>
            <arglist>(QSurface *surface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doneCurrent</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>doneCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swapBuffers</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>swapBuffers</anchor>
            <arglist>(QSurface *surface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFunctionPointer</type>
            <name>getProcAddress</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>getProcAddress</anchor>
            <arglist>(const QByteArray &amp;procName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFunctionPointer</type>
            <name>getProcAddress</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>getProcAddress-1</anchor>
            <arglist>(const char *procName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurface *</type>
            <name>surface</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>surface</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOpenGLContext *</type>
            <name>currentContext</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>currentContext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>areSharing</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>areSharing</anchor>
            <arglist>(QOpenGLContext *first, QOpenGLContext *second)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFunctions *</type>
            <name>functions</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>functions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLExtraFunctions *</type>
            <name>extraFunctions</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>extraFunctions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractOpenGLFunctions *</type>
            <name>versionFunctions</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>versionFunctions</anchor>
            <arglist>(const QOpenGLVersionProfile &amp;versionProfile) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TYPE *</type>
            <name>versionFunctions</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>versionFunctions-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;QByteArray&gt;</type>
            <name>extensions</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>extensions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasExtension</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>hasExtension</anchor>
            <arglist>(const QByteArray &amp;extension) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void *</type>
            <name>openGLModuleHandle</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>openGLModuleHandle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>OpenGLModuleType</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>OpenGLModuleType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LibGL</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>OpenGLModuleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LibGLES</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>OpenGLModuleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOpenGLContext::OpenGLModuleType</type>
            <name>openGLModuleType</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>openGLModuleType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOpenGLES</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>isOpenGLES</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>supportsThreadedOpenGL</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>supportsThreadedOpenGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOpenGLContext *</type>
            <name>globalShareContext</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>globalShareContext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToBeDestroyed</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>aboutToBeDestroyed</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLContextGroup</name>
        <filename>qopenglcontextgroup.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOpenGLContext *&gt;</type>
            <name>shares</name>
            <anchorfile>qopenglcontextgroup.html</anchorfile>
            <anchor>shares</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOpenGLContextGroup *</type>
            <name>currentContextGroup</name>
            <anchorfile>qopenglcontextgroup.html</anchorfile>
            <anchor>currentContextGroup</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMatrix4x4</name>
        <filename>qmatrix4x4.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix4x4</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>QMatrix4x4</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix4x4</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>QMatrix4x4-2</anchor>
            <arglist>(const float *values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix4x4</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>QMatrix4x4-3</anchor>
            <arglist>(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix4x4</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>QMatrix4x4-4</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, float&gt; &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix4x4</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>QMatrix4x4</anchor>
            <arglist>(const QTransform &amp;transform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix4x4</name>
            <anchorfile>qmatrix4x4-obsolete.html</anchorfile>
            <anchor>QMatrix4x4-5</anchor>
            <arglist>(const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const float &amp;</type>
            <name>operator()</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()(int row, int column) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float &amp;</type>
            <name>operator()</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-28-29-1</anchor>
            <arglist>()(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>column</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>column</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumn</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>setColumn</anchor>
            <arglist>(int index, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>row</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>row</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRow</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>setRow</anchor>
            <arglist>(int index, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAffine</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>isAffine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isIdentity</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>isIdentity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToIdentity</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>setToIdentity</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>determinant</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>determinant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>inverted</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>inverted</anchor>
            <arglist>(bool *invertible) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>transposed</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix3x3</type>
            <name>normalMatrix</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>normalMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4 &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QMatrix4x4 &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4 &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QMatrix4x4 &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4 &amp;</type>
            <name>operator*=</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(const QMatrix4x4 &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4 &amp;</type>
            <name>operator*=</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a-eq-1</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4 &amp;</type>
            <name>operator/=</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMatrix4x4 &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMatrix4x4 &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(float angle, const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>scale-1</anchor>
            <arglist>(float x, float y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>scale-2</anchor>
            <arglist>(float x, float y, float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>scale-3</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>translate-1</anchor>
            <arglist>(float x, float y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(float x, float y, float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>rotate-1</anchor>
            <arglist>(float angle, float x, float y, float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>rotate-2</anchor>
            <arglist>(const QQuaternion &amp;quaternion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ortho</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>ortho-1</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ortho</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>ortho-2</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ortho</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>ortho</anchor>
            <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frustum</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>frustum</anchor>
            <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>perspective</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>perspective</anchor>
            <arglist>(float verticalAngle, float aspectRatio, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lookAt</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>lookAt</anchor>
            <arglist>(const QVector3D &amp;eye, const QVector3D &amp;center, const QVector3D &amp;up)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewport</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>viewport-1</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>viewport</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>viewport</anchor>
            <arglist>(float left, float bottom, float width, float height, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>flipCoordinates</name>
            <anchorfile>qmatrix4x4-obsolete.html</anchorfile>
            <anchor>flipCoordinates</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copyDataTo</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>copyDataTo</anchor>
            <arglist>(float *values) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>toAffine</name>
            <anchorfile>qmatrix4x4-obsolete.html</anchorfile>
            <anchor>toAffine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>toTransform</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>toTransform</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>toTransform</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>toTransform-1</anchor>
            <arglist>(float distanceToPlane) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>map</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(const QPoint &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>map</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>map-1</anchor>
            <arglist>(const QPointF &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>map</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>map-2</anchor>
            <arglist>(const QVector3D &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>mapVector</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>mapVector</anchor>
            <arglist>(const QVector3D &amp;vector) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>map</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>map-3</anchor>
            <arglist>(const QVector4D &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>mapRect</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>mapRect</anchor>
            <arglist>(const QRect &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRect</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>mapRect-1</anchor>
            <arglist>(const QRectF &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, float&gt;</type>
            <name>toGenericMatrix</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>toGenericMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float *</type>
            <name>data</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const float *</type>
            <name>data</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>data-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const float *</type>
            <name>constData</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>optimize</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>optimize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>qGenericMatrixToMatrix4x4</name>
            <anchorfile>qmatrix4x4-obsolete.html</anchorfile>
            <anchor>qGenericMatrixToMatrix4x4</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, float&gt; &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, float&gt;</type>
            <name>qGenericMatrixFromMatrix4x4</name>
            <anchorfile>qmatrix4x4-obsolete.html</anchorfile>
            <anchor>qGenericMatrixFromMatrix4x4</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>operator+</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QMatrix4x4 &amp;m1, const QMatrix4x4 &amp;m2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>operator-</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QMatrix4x4 &amp;m1, const QMatrix4x4 &amp;m2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>operator*</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(const QMatrix4x4 &amp;m1, const QMatrix4x4 &amp;m2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>operator*</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a-3</anchor>
            <arglist>(const QVector3D &amp;vector, const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>operator*</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a-4</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix, const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>operator*</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a-3</anchor>
            <arglist>(const QVector4D &amp;vector, const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>operator*</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a-4</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix, const QVector4D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator*</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a-1</anchor>
            <arglist>(const QPoint &amp;point, const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>operator*</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a-2</anchor>
            <arglist>(const QPointF &amp;point, const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator*</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a-3</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix, const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>operator*</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a-4</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix, const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>operator-</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>operator*</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a-5</anchor>
            <arglist>(float factor, const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>operator*</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2a-6</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix, float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>operator/</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-2f</anchor>
            <arglist>(const QMatrix4x4 &amp;matrix, float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>qFuzzyCompare</anchor>
            <arglist>(const QMatrix4x4 &amp;m1, const QMatrix4x4 &amp;m2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QMatrix4x4 &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QMatrix4x4 &amp;matrix)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMatrix</name>
        <filename>qmatrix.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>QMatrix-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>QMatrix-2</anchor>
            <arglist>(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix &amp;</type>
            <name>operator=</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>QMatrix-4</anchor>
            <arglist>(const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>setMatrix</anchor>
            <arglist>(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m11</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>m11</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m12</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>m12</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m21</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>m21</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m22</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>m22</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dx</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>dx</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dy</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>dy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-1</anchor>
            <arglist>(int x, int y, int *tx, int *ty) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(qreal x, qreal y, qreal *tx, qreal *ty) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>mapRect</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>mapRect-1</anchor>
            <arglist>(const QRect &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRect</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>mapRect</anchor>
            <arglist>(const QRectF &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-2</anchor>
            <arglist>(const QPoint &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-3</anchor>
            <arglist>(const QPointF &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-4</anchor>
            <arglist>(const QLine &amp;line) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-5</anchor>
            <arglist>(const QLineF &amp;line) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-6</anchor>
            <arglist>(const QPolygonF &amp;polygon) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-7</anchor>
            <arglist>(const QPolygon &amp;polygon) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-8</anchor>
            <arglist>(const QRegion &amp;region) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-9</anchor>
            <arglist>(const QPainterPath &amp;path) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>mapToPolygon</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>mapToPolygon</anchor>
            <arglist>(const QRect &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isIdentity</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>isIdentity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix &amp;</type>
            <name>translate</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix &amp;</type>
            <name>scale</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(qreal sx, qreal sy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix &amp;</type>
            <name>shear</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>shear</anchor>
            <arglist>(qreal sh, qreal sv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix &amp;</type>
            <name>rotate</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(qreal degrees)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInvertible</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>isInvertible</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>determinant</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>determinant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>inverted</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>inverted</anchor>
            <arglist>(bool *invertible) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMatrix &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMatrix &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix &amp;</type>
            <name>operator*=</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>operator*</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(const QMatrix &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator*</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-2a-3</anchor>
            <arglist>(const QPoint &amp;point, const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>operator*</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-2a-4</anchor>
            <arglist>(const QPointF &amp;point, const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>operator*</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-2a-5</anchor>
            <arglist>(const QLineF &amp;line, const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>operator*</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-2a-6</anchor>
            <arglist>(const QLine &amp;line, const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>operator*</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-2a-8</anchor>
            <arglist>(const QPolygonF &amp;polygon, const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>operator*</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-2a-7</anchor>
            <arglist>(const QPolygon &amp;polygon, const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>operator*</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-2a-9</anchor>
            <arglist>(const QRegion &amp;region, const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>operator*</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-2a-10</anchor>
            <arglist>(const QPainterPath &amp;path, const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>qHash-2</anchor>
            <arglist>(const QMatrix &amp;key, uint seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-lt-lt-17</anchor>
            <arglist>(QDataStream &amp;stream, const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>qFuzzyCompare</anchor>
            <arglist>(const QMatrix &amp;m1, const QMatrix &amp;m2)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageDialogOptions</name>
        <filename>qmessagedialogoptions.html</filename>
        <class>QMessageDialogOptions::CustomButton</class>
    </compound>
    <compound kind="class">
        <name>QMessageDialogOptions::CustomButton</name>
        <filename>qmessagedialogoptions-custombutton.html</filename>
    </compound>
    <compound kind="class">
        <name>QMetaTypeId</name>
        <filename>qmetatypeid.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLBuffer</name>
        <filename>qopenglbuffer.html</filename>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>VertexBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IndexBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PixelPackBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PixelUnpackBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>QOpenGLBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>QOpenGLBuffer-1</anchor>
            <arglist>(QOpenGLBuffer::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>QOpenGLBuffer-2</anchor>
            <arglist>(const QOpenGLBuffer &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>dtor.QOpenGLBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLBuffer &amp;</type>
            <name>operator=</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QOpenGLBuffer &amp;other)</arglist>
        </member>
        <member kind="enumeration">
            <name>UsagePattern</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StreamDraw</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StreamRead</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StreamCopy</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticDraw</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticRead</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticCopy</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicDraw</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicRead</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicCopy</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Access</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Access-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ReadOnly</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteOnly</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadWrite</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RangeAccessFlag</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>RangeRead</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RangeWrite</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RangeInvalidate</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RangeInvalidateBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RangeFlushExplicit</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RangeUnsynchronized</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOpenGLBuffer::RangeAccessFlag">
            <name>RangeAccessFlags</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLBuffer::Type</type>
            <name>type</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLBuffer::UsagePattern</type>
            <name>usagePattern</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>usagePattern</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUsagePattern</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>setUsagePattern</anchor>
            <arglist>(QOpenGLBuffer::UsagePattern value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>release-1</anchor>
            <arglist>(QOpenGLBuffer::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bufferId</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>bufferId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>read</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(int offset, void *data, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>write</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(int offset, const void *data, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocate</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>allocate</anchor>
            <arglist>(const void *data, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocate</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>allocate-1</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>map</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(QOpenGLBuffer::Access access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>mapRange</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>mapRange</anchor>
            <arglist>(int offset, int count, QOpenGLBuffer::RangeAccessFlags access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unmap</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>unmap</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLDebugLogger</name>
        <filename>qopengldebuglogger.html</filename>
        <base>QObject</base>
        <member kind="property" type="LoggingMode">
            <name>loggingMode</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>loggingMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>LoggingMode</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>LoggingMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AsynchronousLogging</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>LoggingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SynchronousLogging</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>LoggingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLDebugLogger</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>QOpenGLDebugLogger</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLDebugLogger</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>dtor.QOpenGLDebugLogger</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>initialize</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLogging</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>isLogging</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLDebugLogger::LoggingMode</type>
            <name>loggingMode</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>loggingMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>maximumMessageLength</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>maximumMessageLength</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pushGroup</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>pushGroup</anchor>
            <arglist>(const QString &amp;name, GLuint id, QOpenGLDebugMessage::Source source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>popGroup</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>popGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableMessages</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>enableMessages</anchor>
            <arglist>(QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types, QOpenGLDebugMessage::Severities severities)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableMessages</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>enableMessages-1</anchor>
            <arglist>(const QVector&lt;GLuint&gt; &amp;ids, QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableMessages</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>disableMessages</anchor>
            <arglist>(QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types, QOpenGLDebugMessage::Severities severities)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableMessages</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>disableMessages-1</anchor>
            <arglist>(const QVector&lt;GLuint&gt; &amp;ids, QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOpenGLDebugMessage&gt;</type>
            <name>loggedMessages</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>loggedMessages</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>logMessage</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>logMessage</anchor>
            <arglist>(const QOpenGLDebugMessage &amp;debugMessage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startLogging</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>startLogging</anchor>
            <arglist>(QOpenGLDebugLogger::LoggingMode loggingMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stopLogging</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>stopLogging</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>messageLogged</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>messageLogged</anchor>
            <arglist>(const QOpenGLDebugMessage &amp;debugMessage)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLDebugMessage</name>
        <filename>qopengldebugmessage.html</filename>
        <member kind="enumeration">
            <name>Source</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InvalidSource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>APISource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowSystemSource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShaderCompilerSource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ThirdPartySource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationSource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OtherSource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastSource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnySource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOpenGLDebugMessage::Source">
            <name>Sources</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InvalidType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ErrorType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeprecatedBehaviorType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UndefinedBehaviorType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PortabilityType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PerformanceType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OtherType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MarkerType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GroupPushType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GroupPopType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnyType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOpenGLDebugMessage::Type">
            <name>Types</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Severity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InvalidSeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HighSeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MediumSeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LowSeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotificationSeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastSeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnySeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOpenGLDebugMessage::Severity">
            <name>Severities</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLDebugMessage</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>QOpenGLDebugMessage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLDebugMessage</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>QOpenGLDebugMessage-1</anchor>
            <arglist>(const QOpenGLDebugMessage &amp;debugMessage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLDebugMessage &amp;</type>
            <name>operator=</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QOpenGLDebugMessage &amp;debugMessage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLDebugMessage &amp;</type>
            <name>operator=</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QOpenGLDebugMessage &amp;&amp;debugMessage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLDebugMessage</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>dtor.QOpenGLDebugMessage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QOpenGLDebugMessage &amp;debugMessage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLDebugMessage::Source</type>
            <name>source</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLDebugMessage::Type</type>
            <name>type</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLDebugMessage::Severity</type>
            <name>severity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>severity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>id</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>message</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>message</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOpenGLDebugMessage</type>
            <name>createApplicationMessage</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>createApplicationMessage</anchor>
            <arglist>(const QString &amp;text, GLuint id, QOpenGLDebugMessage::Severity severity, QOpenGLDebugMessage::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOpenGLDebugMessage</type>
            <name>createThirdPartyMessage</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>createThirdPartyMessage</anchor>
            <arglist>(const QString &amp;text, GLuint id, QOpenGLDebugMessage::Severity severity, QOpenGLDebugMessage::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QOpenGLDebugMessage &amp;debugMessage) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QOpenGLDebugMessage &amp;debugMessage) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDebug debug, QOpenGLDebugMessage::Source source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDebug debug, QOpenGLDebugMessage::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(QDebug debug, QOpenGLDebugMessage::Severity severity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-lt-lt-4</anchor>
            <arglist>(QDebug debug, const QOpenGLDebugMessage &amp;message)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLExtraFunctions</name>
        <filename>qopenglextrafunctions.html</filename>
        <base>QOpenGLFunctions</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLExtraFunctions</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>QOpenGLExtraFunctions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLExtraFunctions</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>QOpenGLExtraFunctions-1</anchor>
            <arglist>(QOpenGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glReadBuffer</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glReadBuffer</anchor>
            <arglist>(GLenum src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDrawRangeElements</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDrawRangeElements</anchor>
            <arglist>(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexImage3D</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glTexImage3D</anchor>
            <arglist>(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexSubImage3D</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glTexSubImage3D</anchor>
            <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCopyTexSubImage3D</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glCopyTexSubImage3D</anchor>
            <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCompressedTexImage3D</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glCompressedTexImage3D</anchor>
            <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCompressedTexSubImage3D</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glCompressedTexSubImage3D</anchor>
            <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenQueries</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGenQueries</anchor>
            <arglist>(GLsizei n, GLuint *ids)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteQueries</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDeleteQueries</anchor>
            <arglist>(GLsizei n, const GLuint *ids)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsQuery</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glIsQuery</anchor>
            <arglist>(GLuint id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBeginQuery</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBeginQuery</anchor>
            <arglist>(GLenum target, GLuint id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glEndQuery</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glEndQuery</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetQueryiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetQueryiv</anchor>
            <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetQueryObjectuiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetQueryObjectuiv</anchor>
            <arglist>(GLuint id, GLenum pname, GLuint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glUnmapBuffer</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUnmapBuffer</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetBufferPointerv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetBufferPointerv</anchor>
            <arglist>(GLenum target, GLenum pname, void **params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDrawBuffers</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDrawBuffers</anchor>
            <arglist>(GLsizei n, const GLenum *bufs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix2x3fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniformMatrix2x3fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix3x2fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniformMatrix3x2fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix2x4fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniformMatrix2x4fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix4x2fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniformMatrix4x2fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix3x4fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniformMatrix3x4fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix4x3fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniformMatrix4x3fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlitFramebuffer</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBlitFramebuffer</anchor>
            <arglist>(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glRenderbufferStorageMultisample</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glRenderbufferStorageMultisample</anchor>
            <arglist>(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFramebufferTextureLayer</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glFramebufferTextureLayer</anchor>
            <arglist>(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>glMapBufferRange</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glMapBufferRange</anchor>
            <arglist>(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFlushMappedBufferRange</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glFlushMappedBufferRange</anchor>
            <arglist>(GLenum target, GLintptr offset, GLsizeiptr length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindVertexArray</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBindVertexArray</anchor>
            <arglist>(GLuint array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteVertexArrays</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDeleteVertexArrays</anchor>
            <arglist>(GLsizei n, const GLuint *arrays)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenVertexArrays</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGenVertexArrays</anchor>
            <arglist>(GLsizei n, GLuint *arrays)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsVertexArray</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glIsVertexArray</anchor>
            <arglist>(GLuint array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetIntegeri_v</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetIntegeri_v</anchor>
            <arglist>(GLenum target, GLuint index, GLint *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBeginTransformFeedback</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBeginTransformFeedback</anchor>
            <arglist>(GLenum primitiveMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glEndTransformFeedback</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glEndTransformFeedback</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindBufferRange</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBindBufferRange</anchor>
            <arglist>(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindBufferBase</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBindBufferBase</anchor>
            <arglist>(GLenum target, GLuint index, GLuint buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTransformFeedbackVaryings</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glTransformFeedbackVaryings</anchor>
            <arglist>(GLuint program, GLsizei count, const GLchar *const *varyings, GLenum bufferMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetTransformFeedbackVarying</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetTransformFeedbackVarying</anchor>
            <arglist>(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttribIPointer</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glVertexAttribIPointer</anchor>
            <arglist>(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetVertexAttribIiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetVertexAttribIiv</anchor>
            <arglist>(GLuint index, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetVertexAttribIuiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetVertexAttribIuiv</anchor>
            <arglist>(GLuint index, GLenum pname, GLuint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttribI4i</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glVertexAttribI4i</anchor>
            <arglist>(GLuint index, GLint x, GLint y, GLint z, GLint w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttribI4ui</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glVertexAttribI4ui</anchor>
            <arglist>(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttribI4iv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glVertexAttribI4iv</anchor>
            <arglist>(GLuint index, const GLint *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttribI4uiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glVertexAttribI4uiv</anchor>
            <arglist>(GLuint index, const GLuint *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetUniformuiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetUniformuiv</anchor>
            <arglist>(GLuint program, GLint location, GLuint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLint</type>
            <name>glGetFragDataLocation</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetFragDataLocation</anchor>
            <arglist>(GLuint program, const GLchar *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1ui</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniform1ui</anchor>
            <arglist>(GLint location, GLuint v0)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2ui</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniform2ui</anchor>
            <arglist>(GLint location, GLuint v0, GLuint v1)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3ui</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniform3ui</anchor>
            <arglist>(GLint location, GLuint v0, GLuint v1, GLuint v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4ui</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniform4ui</anchor>
            <arglist>(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1uiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniform1uiv</anchor>
            <arglist>(GLint location, GLsizei count, const GLuint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2uiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniform2uiv</anchor>
            <arglist>(GLint location, GLsizei count, const GLuint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3uiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniform3uiv</anchor>
            <arglist>(GLint location, GLsizei count, const GLuint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4uiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniform4uiv</anchor>
            <arglist>(GLint location, GLsizei count, const GLuint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glClearBufferiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glClearBufferiv</anchor>
            <arglist>(GLenum buffer, GLint drawbuffer, const GLint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glClearBufferuiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glClearBufferuiv</anchor>
            <arglist>(GLenum buffer, GLint drawbuffer, const GLuint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glClearBufferfv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glClearBufferfv</anchor>
            <arglist>(GLenum buffer, GLint drawbuffer, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glClearBufferfi</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glClearBufferfi</anchor>
            <arglist>(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const GLubyte *</type>
            <name>glGetStringi</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetStringi</anchor>
            <arglist>(GLenum name, GLuint index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCopyBufferSubData</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glCopyBufferSubData</anchor>
            <arglist>(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetUniformIndices</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetUniformIndices</anchor>
            <arglist>(GLuint program, GLsizei uniformCount, const GLchar *const *uniformNames, GLuint *uniformIndices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetActiveUniformsiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetActiveUniformsiv</anchor>
            <arglist>(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>glGetUniformBlockIndex</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetUniformBlockIndex</anchor>
            <arglist>(GLuint program, const GLchar *uniformBlockName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetActiveUniformBlockiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetActiveUniformBlockiv</anchor>
            <arglist>(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetActiveUniformBlockName</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetActiveUniformBlockName</anchor>
            <arglist>(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformBlockBinding</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUniformBlockBinding</anchor>
            <arglist>(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDrawArraysInstanced</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDrawArraysInstanced</anchor>
            <arglist>(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDrawElementsInstanced</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDrawElementsInstanced</anchor>
            <arglist>(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLsync</type>
            <name>glFenceSync</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glFenceSync</anchor>
            <arglist>(GLenum condition, GLbitfield flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsSync</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glIsSync</anchor>
            <arglist>(GLsync sync)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteSync</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDeleteSync</anchor>
            <arglist>(GLsync sync)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>glClientWaitSync</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glClientWaitSync</anchor>
            <arglist>(GLsync sync, GLbitfield flags, GLuint64 timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glWaitSync</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glWaitSync</anchor>
            <arglist>(GLsync sync, GLbitfield flags, GLuint64 timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetInteger64v</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetInteger64v</anchor>
            <arglist>(GLenum pname, GLint64 *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetSynciv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetSynciv</anchor>
            <arglist>(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetInteger64i_v</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetInteger64i_v</anchor>
            <arglist>(GLenum target, GLuint index, GLint64 *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetBufferParameteri64v</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetBufferParameteri64v</anchor>
            <arglist>(GLenum target, GLenum pname, GLint64 *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenSamplers</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGenSamplers</anchor>
            <arglist>(GLsizei count, GLuint *samplers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteSamplers</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDeleteSamplers</anchor>
            <arglist>(GLsizei count, const GLuint *samplers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsSampler</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glIsSampler</anchor>
            <arglist>(GLuint sampler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindSampler</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBindSampler</anchor>
            <arglist>(GLuint unit, GLuint sampler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glSamplerParameteri</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glSamplerParameteri</anchor>
            <arglist>(GLuint sampler, GLenum pname, GLint param)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glSamplerParameteriv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glSamplerParameteriv</anchor>
            <arglist>(GLuint sampler, GLenum pname, const GLint *param)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glSamplerParameterf</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glSamplerParameterf</anchor>
            <arglist>(GLuint sampler, GLenum pname, GLfloat param)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glSamplerParameterfv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glSamplerParameterfv</anchor>
            <arglist>(GLuint sampler, GLenum pname, const GLfloat *param)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetSamplerParameteriv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetSamplerParameteriv</anchor>
            <arglist>(GLuint sampler, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetSamplerParameterfv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetSamplerParameterfv</anchor>
            <arglist>(GLuint sampler, GLenum pname, GLfloat *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttribDivisor</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glVertexAttribDivisor</anchor>
            <arglist>(GLuint index, GLuint divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindTransformFeedback</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBindTransformFeedback</anchor>
            <arglist>(GLenum target, GLuint id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteTransformFeedbacks</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDeleteTransformFeedbacks</anchor>
            <arglist>(GLsizei n, const GLuint *ids)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenTransformFeedbacks</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGenTransformFeedbacks</anchor>
            <arglist>(GLsizei n, GLuint *ids)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsTransformFeedback</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glIsTransformFeedback</anchor>
            <arglist>(GLuint id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glPauseTransformFeedback</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glPauseTransformFeedback</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glResumeTransformFeedback</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glResumeTransformFeedback</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetProgramBinary</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetProgramBinary</anchor>
            <arglist>(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramBinary</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramBinary</anchor>
            <arglist>(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramParameteri</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramParameteri</anchor>
            <arglist>(GLuint program, GLenum pname, GLint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glInvalidateFramebuffer</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glInvalidateFramebuffer</anchor>
            <arglist>(GLenum target, GLsizei numAttachments, const GLenum *attachments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glInvalidateSubFramebuffer</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glInvalidateSubFramebuffer</anchor>
            <arglist>(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexStorage2D</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glTexStorage2D</anchor>
            <arglist>(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexStorage3D</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glTexStorage3D</anchor>
            <arglist>(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetInternalformativ</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetInternalformativ</anchor>
            <arglist>(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDispatchCompute</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDispatchCompute</anchor>
            <arglist>(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDispatchComputeIndirect</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDispatchComputeIndirect</anchor>
            <arglist>(GLintptr indirect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDrawArraysIndirect</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDrawArraysIndirect</anchor>
            <arglist>(GLenum mode, const void *indirect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDrawElementsIndirect</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDrawElementsIndirect</anchor>
            <arglist>(GLenum mode, GLenum type, const void *indirect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFramebufferParameteri</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glFramebufferParameteri</anchor>
            <arglist>(GLenum target, GLenum pname, GLint param)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetFramebufferParameteriv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetFramebufferParameteriv</anchor>
            <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetProgramInterfaceiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetProgramInterfaceiv</anchor>
            <arglist>(GLuint program, GLenum programInterface, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>glGetProgramResourceIndex</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetProgramResourceIndex</anchor>
            <arglist>(GLuint program, GLenum programInterface, const GLchar *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetProgramResourceName</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetProgramResourceName</anchor>
            <arglist>(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetProgramResourceiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetProgramResourceiv</anchor>
            <arglist>(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLint</type>
            <name>glGetProgramResourceLocation</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetProgramResourceLocation</anchor>
            <arglist>(GLuint program, GLenum programInterface, const GLchar *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUseProgramStages</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glUseProgramStages</anchor>
            <arglist>(GLuint pipeline, GLbitfield stages, GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glActiveShaderProgram</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glActiveShaderProgram</anchor>
            <arglist>(GLuint pipeline, GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>glCreateShaderProgramv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glCreateShaderProgramv</anchor>
            <arglist>(GLenum type, GLsizei count, const GLchar *const *strings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindProgramPipeline</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBindProgramPipeline</anchor>
            <arglist>(GLuint pipeline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteProgramPipelines</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDeleteProgramPipelines</anchor>
            <arglist>(GLsizei n, const GLuint *pipelines)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenProgramPipelines</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGenProgramPipelines</anchor>
            <arglist>(GLsizei n, GLuint *pipelines)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsProgramPipeline</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glIsProgramPipeline</anchor>
            <arglist>(GLuint pipeline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetProgramPipelineiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetProgramPipelineiv</anchor>
            <arglist>(GLuint pipeline, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform1i</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform1i</anchor>
            <arglist>(GLuint program, GLint location, GLint v0)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform2i</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform2i</anchor>
            <arglist>(GLuint program, GLint location, GLint v0, GLint v1)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform3i</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform3i</anchor>
            <arglist>(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform4i</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform4i</anchor>
            <arglist>(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform1ui</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform1ui</anchor>
            <arglist>(GLuint program, GLint location, GLuint v0)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform2ui</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform2ui</anchor>
            <arglist>(GLuint program, GLint location, GLuint v0, GLuint v1)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform3ui</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform3ui</anchor>
            <arglist>(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform4ui</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform4ui</anchor>
            <arglist>(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform1f</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform1f</anchor>
            <arglist>(GLuint program, GLint location, GLfloat v0)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform2f</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform2f</anchor>
            <arglist>(GLuint program, GLint location, GLfloat v0, GLfloat v1)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform3f</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform3f</anchor>
            <arglist>(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform4f</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform4f</anchor>
            <arglist>(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform1iv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform1iv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, const GLint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform2iv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform2iv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, const GLint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform3iv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform3iv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, const GLint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform4iv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform4iv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, const GLint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform1uiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform1uiv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, const GLuint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform2uiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform2uiv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, const GLuint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform3uiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform3uiv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, const GLuint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform4uiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform4uiv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, const GLuint *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform1fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform1fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform2fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform2fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform3fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform3fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniform4fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniform4fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniformMatrix2fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniformMatrix2fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniformMatrix3fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniformMatrix3fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniformMatrix4fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniformMatrix4fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniformMatrix2x3fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniformMatrix2x3fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniformMatrix3x2fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniformMatrix3x2fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniformMatrix2x4fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniformMatrix2x4fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniformMatrix4x2fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniformMatrix4x2fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniformMatrix3x4fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniformMatrix3x4fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glProgramUniformMatrix4x3fv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glProgramUniformMatrix4x3fv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glValidateProgramPipeline</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glValidateProgramPipeline</anchor>
            <arglist>(GLuint pipeline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetProgramPipelineInfoLog</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetProgramPipelineInfoLog</anchor>
            <arglist>(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindImageTexture</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBindImageTexture</anchor>
            <arglist>(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetBooleani_v</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetBooleani_v</anchor>
            <arglist>(GLenum target, GLuint index, GLboolean *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glMemoryBarrier</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glMemoryBarrier</anchor>
            <arglist>(GLbitfield barriers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glMemoryBarrierByRegion</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glMemoryBarrierByRegion</anchor>
            <arglist>(GLbitfield barriers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexStorage2DMultisample</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glTexStorage2DMultisample</anchor>
            <arglist>(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetMultisamplefv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetMultisamplefv</anchor>
            <arglist>(GLenum pname, GLuint index, GLfloat *val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glSampleMaski</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glSampleMaski</anchor>
            <arglist>(GLuint maskNumber, GLbitfield mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetTexLevelParameteriv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetTexLevelParameteriv</anchor>
            <arglist>(GLenum target, GLint level, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetTexLevelParameterfv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetTexLevelParameterfv</anchor>
            <arglist>(GLenum target, GLint level, GLenum pname, GLfloat *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindVertexBuffer</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBindVertexBuffer</anchor>
            <arglist>(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttribFormat</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glVertexAttribFormat</anchor>
            <arglist>(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttribIFormat</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glVertexAttribIFormat</anchor>
            <arglist>(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttribBinding</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glVertexAttribBinding</anchor>
            <arglist>(GLuint attribindex, GLuint bindingindex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexBindingDivisor</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glVertexBindingDivisor</anchor>
            <arglist>(GLuint bindingindex, GLuint divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendBarrier</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBlendBarrier</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCopyImageSubData</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glCopyImageSubData</anchor>
            <arglist>(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDebugMessageControl</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDebugMessageControl</anchor>
            <arglist>(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDebugMessageInsert</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDebugMessageInsert</anchor>
            <arglist>(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDebugMessageCallback</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDebugMessageCallback</anchor>
            <arglist>(GLDEBUGPROC callback, const void *userParam)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>glGetDebugMessageLog</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetDebugMessageLog</anchor>
            <arglist>(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glPushDebugGroup</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glPushDebugGroup</anchor>
            <arglist>(GLenum source, GLuint id, GLsizei length, const GLchar *message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glPopDebugGroup</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glPopDebugGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glObjectLabel</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glObjectLabel</anchor>
            <arglist>(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetObjectLabel</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetObjectLabel</anchor>
            <arglist>(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glObjectPtrLabel</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glObjectPtrLabel</anchor>
            <arglist>(const void *ptr, GLsizei length, const GLchar *label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetObjectPtrLabel</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetObjectPtrLabel</anchor>
            <arglist>(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetPointerv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetPointerv</anchor>
            <arglist>(GLenum pname, void **params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glEnablei</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glEnablei</anchor>
            <arglist>(GLenum target, GLuint index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDisablei</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDisablei</anchor>
            <arglist>(GLenum target, GLuint index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendEquationi</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBlendEquationi</anchor>
            <arglist>(GLuint buf, GLenum mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendEquationSeparatei</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBlendEquationSeparatei</anchor>
            <arglist>(GLuint buf, GLenum modeRGB, GLenum modeAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendFunci</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBlendFunci</anchor>
            <arglist>(GLuint buf, GLenum src, GLenum dst)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendFuncSeparatei</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glBlendFuncSeparatei</anchor>
            <arglist>(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glColorMaski</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glColorMaski</anchor>
            <arglist>(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsEnabledi</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glIsEnabledi</anchor>
            <arglist>(GLenum target, GLuint index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDrawElementsBaseVertex</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDrawElementsBaseVertex</anchor>
            <arglist>(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDrawRangeElementsBaseVertex</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDrawRangeElementsBaseVertex</anchor>
            <arglist>(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDrawElementsInstancedBaseVertex</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glDrawElementsInstancedBaseVertex</anchor>
            <arglist>(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFramebufferTexture</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glFramebufferTexture</anchor>
            <arglist>(GLenum target, GLenum attachment, GLuint texture, GLint level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glPrimitiveBoundingBox</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glPrimitiveBoundingBox</anchor>
            <arglist>(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>glGetGraphicsResetStatus</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetGraphicsResetStatus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glReadnPixels</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glReadnPixels</anchor>
            <arglist>(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetnUniformfv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetnUniformfv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetnUniformiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetnUniformiv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei bufSize, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetnUniformuiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetnUniformuiv</anchor>
            <arglist>(GLuint program, GLint location, GLsizei bufSize, GLuint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glMinSampleShading</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glMinSampleShading</anchor>
            <arglist>(GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glPatchParameteri</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glPatchParameteri</anchor>
            <arglist>(GLenum pname, GLint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexParameterIiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glTexParameterIiv</anchor>
            <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexParameterIuiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glTexParameterIuiv</anchor>
            <arglist>(GLenum target, GLenum pname, const GLuint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetTexParameterIiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetTexParameterIiv</anchor>
            <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetTexParameterIuiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetTexParameterIuiv</anchor>
            <arglist>(GLenum target, GLenum pname, GLuint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glSamplerParameterIiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glSamplerParameterIiv</anchor>
            <arglist>(GLuint sampler, GLenum pname, const GLint *param)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glSamplerParameterIuiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glSamplerParameterIuiv</anchor>
            <arglist>(GLuint sampler, GLenum pname, const GLuint *param)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetSamplerParameterIiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetSamplerParameterIiv</anchor>
            <arglist>(GLuint sampler, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetSamplerParameterIuiv</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glGetSamplerParameterIuiv</anchor>
            <arglist>(GLuint sampler, GLenum pname, GLuint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexBuffer</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glTexBuffer</anchor>
            <arglist>(GLenum target, GLenum internalformat, GLuint buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexBufferRange</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glTexBufferRange</anchor>
            <arglist>(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexStorage3DMultisample</name>
            <anchorfile>qopenglextrafunctions.html</anchorfile>
            <anchor>glTexStorage3DMultisample</anchor>
            <arglist>(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLFramebufferObject</name>
        <filename>qopenglframebufferobject.html</filename>
        <member kind="enumeration">
            <name>Attachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>Attachment-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoAttachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CombinedDepthStencil</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Depth</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject</anchor>
            <arglist>(const QSize &amp;size, GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-1</anchor>
            <arglist>(int width, int height, GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-2</anchor>
            <arglist>(const QSize &amp;size, QOpenGLFramebufferObject::Attachment attachment, GLenum target, GLenum internalFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-3</anchor>
            <arglist>(int width, int height, QOpenGLFramebufferObject::Attachment attachment, GLenum target, GLenum internalFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-4</anchor>
            <arglist>(const QSize &amp;size, const QOpenGLFramebufferObjectFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-5</anchor>
            <arglist>(int width, int height, const QOpenGLFramebufferObjectFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>dtor.QOpenGLFramebufferObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addColorAttachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>addColorAttachment</anchor>
            <arglist>(const QSize &amp;size, GLenum internalFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addColorAttachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>addColorAttachment-1</anchor>
            <arglist>(int width, int height, GLenum internalFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObjectFormat</type>
            <name>format</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBound</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>isBound</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>release</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>texture</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;GLuint&gt;</type>
            <name>textures</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>textures</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>takeTexture</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>takeTexture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>takeTexture</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>takeTexture-1</anchor>
            <arglist>(int colorAttachmentIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QSize&gt;</type>
            <name>sizes</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>sizes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>toImage</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>toImage-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>toImage</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>toImage</anchor>
            <arglist>(bool flipped) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>toImage</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>toImage-2</anchor>
            <arglist>(bool flipped, int colorAttachmentIndex) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObject::Attachment</type>
            <name>attachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>attachment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>setAttachment</anchor>
            <arglist>(QOpenGLFramebufferObject::Attachment attachment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>handle</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>bindDefault</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>bindDefault</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLFramebufferObjects</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>hasOpenGLFramebufferObjects</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLFramebufferBlit</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>hasOpenGLFramebufferBlit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>FramebufferRestorePolicy</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>FramebufferRestorePolicy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DontRestoreFramebufferBinding</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>FramebufferRestorePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RestoreFramebufferBindingToDefault</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>FramebufferRestorePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RestoreFrameBufferBinding</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>FramebufferRestorePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>blitFramebuffer</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>blitFramebuffer</anchor>
            <arglist>(QOpenGLFramebufferObject *target, const QRect &amp;targetRect, QOpenGLFramebufferObject *source, const QRect &amp;sourceRect, GLbitfield buffers, GLenum filter, int readColorAttachmentIndex, int drawColorAttachmentIndex, QOpenGLFramebufferObject::FramebufferRestorePolicy restorePolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>blitFramebuffer</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>blitFramebuffer-1</anchor>
            <arglist>(QOpenGLFramebufferObject *target, const QRect &amp;targetRect, QOpenGLFramebufferObject *source, const QRect &amp;sourceRect, GLbitfield buffers, GLenum filter, int readColorAttachmentIndex, int drawColorAttachmentIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>blitFramebuffer</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>blitFramebuffer-2</anchor>
            <arglist>(QOpenGLFramebufferObject *target, const QRect &amp;targetRect, QOpenGLFramebufferObject *source, const QRect &amp;sourceRect, GLbitfield buffers, GLenum filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>blitFramebuffer</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>blitFramebuffer-3</anchor>
            <arglist>(QOpenGLFramebufferObject *target, QOpenGLFramebufferObject *source, GLbitfield buffers, GLenum filter)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLFramebufferObjectFormat</name>
        <filename>qopenglframebufferobjectformat.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObjectFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>QOpenGLFramebufferObjectFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObjectFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>QOpenGLFramebufferObjectFormat-1</anchor>
            <arglist>(const QOpenGLFramebufferObjectFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObjectFormat &amp;</type>
            <name>operator=</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QOpenGLFramebufferObjectFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLFramebufferObjectFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>dtor.QOpenGLFramebufferObjectFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSamples</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setSamples</anchor>
            <arglist>(int samples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>samples</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>samples</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipmap</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setMipmap</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mipmap</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>mipmap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttachment</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setAttachment</anchor>
            <arglist>(QOpenGLFramebufferObject::Attachment attachment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObject::Attachment</type>
            <name>attachment</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>attachment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureTarget</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setTextureTarget</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>textureTarget</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>textureTarget</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInternalTextureFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setInternalTextureFormat</anchor>
            <arglist>(GLenum internalTextureFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>internalTextureFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>internalTextureFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QOpenGLFramebufferObjectFormat &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QOpenGLFramebufferObjectFormat &amp;other) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions</name>
        <filename>qopenglfunctions.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFunctions</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>QOpenGLFunctions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFunctions</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>QOpenGLFunctions-1</anchor>
            <arglist>(QOpenGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLFunctions</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>dtor.QOpenGLFunctions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>OpenGLFeature</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Multitexture</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Shaders</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Buffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Framebuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendColor</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendEquation</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendEquationSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendFuncSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendSubtract</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompressedTextures</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Multisample</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StencilSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NPOTTextures</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NPOTTextureRepeat</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FixedFunctionPipeline</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureRGFormats</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MultipleRenderTargets</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendEquationAdvanced</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOpenGLFunctions::OpenGLFeature">
            <name>OpenGLFeatures</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFunctions::OpenGLFeatures</type>
            <name>openGLFeatures</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>openGLFeatures</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasOpenGLFeature</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>hasOpenGLFeature</anchor>
            <arglist>(QOpenGLFunctions::OpenGLFeature feature) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initializeOpenGLFunctions</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>initializeOpenGLFunctions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initializeGLFunctions</name>
            <anchorfile>qopenglfunctions-obsolete.html</anchorfile>
            <anchor>initializeGLFunctions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindTexture</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBindTexture</anchor>
            <arglist>(GLenum target, GLuint texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendFunc</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBlendFunc</anchor>
            <arglist>(GLenum sfactor, GLenum dfactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glClear</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glClear</anchor>
            <arglist>(GLbitfield mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glClearColor</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glClearColor</anchor>
            <arglist>(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glClearStencil</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glClearStencil</anchor>
            <arglist>(GLint s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glColorMask</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glColorMask</anchor>
            <arglist>(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCopyTexImage2D</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCopyTexImage2D</anchor>
            <arglist>(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCopyTexSubImage2D</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCopyTexSubImage2D</anchor>
            <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCullFace</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCullFace</anchor>
            <arglist>(GLenum mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteTextures</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDeleteTextures</anchor>
            <arglist>(GLsizei n, const GLuint *textures)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDepthFunc</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDepthFunc</anchor>
            <arglist>(GLenum func)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDepthMask</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDepthMask</anchor>
            <arglist>(GLboolean flag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDisable</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDisable</anchor>
            <arglist>(GLenum cap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDrawArrays</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDrawArrays</anchor>
            <arglist>(GLenum mode, GLint first, GLsizei count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDrawElements</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDrawElements</anchor>
            <arglist>(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glEnable</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glEnable</anchor>
            <arglist>(GLenum cap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFinish</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glFinish</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFlush</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glFlush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFrontFace</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glFrontFace</anchor>
            <arglist>(GLenum mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenTextures</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGenTextures</anchor>
            <arglist>(GLsizei n, GLuint *textures)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetBooleanv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetBooleanv</anchor>
            <arglist>(GLenum pname, GLboolean *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>glGetError</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetFloatv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetFloatv</anchor>
            <arglist>(GLenum pname, GLfloat *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetIntegerv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetIntegerv</anchor>
            <arglist>(GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const GLubyte *</type>
            <name>glGetString</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetString</anchor>
            <arglist>(GLenum name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetTexParameterfv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetTexParameterfv</anchor>
            <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetTexParameteriv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetTexParameteriv</anchor>
            <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glHint</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glHint</anchor>
            <arglist>(GLenum target, GLenum mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsEnabled</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glIsEnabled</anchor>
            <arglist>(GLenum cap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsTexture</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glIsTexture</anchor>
            <arglist>(GLuint texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glLineWidth</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glLineWidth</anchor>
            <arglist>(GLfloat width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glPixelStorei</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glPixelStorei</anchor>
            <arglist>(GLenum pname, GLint param)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glPolygonOffset</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glPolygonOffset</anchor>
            <arglist>(GLfloat factor, GLfloat units)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glReadPixels</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glReadPixels</anchor>
            <arglist>(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glScissor</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glScissor</anchor>
            <arglist>(GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glStencilFunc</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glStencilFunc</anchor>
            <arglist>(GLenum func, GLint ref, GLuint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glStencilMask</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glStencilMask</anchor>
            <arglist>(GLuint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glStencilOp</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glStencilOp</anchor>
            <arglist>(GLenum fail, GLenum zfail, GLenum zpass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexImage2D</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glTexImage2D</anchor>
            <arglist>(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexParameterf</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glTexParameterf</anchor>
            <arglist>(GLenum target, GLenum pname, GLfloat param)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexParameterfv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glTexParameterfv</anchor>
            <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexParameteri</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glTexParameteri</anchor>
            <arglist>(GLenum target, GLenum pname, GLint param)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexParameteriv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glTexParameteriv</anchor>
            <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glTexSubImage2D</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glTexSubImage2D</anchor>
            <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glViewport</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glViewport</anchor>
            <arglist>(GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glActiveTexture</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glActiveTexture</anchor>
            <arglist>(GLenum texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glAttachShader</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glAttachShader</anchor>
            <arglist>(GLuint program, GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindAttribLocation</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBindAttribLocation</anchor>
            <arglist>(GLuint program, GLuint index, const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindBuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBindBuffer</anchor>
            <arglist>(GLenum target, GLuint buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindFramebuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBindFramebuffer</anchor>
            <arglist>(GLenum target, GLuint framebuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindRenderbuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBindRenderbuffer</anchor>
            <arglist>(GLenum target, GLuint renderbuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendColor</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBlendColor</anchor>
            <arglist>(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendEquation</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBlendEquation</anchor>
            <arglist>(GLenum mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendEquationSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBlendEquationSeparate</anchor>
            <arglist>(GLenum modeRGB, GLenum modeAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendFuncSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBlendFuncSeparate</anchor>
            <arglist>(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBufferData</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBufferData</anchor>
            <arglist>(GLenum target, qopengl_GLsizeiptr size, const void *data, GLenum usage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBufferSubData</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBufferSubData</anchor>
            <arglist>(GLenum target, qopengl_GLintptr offset, qopengl_GLsizeiptr size, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>glCheckFramebufferStatus</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCheckFramebufferStatus</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glClearDepthf</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glClearDepthf</anchor>
            <arglist>(GLclampf depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCompileShader</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCompileShader</anchor>
            <arglist>(GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCompressedTexImage2D</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCompressedTexImage2D</anchor>
            <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCompressedTexSubImage2D</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCompressedTexSubImage2D</anchor>
            <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>glCreateProgram</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCreateProgram</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>glCreateShader</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCreateShader</anchor>
            <arglist>(GLenum type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteBuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDeleteBuffers</anchor>
            <arglist>(GLsizei n, const GLuint *buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteFramebuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDeleteFramebuffers</anchor>
            <arglist>(GLsizei n, const GLuint *framebuffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteProgram</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDeleteProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteRenderbuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDeleteRenderbuffers</anchor>
            <arglist>(GLsizei n, const GLuint *renderbuffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteShader</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDeleteShader</anchor>
            <arglist>(GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDepthRangef</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDepthRangef</anchor>
            <arglist>(GLclampf zNear, GLclampf zFar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDetachShader</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDetachShader</anchor>
            <arglist>(GLuint program, GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDisableVertexAttribArray</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDisableVertexAttribArray</anchor>
            <arglist>(GLuint index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glEnableVertexAttribArray</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glEnableVertexAttribArray</anchor>
            <arglist>(GLuint index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFramebufferRenderbuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glFramebufferRenderbuffer</anchor>
            <arglist>(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFramebufferTexture2D</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glFramebufferTexture2D</anchor>
            <arglist>(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenBuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGenBuffers</anchor>
            <arglist>(GLsizei n, GLuint *buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenerateMipmap</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGenerateMipmap</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenFramebuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGenFramebuffers</anchor>
            <arglist>(GLsizei n, GLuint *framebuffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenRenderbuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGenRenderbuffers</anchor>
            <arglist>(GLsizei n, GLuint *renderbuffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetActiveAttrib</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetActiveAttrib</anchor>
            <arglist>(GLuint program, GLuint index, GLsizei bufsize, GLsizei *length, GLint *size, GLenum *type, char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetActiveUniform</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetActiveUniform</anchor>
            <arglist>(GLuint program, GLuint index, GLsizei bufsize, GLsizei *length, GLint *size, GLenum *type, char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetAttachedShaders</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetAttachedShaders</anchor>
            <arglist>(GLuint program, GLsizei maxcount, GLsizei *count, GLuint *shaders)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLint</type>
            <name>glGetAttribLocation</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetAttribLocation</anchor>
            <arglist>(GLuint program, const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetBufferParameteriv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetBufferParameteriv</anchor>
            <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetFramebufferAttachmentParameteriv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetFramebufferAttachmentParameteriv</anchor>
            <arglist>(GLenum target, GLenum attachment, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetProgramiv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetProgramiv</anchor>
            <arglist>(GLuint program, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetProgramInfoLog</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetProgramInfoLog</anchor>
            <arglist>(GLuint program, GLsizei bufsize, GLsizei *length, char *infolog)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetRenderbufferParameteriv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetRenderbufferParameteriv</anchor>
            <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetShaderiv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetShaderiv</anchor>
            <arglist>(GLuint shader, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetShaderInfoLog</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetShaderInfoLog</anchor>
            <arglist>(GLuint shader, GLsizei bufsize, GLsizei *length, char *infolog)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetShaderPrecisionFormat</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetShaderPrecisionFormat</anchor>
            <arglist>(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetShaderSource</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetShaderSource</anchor>
            <arglist>(GLuint shader, GLsizei bufsize, GLsizei *length, char *source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetUniformfv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetUniformfv</anchor>
            <arglist>(GLuint program, GLint location, GLfloat *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetUniformiv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetUniformiv</anchor>
            <arglist>(GLuint program, GLint location, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLint</type>
            <name>glGetUniformLocation</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetUniformLocation</anchor>
            <arglist>(GLuint program, const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetVertexAttribfv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetVertexAttribfv</anchor>
            <arglist>(GLuint index, GLenum pname, GLfloat *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetVertexAttribiv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetVertexAttribiv</anchor>
            <arglist>(GLuint index, GLenum pname, GLint *params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetVertexAttribPointerv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetVertexAttribPointerv</anchor>
            <arglist>(GLuint index, GLenum pname, void **pointer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsBuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glIsBuffer</anchor>
            <arglist>(GLuint buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsFramebuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glIsFramebuffer</anchor>
            <arglist>(GLuint framebuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsProgram</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glIsProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsRenderbuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glIsRenderbuffer</anchor>
            <arglist>(GLuint renderbuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsShader</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glIsShader</anchor>
            <arglist>(GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glLinkProgram</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glLinkProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glReleaseShaderCompiler</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glReleaseShaderCompiler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glRenderbufferStorage</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glRenderbufferStorage</anchor>
            <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glSampleCoverage</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glSampleCoverage</anchor>
            <arglist>(GLclampf value, GLboolean invert)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glShaderBinary</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glShaderBinary</anchor>
            <arglist>(GLint n, const GLuint *shaders, GLenum binaryformat, const void *binary, GLint length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glShaderSource</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glShaderSource</anchor>
            <arglist>(GLuint shader, GLsizei count, const char **string, const GLint *length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glStencilFuncSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glStencilFuncSeparate</anchor>
            <arglist>(GLenum face, GLenum func, GLint ref, GLuint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glStencilMaskSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glStencilMaskSeparate</anchor>
            <arglist>(GLenum face, GLuint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glStencilOpSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glStencilOpSeparate</anchor>
            <arglist>(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform1f</anchor>
            <arglist>(GLint location, GLfloat x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform1fv</anchor>
            <arglist>(GLint location, GLsizei count, const GLfloat *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1i</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform1i</anchor>
            <arglist>(GLint location, GLint x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1iv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform1iv</anchor>
            <arglist>(GLint location, GLsizei count, const GLint *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform2f</anchor>
            <arglist>(GLint location, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform2fv</anchor>
            <arglist>(GLint location, GLsizei count, const GLfloat *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2i</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform2i</anchor>
            <arglist>(GLint location, GLint x, GLint y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2iv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform2iv</anchor>
            <arglist>(GLint location, GLsizei count, const GLint *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform3f</anchor>
            <arglist>(GLint location, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform3fv</anchor>
            <arglist>(GLint location, GLsizei count, const GLfloat *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3i</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform3i</anchor>
            <arglist>(GLint location, GLint x, GLint y, GLint z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3iv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform3iv</anchor>
            <arglist>(GLint location, GLsizei count, const GLint *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform4f</anchor>
            <arglist>(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform4fv</anchor>
            <arglist>(GLint location, GLsizei count, const GLfloat *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4i</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform4i</anchor>
            <arglist>(GLint location, GLint x, GLint y, GLint z, GLint w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4iv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform4iv</anchor>
            <arglist>(GLint location, GLsizei count, const GLint *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix2fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniformMatrix2fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix3fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniformMatrix3fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix4fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniformMatrix4fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUseProgram</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUseProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glValidateProgram</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glValidateProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib1f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib1f</anchor>
            <arglist>(GLuint indx, GLfloat x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib1fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib1fv</anchor>
            <arglist>(GLuint indx, const GLfloat *values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib2f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib2f</anchor>
            <arglist>(GLuint indx, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib2fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib2fv</anchor>
            <arglist>(GLuint indx, const GLfloat *values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib3f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib3f</anchor>
            <arglist>(GLuint indx, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib3fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib3fv</anchor>
            <arglist>(GLuint indx, const GLfloat *values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib4f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib4f</anchor>
            <arglist>(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib4fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib4fv</anchor>
            <arglist>(GLuint indx, const GLfloat *values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttribPointer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttribPointer</anchor>
            <arglist>(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *ptr)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_0</name>
        <filename>qopenglfunctions-1-0.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_0_CoreBackend</name>
        <filename>qopenglfunctions-1-0-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_0_DeprecatedBackend</name>
        <filename>qopenglfunctions-1-0-deprecatedbackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_1</name>
        <filename>qopenglfunctions-1-1.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_1_CoreBackend</name>
        <filename>qopenglfunctions-1-1-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_1_DeprecatedBackend</name>
        <filename>qopenglfunctions-1-1-deprecatedbackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_2</name>
        <filename>qopenglfunctions-1-2.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_2_CoreBackend</name>
        <filename>qopenglfunctions-1-2-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_2_DeprecatedBackend</name>
        <filename>qopenglfunctions-1-2-deprecatedbackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_3</name>
        <filename>qopenglfunctions-1-3.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_3_CoreBackend</name>
        <filename>qopenglfunctions-1-3-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_3_DeprecatedBackend</name>
        <filename>qopenglfunctions-1-3-deprecatedbackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_4</name>
        <filename>qopenglfunctions-1-4.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_4_CoreBackend</name>
        <filename>qopenglfunctions-1-4-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_4_DeprecatedBackend</name>
        <filename>qopenglfunctions-1-4-deprecatedbackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_5</name>
        <filename>qopenglfunctions-1-5.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_5_CoreBackend</name>
        <filename>qopenglfunctions-1-5-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_2_0</name>
        <filename>qopenglfunctions-2-0.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_2_0_CoreBackend</name>
        <filename>qopenglfunctions-2-0-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_2_0_DeprecatedBackend</name>
        <filename>qopenglfunctions-2-0-deprecatedbackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_2_1</name>
        <filename>qopenglfunctions-2-1.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_2_1_CoreBackend</name>
        <filename>qopenglfunctions-2-1-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_0</name>
        <filename>qopenglfunctions-3-0.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_0_CoreBackend</name>
        <filename>qopenglfunctions-3-0-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_0_DeprecatedBackend</name>
        <filename>qopenglfunctions-3-0-deprecatedbackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_1</name>
        <filename>qopenglfunctions-3-1.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_1_CoreBackend</name>
        <filename>qopenglfunctions-3-1-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_2_Compatibility</name>
        <filename>qopenglfunctions-3-2-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_2_Core</name>
        <filename>qopenglfunctions-3-2-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_2_CoreBackend</name>
        <filename>qopenglfunctions-3-2-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_3_Compatibility</name>
        <filename>qopenglfunctions-3-3-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_3_Core</name>
        <filename>qopenglfunctions-3-3-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_3_CoreBackend</name>
        <filename>qopenglfunctions-3-3-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_3_DeprecatedBackend</name>
        <filename>qopenglfunctions-3-3-deprecatedbackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_0_Compatibility</name>
        <filename>qopenglfunctions-4-0-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_0_Core</name>
        <filename>qopenglfunctions-4-0-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_0_CoreBackend</name>
        <filename>qopenglfunctions-4-0-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_1_Compatibility</name>
        <filename>qopenglfunctions-4-1-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_1_Core</name>
        <filename>qopenglfunctions-4-1-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_1_CoreBackend</name>
        <filename>qopenglfunctions-4-1-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_2_Compatibility</name>
        <filename>qopenglfunctions-4-2-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_2_Core</name>
        <filename>qopenglfunctions-4-2-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_2_CoreBackend</name>
        <filename>qopenglfunctions-4-2-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_3_Compatibility</name>
        <filename>qopenglfunctions-4-3-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_3_Core</name>
        <filename>qopenglfunctions-4-3-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_3_CoreBackend</name>
        <filename>qopenglfunctions-4-3-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_4_Compatibility</name>
        <filename>qopenglfunctions-4-4-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_4_Core</name>
        <filename>qopenglfunctions-4-4-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_4_CoreBackend</name>
        <filename>qopenglfunctions-4-4-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_5_Compatibility</name>
        <filename>qopenglfunctions-4-5-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_5_Core</name>
        <filename>qopenglfunctions-4-5-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_5_CoreBackend</name>
        <filename>qopenglfunctions-4-5-corebackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_5_DeprecatedBackend</name>
        <filename>qopenglfunctions-4-5-deprecatedbackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_ES2</name>
        <filename>qopenglfunctions-es2.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLPaintDevice</name>
        <filename>qopenglpaintdevice.html</filename>
        <base>QPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLPaintDevice</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>QOpenGLPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLPaintDevice</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>QOpenGLPaintDevice-1</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLPaintDevice</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>QOpenGLPaintDevice-2</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLPaintDevice</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>dtor.QOpenGLPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>context</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>context</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevicePixelRatio</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setDevicePixelRatio</anchor>
            <arglist>(qreal devicePixelRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dotsPerMeterX</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>dotsPerMeterX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dotsPerMeterY</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>dotsPerMeterY</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDotsPerMeterX</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setDotsPerMeterX</anchor>
            <arglist>(qreal dpmx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDotsPerMeterY</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setDotsPerMeterY</anchor>
            <arglist>(qreal dpmy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaintFlipped</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setPaintFlipped</anchor>
            <arglist>(bool flipped)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>paintFlipped</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>paintFlipped</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>ensureActiveTarget</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>ensureActiveTarget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>metric</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>metric</anchor>
            <arglist>(QPaintDevice::PaintDeviceMetric metric) const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLPixelTransferOptions</name>
        <filename>qopenglpixeltransferoptions.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLPixelTransferOptions</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>QOpenGLPixelTransferOptions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLPixelTransferOptions</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>dtor.QOpenGLPixelTransferOptions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(int alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>alignment</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>alignment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSkipImages</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setSkipImages</anchor>
            <arglist>(int skipImages)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>skipImages</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>skipImages</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSkipRows</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setSkipRows</anchor>
            <arglist>(int skipRows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>skipRows</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>skipRows</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSkipPixels</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setSkipPixels</anchor>
            <arglist>(int skipPixels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>skipPixels</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>skipPixels</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImageHeight</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setImageHeight</anchor>
            <arglist>(int imageHeight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>imageHeight</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>imageHeight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowLength</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setRowLength</anchor>
            <arglist>(int rowLength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowLength</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>rowLength</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeastSignificantByteFirst</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setLeastSignificantByteFirst</anchor>
            <arglist>(bool lsbFirst)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLeastSignificantBitFirst</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>isLeastSignificantBitFirst</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSwapBytesEnabled</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setSwapBytesEnabled</anchor>
            <arglist>(bool swapBytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSwapBytesEnabled</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>isSwapBytesEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLShader</name>
        <filename>qopenglshader.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>ShaderTypeBit</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Vertex</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Fragment</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Geometry</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TessellationControl</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TessellationEvaluation</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Compute</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOpenGLShader::ShaderTypeBit">
            <name>ShaderType</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLShader</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>QOpenGLShader</anchor>
            <arglist>(QOpenGLShader::ShaderType type, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLShader</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>dtor.QOpenGLShader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLShader::ShaderType</type>
            <name>shaderType</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>shaderType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceCode</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>compileSourceCode</anchor>
            <arglist>(const char *source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceCode</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>compileSourceCode-1</anchor>
            <arglist>(const QByteArray &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceCode</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>compileSourceCode-2</anchor>
            <arglist>(const QString &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceFile</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>compileSourceFile</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>sourceCode</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>sourceCode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCompiled</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>isCompiled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>log</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>log</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>shaderId</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>shaderId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLShaders</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>hasOpenGLShaders</anchor>
            <arglist>(QOpenGLShader::ShaderType type, QOpenGLContext *context)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLShaderProgram</name>
        <filename>qopenglshaderprogram.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLShaderProgram</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>QOpenGLShaderProgram</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLShaderProgram</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>dtor.QOpenGLShaderProgram</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShader</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShader</anchor>
            <arglist>(QOpenGLShader *shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeShader</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>removeShader</anchor>
            <arglist>(QOpenGLShader *shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOpenGLShader *&gt;</type>
            <name>shaders</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>shaders</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceCode</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const char *source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceCode-1</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QByteArray &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceCode-2</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QString &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceFile</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceFile</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addCacheableShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addCacheableShaderFromSourceCode</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const char *source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addCacheableShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addCacheableShaderFromSourceCode-1</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QByteArray &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addCacheableShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addCacheableShaderFromSourceCode-2</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QString &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addCacheableShaderFromSourceFile</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addCacheableShaderFromSourceFile</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAllShaders</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>removeAllShaders</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>link</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>link</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLinked</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>isLinked</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>log</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>log</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>programId</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>programId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxGeometryOutputVertices</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>maxGeometryOutputVertices</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPatchVertexCount</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setPatchVertexCount</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>patchVertexCount</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>patchVertexCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultOuterTessellationLevels</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setDefaultOuterTessellationLevels</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;levels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;float&gt;</type>
            <name>defaultOuterTessellationLevels</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>defaultOuterTessellationLevels</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultInnerTessellationLevels</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setDefaultInnerTessellationLevels</anchor>
            <arglist>(const QVector&lt;float&gt; &amp;levels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;float&gt;</type>
            <name>defaultInnerTessellationLevels</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>defaultInnerTessellationLevels</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindAttributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>bindAttributeLocation</anchor>
            <arglist>(const char *name, int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindAttributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>bindAttributeLocation-1</anchor>
            <arglist>(const QByteArray &amp;name, int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindAttributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>bindAttributeLocation-2</anchor>
            <arglist>(const QString &amp;name, int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>attributeLocation</anchor>
            <arglist>(const char *name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>attributeLocation-1</anchor>
            <arglist>(const QByteArray &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>attributeLocation-2</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue</anchor>
            <arglist>(int location, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-1</anchor>
            <arglist>(int location, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-2</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-3</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-4</anchor>
            <arglist>(int location, const QVector2D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-5</anchor>
            <arglist>(int location, const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-6</anchor>
            <arglist>(int location, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-7</anchor>
            <arglist>(int location, const QColor &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-8</anchor>
            <arglist>(int location, const GLfloat *values, int columns, int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-9</anchor>
            <arglist>(const char *name, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-10</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-11</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-12</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-13</anchor>
            <arglist>(const char *name, const QVector2D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-14</anchor>
            <arglist>(const char *name, const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-15</anchor>
            <arglist>(const char *name, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-16</anchor>
            <arglist>(const char *name, const QColor &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-17</anchor>
            <arglist>(const char *name, const GLfloat *values, int columns, int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray</anchor>
            <arglist>(int location, const GLfloat *values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-1</anchor>
            <arglist>(int location, const QVector2D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-2</anchor>
            <arglist>(int location, const QVector3D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-3</anchor>
            <arglist>(int location, const QVector4D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-4</anchor>
            <arglist>(int location, GLenum type, const void *values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-5</anchor>
            <arglist>(const char *name, const GLfloat *values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-6</anchor>
            <arglist>(const char *name, const QVector2D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-7</anchor>
            <arglist>(const char *name, const QVector3D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-8</anchor>
            <arglist>(const char *name, const QVector4D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-9</anchor>
            <arglist>(const char *name, GLenum type, const void *values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeBuffer</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeBuffer</anchor>
            <arglist>(int location, GLenum type, int offset, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeBuffer</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeBuffer-1</anchor>
            <arglist>(const char *name, GLenum type, int offset, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>enableAttributeArray</anchor>
            <arglist>(int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>enableAttributeArray-1</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>disableAttributeArray</anchor>
            <arglist>(int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>disableAttributeArray-1</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>uniformLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>uniformLocation</anchor>
            <arglist>(const char *name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>uniformLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>uniformLocation-1</anchor>
            <arglist>(const QByteArray &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>uniformLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>uniformLocation-2</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue</anchor>
            <arglist>(int location, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-1</anchor>
            <arglist>(int location, GLint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-2</anchor>
            <arglist>(int location, GLuint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-3</anchor>
            <arglist>(int location, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-4</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-5</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-6</anchor>
            <arglist>(int location, const QVector2D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-7</anchor>
            <arglist>(int location, const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-8</anchor>
            <arglist>(int location, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-9</anchor>
            <arglist>(int location, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-10</anchor>
            <arglist>(int location, const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-11</anchor>
            <arglist>(int location, const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-12</anchor>
            <arglist>(int location, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-13</anchor>
            <arglist>(int location, const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-14</anchor>
            <arglist>(int location, const QMatrix2x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-15</anchor>
            <arglist>(int location, const QMatrix2x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-16</anchor>
            <arglist>(int location, const QMatrix2x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-17</anchor>
            <arglist>(int location, const QMatrix3x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-18</anchor>
            <arglist>(int location, const QMatrix3x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-19</anchor>
            <arglist>(int location, const QMatrix3x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-20</anchor>
            <arglist>(int location, const QMatrix4x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-21</anchor>
            <arglist>(int location, const QMatrix4x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-22</anchor>
            <arglist>(int location, const QMatrix4x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-23</anchor>
            <arglist>(int location, const GLfloat [2][2] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-24</anchor>
            <arglist>(int location, const GLfloat [3][3] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-25</anchor>
            <arglist>(int location, const GLfloat [4][4] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-26</anchor>
            <arglist>(int location, const QTransform &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-27</anchor>
            <arglist>(const char *name, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-28</anchor>
            <arglist>(const char *name, GLint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-29</anchor>
            <arglist>(const char *name, GLuint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-30</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-31</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-32</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-33</anchor>
            <arglist>(const char *name, const QVector2D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-34</anchor>
            <arglist>(const char *name, const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-35</anchor>
            <arglist>(const char *name, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-36</anchor>
            <arglist>(const char *name, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-37</anchor>
            <arglist>(const char *name, const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-38</anchor>
            <arglist>(const char *name, const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-39</anchor>
            <arglist>(const char *name, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-40</anchor>
            <arglist>(const char *name, const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-41</anchor>
            <arglist>(const char *name, const QMatrix2x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-42</anchor>
            <arglist>(const char *name, const QMatrix2x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-43</anchor>
            <arglist>(const char *name, const QMatrix2x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-44</anchor>
            <arglist>(const char *name, const QMatrix3x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-45</anchor>
            <arglist>(const char *name, const QMatrix3x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-46</anchor>
            <arglist>(const char *name, const QMatrix3x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-47</anchor>
            <arglist>(const char *name, const QMatrix4x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-48</anchor>
            <arglist>(const char *name, const QMatrix4x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-49</anchor>
            <arglist>(const char *name, const QMatrix4x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-50</anchor>
            <arglist>(const char *name, const GLfloat [2][2] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-51</anchor>
            <arglist>(const char *name, const GLfloat [3][3] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-52</anchor>
            <arglist>(const char *name, const GLfloat [4][4] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-53</anchor>
            <arglist>(const char *name, const QTransform &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray</anchor>
            <arglist>(int location, const GLfloat *values, int count, int tupleSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-1</anchor>
            <arglist>(int location, const GLint *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-2</anchor>
            <arglist>(int location, const GLuint *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-3</anchor>
            <arglist>(int location, const QVector2D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-4</anchor>
            <arglist>(int location, const QVector3D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-5</anchor>
            <arglist>(int location, const QVector4D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-6</anchor>
            <arglist>(int location, const QMatrix2x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-7</anchor>
            <arglist>(int location, const QMatrix2x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-8</anchor>
            <arglist>(int location, const QMatrix2x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-9</anchor>
            <arglist>(int location, const QMatrix3x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-10</anchor>
            <arglist>(int location, const QMatrix3x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-11</anchor>
            <arglist>(int location, const QMatrix3x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-12</anchor>
            <arglist>(int location, const QMatrix4x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-13</anchor>
            <arglist>(int location, const QMatrix4x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-14</anchor>
            <arglist>(int location, const QMatrix4x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-15</anchor>
            <arglist>(const char *name, const GLfloat *values, int count, int tupleSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-16</anchor>
            <arglist>(const char *name, const GLint *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-17</anchor>
            <arglist>(const char *name, const GLuint *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-18</anchor>
            <arglist>(const char *name, const QVector2D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-19</anchor>
            <arglist>(const char *name, const QVector3D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-20</anchor>
            <arglist>(const char *name, const QVector4D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-21</anchor>
            <arglist>(const char *name, const QMatrix2x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-22</anchor>
            <arglist>(const char *name, const QMatrix2x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-23</anchor>
            <arglist>(const char *name, const QMatrix2x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-24</anchor>
            <arglist>(const char *name, const QMatrix3x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-25</anchor>
            <arglist>(const char *name, const QMatrix3x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-26</anchor>
            <arglist>(const char *name, const QMatrix3x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-27</anchor>
            <arglist>(const char *name, const QMatrix4x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-28</anchor>
            <arglist>(const char *name, const QMatrix4x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-29</anchor>
            <arglist>(const char *name, const QMatrix4x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLShaderPrograms</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>hasOpenGLShaderPrograms</anchor>
            <arglist>(QOpenGLContext *context)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLTexture</name>
        <filename>qopengltexture.html</filename>
        <member kind="enumeration">
            <name>Target</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Target1D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target1DArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target2D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target2DArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target3D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetCubeMap</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetCubeMapArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target2DMultisample</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target2DMultisampleArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetRectangle</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetBuffer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>BindingTarget</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget1D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget1DArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget2D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget2DArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget3D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTargetCubeMap</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTargetCubeMapArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget2DMultisample</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget2DMultisampleArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTargetRectangle</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTargetBuffer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MipMapGeneration</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>MipMapGeneration-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>GenerateMipMaps</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>MipMapGeneration-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DontGenerateMipMaps</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>MipMapGeneration-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TextureUnitReset</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureUnitReset-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ResetTextureUnit</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureUnitReset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DontResetTextureUnit</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureUnitReset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TextureFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R32U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG32U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB32U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA32U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R32I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG32I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB32I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA32I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R32F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG32F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB32F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA32F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB9E5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG11B10F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG3B2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R5G6B5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB5A1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA4</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB10A2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D16</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D24</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D24S8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D32</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D32F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D32FS8X24</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>S8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_DXT1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_DXT1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_DXT3</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_DXT5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R_ATI1N_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R_ATI1N_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG_ATI2N_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG_ATI2N_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_BP_UNSIGNED_FLOAT</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_BP_SIGNED_FLOAT</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_BP_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R11_EAC_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R11_EAC_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG11_EAC_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG11_EAC_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_ETC2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_ETC2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_PunchThrough_Alpha1_ETC2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_PunchThrough_Alpha1_ETC2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8_ETC2_EAC</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ETC2_EAC</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_ETC1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_4x4</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_5x4</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_5x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_6x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_6x6</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_8x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_8x6</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_8x8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_10x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_10x6</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_10x8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_10x10</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_12x10</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_12x12</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_4x4</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_5x4</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_5x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_6x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_6x6</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_8x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_8x6</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_8x8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_10x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_10x6</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_10x8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_10x10</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_12x10</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_12x12</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_DXT1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_Alpha_DXT1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_Alpha_DXT3</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_Alpha_DXT5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_BP_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DepthFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlphaFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBAFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LuminanceFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LuminanceAlphaFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CubeMapFace</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CubeMapPositiveX</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapNegativeX</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapPositiveY</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapNegativeY</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapPositiveZ</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapNegativeZ</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PixelFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoSourceFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Red</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BGR</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BGRA</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Red_Integer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG_Integer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_Integer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BGR_Integer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_Integer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BGRA_Integer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Stencil</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Depth</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DepthStencil</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Alpha</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Luminance</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LuminanceAlpha</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PixelType</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoPixelType</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Int8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Int16</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Int32</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float16</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float16OES</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float32</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_RGB9_E5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_RG11B10F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt8_RG3B2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt8_RG3B2_Rev</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16_RGB5A1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16_RGB5A1_Rev</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16_R5G6B5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16_R5G6B5_Rev</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16_RGBA4</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16_RGBA4_Rev</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_RGBA8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_RGBA8_Rev</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_RGB10A2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_RGB10A2_Rev</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_D24S8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float32_D32_UInt32_S8_X24</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SwizzleComponent</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleComponent-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SwizzleRed</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SwizzleGreen</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SwizzleBlue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SwizzleAlpha</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SwizzleValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>RedValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GreenValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlueValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlphaValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ZeroValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>WrapMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Repeat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MirroredRepeat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClampToEdge</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClampToBorder</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CoordinateDirection</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CoordinateDirection-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DirectionS</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CoordinateDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirectionT</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CoordinateDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirectionR</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CoordinateDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Feature</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ImmutableStorage</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImmutableMultisampleStorage</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureRectangle</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureArrays</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Texture3D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureMultisample</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureBuffer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureCubeMapArrays</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Swizzle</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StencilTexturing</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnisotropicFiltering</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NPOTTextures</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NPOTTextureRepeat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Texture1D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureComparisonOperators</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureMipMapLevel</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOpenGLTexture::Feature">
            <name>Features</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLTexture</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>QOpenGLTexture</anchor>
            <arglist>(QOpenGLTexture::Target target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLTexture</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>QOpenGLTexture-1</anchor>
            <arglist>(const QImage &amp;image, QOpenGLTexture::MipMapGeneration genMipMaps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::Target</type>
            <name>target</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>textureId</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>textureId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bind</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bind</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>bind-1</anchor>
            <arglist>(uint unit, QOpenGLTexture::TextureUnitReset reset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>release-1</anchor>
            <arglist>(uint unit, QOpenGLTexture::TextureUnitReset reset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBound</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isBound</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBound</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isBound-1</anchor>
            <arglist>(uint unit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>GLuint</type>
            <name>boundTextureId</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>boundTextureId</anchor>
            <arglist>(QOpenGLTexture::BindingTarget target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>GLuint</type>
            <name>boundTextureId</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>boundTextureId-1</anchor>
            <arglist>(uint unit, QOpenGLTexture::BindingTarget target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(QOpenGLTexture::TextureFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::TextureFormat</type>
            <name>format</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(int width, int height, int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipLevels</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMipLevels</anchor>
            <arglist>(int levels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipLevels</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>mipLevels</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumMipLevels</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>maximumMipLevels</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayers</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setLayers</anchor>
            <arglist>(int layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layers</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>layers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>faces</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>faces</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSamples</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setSamples</anchor>
            <arglist>(int samples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>samples</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>samples</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFixedSamplePositions</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setFixedSamplePositions</anchor>
            <arglist>(bool fixed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFixedSamplePositions</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isFixedSamplePositions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocateStorage</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>allocateStorage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocateStorage</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>allocateStorage-1</anchor>
            <arglist>(QOpenGLTexture::PixelFormat pixelFormat, QOpenGLTexture::PixelType pixelType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStorageAllocated</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isStorageAllocated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture *</type>
            <name>createTextureView</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>createTextureView</anchor>
            <arglist>(QOpenGLTexture::Target target, QOpenGLTexture::TextureFormat viewFormat, int minimumMipmapLevel, int maximumMipmapLevel, int minimumLayer, int maximumLayer) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTextureView</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isTextureView</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture-obsolete.html</anchorfile>
            <anchor>setData-1</anchor>
            <arglist>(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture-obsolete.html</anchorfile>
            <anchor>setData-2</anchor>
            <arglist>(int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture-obsolete.html</anchorfile>
            <anchor>setData-3</anchor>
            <arglist>(int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture-obsolete.html</anchorfile>
            <anchor>setData-4</anchor>
            <arglist>(QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-5</anchor>
            <arglist>(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-6</anchor>
            <arglist>(int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-7</anchor>
            <arglist>(int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-8</anchor>
            <arglist>(QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-9</anchor>
            <arglist>(int xOffset, int yOffset, int zOffset, int width, int height, int depth, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-10</anchor>
            <arglist>(int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-11</anchor>
            <arglist>(int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-12</anchor>
            <arglist>(int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::CubeMapFace face, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-13</anchor>
            <arglist>(int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::CubeMapFace face, int layerCount, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture-obsolete.html</anchorfile>
            <anchor>setCompressedData-1</anchor>
            <arglist>(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture-obsolete.html</anchorfile>
            <anchor>setCompressedData-2</anchor>
            <arglist>(int mipLevel, int layer, int dataSize, void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture-obsolete.html</anchorfile>
            <anchor>setCompressedData-3</anchor>
            <arglist>(int mipLevel, int dataSize, void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture-obsolete.html</anchorfile>
            <anchor>setCompressedData-4</anchor>
            <arglist>(int dataSize, void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setCompressedData</anchor>
            <arglist>(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setCompressedData-5</anchor>
            <arglist>(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setCompressedData-6</anchor>
            <arglist>(int mipLevel, int layer, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setCompressedData-7</anchor>
            <arglist>(int mipLevel, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setCompressedData-8</anchor>
            <arglist>(int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-14</anchor>
            <arglist>(const QImage &amp;image, QOpenGLTexture::MipMapGeneration genMipMaps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasFeature</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>hasFeature</anchor>
            <arglist>(QOpenGLTexture::Feature feature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipBaseLevel</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMipBaseLevel</anchor>
            <arglist>(int baseLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipBaseLevel</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>mipBaseLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipMaxLevel</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMipMaxLevel</anchor>
            <arglist>(int maxLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipMaxLevel</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>mipMaxLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipLevelRange</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMipLevelRange</anchor>
            <arglist>(int baseLevel, int maxLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;int, int&gt;</type>
            <name>mipLevelRange</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>mipLevelRange</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoMipMapGenerationEnabled</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setAutoMipMapGenerationEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAutoMipMapGenerationEnabled</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isAutoMipMapGenerationEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateMipMaps</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>generateMipMaps</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateMipMaps</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>generateMipMaps-1</anchor>
            <arglist>(int baseLevel, bool resetBaseLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSwizzleMask</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setSwizzleMask</anchor>
            <arglist>(QOpenGLTexture::SwizzleComponent component, QOpenGLTexture::SwizzleValue value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSwizzleMask</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setSwizzleMask-1</anchor>
            <arglist>(QOpenGLTexture::SwizzleValue r, QOpenGLTexture::SwizzleValue g, QOpenGLTexture::SwizzleValue b, QOpenGLTexture::SwizzleValue a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::SwizzleValue</type>
            <name>swizzleMask</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>swizzleMask</anchor>
            <arglist>(QOpenGLTexture::SwizzleComponent component) const const</arglist>
        </member>
        <member kind="enumeration">
            <name>DepthStencilMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>DepthStencilMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DepthMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>DepthStencilMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StencilMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>DepthStencilMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthStencilMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setDepthStencilMode</anchor>
            <arglist>(QOpenGLTexture::DepthStencilMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::DepthStencilMode</type>
            <name>depthStencilMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>depthStencilMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>ComparisonFunction</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CompareLessEqual</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareGreaterEqual</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareLess</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareGreater</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareEqual</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CommpareNotEqual</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareAlways</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareNever</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonFunction</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setComparisonFunction</anchor>
            <arglist>(QOpenGLTexture::ComparisonFunction function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::ComparisonFunction</type>
            <name>comparisonFunction</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>comparisonFunction</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>ComparisonMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CompareRefToTexture</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareNone</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setComparisonMode</anchor>
            <arglist>(QOpenGLTexture::ComparisonMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::ComparisonMode</type>
            <name>comparisonMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>comparisonMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>Filter</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Nearest</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Linear</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NearestMipMapNearest</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NearestMipMapLinear</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinearMipMapNearest</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinearMipMapLinear</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinificationFilter</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMinificationFilter</anchor>
            <arglist>(QOpenGLTexture::Filter filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::Filter</type>
            <name>minificationFilter</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>minificationFilter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMagnificationFilter</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMagnificationFilter</anchor>
            <arglist>(QOpenGLTexture::Filter filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::Filter</type>
            <name>magnificationFilter</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>magnificationFilter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinMagFilters</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMinMagFilters</anchor>
            <arglist>(QOpenGLTexture::Filter minificationFilter, QOpenGLTexture::Filter magnificationFilter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;QOpenGLTexture::Filter, QOpenGLTexture::Filter&gt;</type>
            <name>minMagFilters</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>minMagFilters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumAnisotropy</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMaximumAnisotropy</anchor>
            <arglist>(float anisotropy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>maximumAnisotropy</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>maximumAnisotropy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setWrapMode</anchor>
            <arglist>(QOpenGLTexture::WrapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setWrapMode-1</anchor>
            <arglist>(QOpenGLTexture::CoordinateDirection direction, QOpenGLTexture::WrapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::WrapMode</type>
            <name>wrapMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>wrapMode</anchor>
            <arglist>(QOpenGLTexture::CoordinateDirection direction) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setBorderColor</anchor>
            <arglist>(QColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setBorderColor-1</anchor>
            <arglist>(float r, float g, float b, float a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setBorderColor-2</anchor>
            <arglist>(int r, int g, int b, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setBorderColor-3</anchor>
            <arglist>(uint r, uint g, uint b, uint a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>borderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>borderColor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>borderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>borderColor-1</anchor>
            <arglist>(float *border) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>borderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>borderColor-2</anchor>
            <arglist>(int *border) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>borderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>borderColor-3</anchor>
            <arglist>(unsigned int *border) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumLevelOfDetail</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMinimumLevelOfDetail</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>minimumLevelOfDetail</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>minimumLevelOfDetail</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumLevelOfDetail</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMaximumLevelOfDetail</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>maximumLevelOfDetail</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>maximumLevelOfDetail</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLevelOfDetailRange</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setLevelOfDetailRange</anchor>
            <arglist>(float min, float max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;float, float&gt;</type>
            <name>levelOfDetailRange</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>levelOfDetailRange</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLevelofDetailBias</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setLevelofDetailBias</anchor>
            <arglist>(float bias)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>levelofDetailBias</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>levelofDetailBias</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLTextureBlitter</name>
        <filename>qopengltextureblitter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLTextureBlitter</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>QOpenGLTextureBlitter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLTextureBlitter</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>dtor.QOpenGLTextureBlitter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>Origin</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>Origin-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>OriginBottomLeft</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>Origin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OriginTopLeft</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>Origin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsExternalOESTarget</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>supportsExternalOESTarget</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bind</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRedBlueSwizzle</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>setRedBlueSwizzle</anchor>
            <arglist>(bool swizzle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacity</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>setOpacity</anchor>
            <arglist>(float opacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blit</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>blit</anchor>
            <arglist>(GLuint texture, const QMatrix4x4 &amp;targetTransform, QOpenGLTextureBlitter::Origin sourceOrigin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blit</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>blit-1</anchor>
            <arglist>(GLuint texture, const QMatrix4x4 &amp;targetTransform, const QMatrix3x3 &amp;sourceTransform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMatrix4x4</type>
            <name>targetTransform</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>targetTransform</anchor>
            <arglist>(const QRectF &amp;target, const QRect &amp;viewport)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMatrix3x3</type>
            <name>sourceTransform</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>sourceTransform</anchor>
            <arglist>(const QRectF &amp;subTexture, const QSize &amp;textureSize, QOpenGLTextureBlitter::Origin origin)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLTimeMonitor</name>
        <filename>qopengltimemonitor.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLTimeMonitor</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>QOpenGLTimeMonitor</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLTimeMonitor</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>dtor.QOpenGLTimeMonitor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleCount</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>setSampleCount</anchor>
            <arglist>(int sampleCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sampleCount</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>sampleCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;GLuint&gt;</type>
            <name>objectIds</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>objectIds</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>recordSample</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>recordSample</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isResultAvailable</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>isResultAvailable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;GLuint64&gt;</type>
            <name>waitForSamples</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>waitForSamples</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;GLuint64&gt;</type>
            <name>waitForIntervals</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>waitForIntervals</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLTimerQuery</name>
        <filename>qopengltimerquery.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLTimerQuery</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>QOpenGLTimerQuery</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLTimerQuery</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>dtor.QOpenGLTimerQuery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>objectId</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>objectId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>begin</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>end</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint64</type>
            <name>waitForTimestamp</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>waitForTimestamp</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>recordTimestamp</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>recordTimestamp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isResultAvailable</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>isResultAvailable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint64</type>
            <name>waitForResult</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>waitForResult</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLVersionFunctionsBackend</name>
        <filename>qopenglversionfunctionsbackend.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLVersionFunctionsStorage</name>
        <filename>qopenglversionfunctionsstorage.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLVersionProfile</name>
        <filename>qopenglversionprofile.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLVersionProfile</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>QOpenGLVersionProfile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLVersionProfile</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>QOpenGLVersionProfile-1</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLVersionProfile</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>QOpenGLVersionProfile-2</anchor>
            <arglist>(const QOpenGLVersionProfile &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLVersionProfile</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>dtor.QOpenGLVersionProfile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLVersionProfile &amp;</type>
            <name>operator=</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QOpenGLVersionProfile &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;int, int&gt;</type>
            <name>version</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVersion</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>setVersion</anchor>
            <arglist>(int majorVersion, int minorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat::OpenGLContextProfile</type>
            <name>profile</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>profile</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProfile</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>setProfile</anchor>
            <arglist>(QSurfaceFormat::OpenGLContextProfile profile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasProfiles</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>hasProfiles</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLegacyVersion</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>isLegacyVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLVersionStatus</name>
        <filename>qopenglversionstatus.html</filename>
    </compound>
    <compound kind="class">
        <name>QOpenGLVertexArrayObject</name>
        <filename>qopenglvertexarrayobject.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLVertexArrayObject</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>QOpenGLVertexArrayObject</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLVertexArrayObject</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>dtor.QOpenGLVertexArrayObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>objectId</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>objectId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bind</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <class>QOpenGLVertexArrayObject::Binder</class>
    </compound>
    <compound kind="class">
        <name>QOpenGLVertexArrayObject::Binder</name>
        <filename>qopenglvertexarrayobject-binder.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Binder</name>
            <anchorfile>qopenglvertexarrayobject-binder.html</anchorfile>
            <anchor>Binder</anchor>
            <arglist>(QOpenGLVertexArrayObject *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~Binder</name>
            <anchorfile>qopenglvertexarrayobject-binder.html</anchorfile>
            <anchor>dtor.Binder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglvertexarrayobject-binder.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rebind</name>
            <anchorfile>qopenglvertexarrayobject-binder.html</anchorfile>
            <anchor>rebind</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLWindow</name>
        <filename>qopenglwindow.html</filename>
        <base>QPaintDeviceWindow</base>
        <member kind="enumeration">
            <name>UpdateBehavior</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>UpdateBehavior-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoPartialUpdate</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>UpdateBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PartialUpdateBlit</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>UpdateBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PartialUpdateBlend</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>UpdateBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLWindow</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>QOpenGLWindow</anchor>
            <arglist>(QOpenGLWindow::UpdateBehavior updateBehavior, QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLWindow</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>QOpenGLWindow-1</anchor>
            <arglist>(QOpenGLContext *shareContext, QOpenGLWindow::UpdateBehavior updateBehavior, QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLWindow</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>dtor.QOpenGLWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLWindow::UpdateBehavior</type>
            <name>updateBehavior</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>updateBehavior</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>makeCurrent</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>makeCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doneCurrent</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>doneCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>context</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>context</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>shareContext</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>shareContext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>defaultFramebufferObject</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>defaultFramebufferObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grabFramebuffer</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>grabFramebuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frameSwapped</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>frameSwapped</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initializeGL</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>initializeGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeGL</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>resizeGL</anchor>
            <arglist>(int w, int h)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintGL</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>paintGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintUnderGL</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>paintUnderGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintOverGL</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>paintOverGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPageLayout</name>
        <filename>qpagelayout.html</filename>
        <member kind="enumeration">
            <name>Unit</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Unit-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Millimeter</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Unit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Point</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Unit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Inch</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Unit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pica</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Unit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Didot</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Unit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cicero</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Unit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Orientation</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Orientation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Portrait</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Landscape</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Mode</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Mode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StandardMode</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FullPageMode</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPageLayout</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>QPageLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPageLayout</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>QPageLayout-1</anchor>
            <arglist>(const QPageSize &amp;pageSize, QPageLayout::Orientation orientation, const QMarginsF &amp;margins, QPageLayout::Unit units, const QMarginsF &amp;minMargins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPageLayout</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>QPageLayout-2</anchor>
            <arglist>(const QPageLayout &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPageLayout &amp;</type>
            <name>operator=</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QPageLayout &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPageLayout &amp;</type>
            <name>operator=</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QPageLayout &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPageLayout</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>dtor.QPageLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPageLayout &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEquivalentTo</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>isEquivalentTo</anchor>
            <arglist>(const QPageLayout &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMode</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>setMode</anchor>
            <arglist>(QPageLayout::Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPageLayout::Mode</type>
            <name>mode</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>mode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPageSize</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>setPageSize</anchor>
            <arglist>(const QPageSize &amp;pageSize, const QMarginsF &amp;minMargins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPageSize</type>
            <name>pageSize</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>pageSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientation</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>setOrientation</anchor>
            <arglist>(QPageLayout::Orientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPageLayout::Orientation</type>
            <name>orientation</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>orientation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnits</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>setUnits</anchor>
            <arglist>(QPageLayout::Unit units)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPageLayout::Unit</type>
            <name>units</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>units</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setMargins</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>setMargins</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setLeftMargin</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>setLeftMargin</anchor>
            <arglist>(qreal leftMargin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setRightMargin</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>setRightMargin</anchor>
            <arglist>(qreal rightMargin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setTopMargin</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>setTopMargin</anchor>
            <arglist>(qreal topMargin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setBottomMargin</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>setBottomMargin</anchor>
            <arglist>(qreal bottomMargin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>margins</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>margins</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>margins</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>margins-1</anchor>
            <arglist>(QPageLayout::Unit units) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>marginsPoints</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>marginsPoints</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>marginsPixels</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>marginsPixels</anchor>
            <arglist>(int resolution) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumMargins</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>setMinimumMargins</anchor>
            <arglist>(const QMarginsF &amp;minMargins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>minimumMargins</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>minimumMargins</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>maximumMargins</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>maximumMargins</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>fullRect</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>fullRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>fullRect</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>fullRect-1</anchor>
            <arglist>(QPageLayout::Unit units) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>fullRectPoints</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>fullRectPoints</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>fullRectPixels</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>fullRectPixels</anchor>
            <arglist>(int resolution) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>paintRect</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>paintRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>paintRect</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>paintRect-1</anchor>
            <arglist>(QPageLayout::Unit units) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>paintRectPoints</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>paintRectPoints</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>paintRectPixels</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>paintRectPixels</anchor>
            <arglist>(int resolution) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>operator-eq-eq-11</anchor>
            <arglist>(const QPageLayout &amp;lhs, const QPageLayout &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpagelayout.html</anchorfile>
            <anchor>operator-not-eq-13</anchor>
            <arglist>(const QPageLayout &amp;lhs, const QPageLayout &amp;rhs)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPageSize</name>
        <filename>qpagesize.html</filename>
        <member kind="enumeration">
            <name>PageSizeId</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>A4</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B5</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Letter</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Legal</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Executive</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A0</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A1</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A2</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A3</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A5</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A6</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A7</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A8</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A9</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B0</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B1</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B10</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B2</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B3</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B4</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B6</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B7</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B8</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B9</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>C5E</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Comm10E</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DLE</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Folio</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ledger</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tabloid</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Custom</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A10</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A3Extra</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A4Extra</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A4Plus</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A4Small</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A5Extra</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B5Extra</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB0</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB1</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB2</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB3</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB4</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB5</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB6</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB7</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB8</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB9</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB10</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnsiC</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnsiD</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnsiE</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LegalExtra</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LetterExtra</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LetterPlus</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LetterSmall</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabloidExtra</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArchA</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArchB</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArchC</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArchD</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArchE</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial7x9</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial8x10</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial9x11</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial9x12</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial10x11</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial10x13</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial10x14</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial12x11</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial15x11</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExecutiveStandard</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Note</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Quarto</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Statement</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SuperA</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SuperB</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Postcard</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DoublePostcard</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Prc16K</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Prc32K</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Prc32KBig</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FanFoldUS</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FanFoldGerman</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FanFoldGermanLegal</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeB4</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeB5</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeB6</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC0</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC1</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC2</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC3</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC4</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC6</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC65</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC7</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Envelope9</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Envelope11</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Envelope12</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Envelope14</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeMonarch</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePersonal</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeChou3</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeChou4</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeInvite</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeItalian</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeKaku2</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeKaku3</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc1</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc2</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc3</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc4</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc5</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc6</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc7</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc8</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc9</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc10</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeYou4</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastPageSize</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NPageSize</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NPaperSize</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnsiA</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnsiB</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC5</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeDL</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Envelope10</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>PageSizeId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Unit</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>Unit-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Millimeter</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>Unit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Point</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>Unit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Inch</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>Unit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pica</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>Unit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Didot</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>Unit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cicero</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>Unit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SizeMatchPolicy</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>SizeMatchPolicy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>FuzzyMatch</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>SizeMatchPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FuzzyOrientationMatch</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>SizeMatchPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExactMatch</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>SizeMatchPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPageSize</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>QPageSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPageSize</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>QPageSize-1</anchor>
            <arglist>(QPageSize::PageSizeId pageSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPageSize</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>QPageSize-2</anchor>
            <arglist>(const QSize &amp;pointSize, const QString &amp;name, QPageSize::SizeMatchPolicy matchPolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPageSize</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>QPageSize-3</anchor>
            <arglist>(const QSizeF &amp;size, QPageSize::Unit units, const QString &amp;name, QPageSize::SizeMatchPolicy matchPolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPageSize</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>QPageSize-4</anchor>
            <arglist>(const QPageSize &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPageSize &amp;</type>
            <name>operator=</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QPageSize &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPageSize &amp;</type>
            <name>operator=</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QPageSize &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPageSize</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>dtor.QPageSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPageSize &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEquivalentTo</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>isEquivalentTo</anchor>
            <arglist>(const QPageSize &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>key</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPageSize::PageSizeId</type>
            <name>id</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>windowsId</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>windowsId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>definitionSize</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>definitionSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPageSize::Unit</type>
            <name>definitionUnits</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>definitionUnits</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>size</anchor>
            <arglist>(QPageSize::Unit units) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizePoints</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>sizePoints</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizePixels</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>sizePixels</anchor>
            <arglist>(int resolution) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>(QPageSize::Unit units) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>rectPoints</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>rectPoints</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>rectPixels</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>rectPixels</anchor>
            <arglist>(int resolution) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>key</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>key-1</anchor>
            <arglist>(QPageSize::PageSizeId pageSizeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>name-1</anchor>
            <arglist>(QPageSize::PageSizeId pageSizeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPageSize::PageSizeId</type>
            <name>id</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>id-1</anchor>
            <arglist>(const QSize &amp;pointSize, QPageSize::SizeMatchPolicy matchPolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPageSize::PageSizeId</type>
            <name>id</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>id-2</anchor>
            <arglist>(const QSizeF &amp;size, QPageSize::Unit units, QPageSize::SizeMatchPolicy matchPolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPageSize::PageSizeId</type>
            <name>id</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>id-3</anchor>
            <arglist>(int windowsId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>windowsId</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>windowsId-1</anchor>
            <arglist>(QPageSize::PageSizeId pageSizeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSizeF</type>
            <name>definitionSize</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>definitionSize-1</anchor>
            <arglist>(QPageSize::PageSizeId pageSizeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPageSize::Unit</type>
            <name>definitionUnits</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>definitionUnits-1</anchor>
            <arglist>(QPageSize::PageSizeId pageSizeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>size-1</anchor>
            <arglist>(QPageSize::PageSizeId pageSizeId, QPageSize::Unit units)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSize</type>
            <name>sizePoints</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>sizePoints-1</anchor>
            <arglist>(QPageSize::PageSizeId pageSizeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSize</type>
            <name>sizePixels</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>sizePixels-1</anchor>
            <arglist>(QPageSize::PageSizeId pageSizeId, int resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>operator-eq-eq-10</anchor>
            <arglist>(const QPageSize &amp;lhs, const QPageSize &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpagesize.html</anchorfile>
            <anchor>operator-not-eq-12</anchor>
            <arglist>(const QPageSize &amp;lhs, const QPageSize &amp;rhs)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPagedPaintDevice</name>
        <filename>qpagedpaintdevice.html</filename>
        <base>QPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPagedPaintDevice</name>
            <anchorfile>qpagedpaintdevice-obsolete.html</anchorfile>
            <anchor>QPagedPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPagedPaintDevice</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>dtor.QPagedPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>newPage</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>newPage</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="enumeration">
            <name>PageSize</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>A4</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B5</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Letter</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Legal</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Executive</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A0</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A1</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A2</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A3</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A5</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A6</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A7</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A8</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A9</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B0</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B1</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B10</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B2</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B3</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B4</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B6</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B7</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B8</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B9</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>C5E</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Comm10E</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DLE</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Folio</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ledger</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tabloid</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Custom</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A10</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A3Extra</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A4Extra</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A4Plus</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A4Small</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>A5Extra</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>B5Extra</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB0</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB1</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB2</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB3</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB4</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB5</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB6</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB7</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB8</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB9</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JisB10</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnsiC</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnsiD</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnsiE</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LegalExtra</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LetterExtra</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LetterPlus</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LetterSmall</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabloidExtra</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArchA</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArchB</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArchC</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArchD</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArchE</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial7x9</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial8x10</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial9x11</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial9x12</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial10x11</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial10x13</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial10x14</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial12x11</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Imperial15x11</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExecutiveStandard</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Note</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Quarto</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Statement</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SuperA</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SuperB</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Postcard</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DoublePostcard</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Prc16K</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Prc32K</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Prc32KBig</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FanFoldUS</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FanFoldGerman</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FanFoldGermanLegal</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeB4</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeB5</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeB6</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC0</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC1</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC2</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC3</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC4</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC6</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC65</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC7</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Envelope9</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Envelope11</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Envelope12</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Envelope14</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeMonarch</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePersonal</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeChou3</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeChou4</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeInvite</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeItalian</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeKaku2</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeKaku3</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc1</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc2</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc3</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc4</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc5</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc6</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc7</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc8</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc9</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopePrc10</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeYou4</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastPageSize</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NPageSize</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NPaperSize</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnsiA</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnsiB</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeC5</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnvelopeDL</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Envelope10</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PdfVersion</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PdfVersion-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PdfVersion_1_4</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PdfVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdfVersion_A1b</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PdfVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdfVersion_1_6</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>PdfVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPageLayout</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>setPageLayout</anchor>
            <arglist>(const QPageLayout &amp;newPageLayout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPageSize</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>setPageSize</anchor>
            <arglist>(const QPageSize &amp;pageSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPageOrientation</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>setPageOrientation</anchor>
            <arglist>(QPageLayout::Orientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPageMargins</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>setPageMargins</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPageMargins</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>setPageMargins-1</anchor>
            <arglist>(const QMarginsF &amp;margins, QPageLayout::Unit units)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPageLayout</type>
            <name>pageLayout</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>pageLayout</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPageSize</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>setPageSize-1</anchor>
            <arglist>(QPagedPaintDevice::PageSize size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPagedPaintDevice::PageSize</type>
            <name>pageSize</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>pageSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPageSizeMM</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>setPageSizeMM</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>pageSizeMM</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>pageSizeMM</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setMargins</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>setMargins</anchor>
            <arglist>(const QPagedPaintDevice::Margins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPagedPaintDevice::Margins</type>
            <name>margins</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>margins</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPaintDevice</name>
        <filename>qpaintdevice.html</filename>
        <member kind="enumeration">
            <name>PaintDeviceMetric</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PdmWidth</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdmHeight</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdmWidthMM</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdmHeightMM</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdmNumColors</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdmDepth</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdmDpiX</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdmDpiY</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdmPhysicalDpiX</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdmPhysicalDpiY</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdmDevicePixelRatio</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PdmDevicePixelRatioScaled</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPaintDevice</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>dtor.QPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>paintingActive</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>paintingActive</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>widthMM</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>widthMM</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>heightMM</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>heightMM</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>logicalDpiX</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>logicalDpiX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>logicalDpiY</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>logicalDpiY</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>physicalDpiX</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>physicalDpiX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>physicalDpiY</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>physicalDpiY</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>devicePixelRatio</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>devicePixelRatioF</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>devicePixelRatioF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>colorCount</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>colorCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QPaintDevice</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>QPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>metric</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>metric</anchor>
            <arglist>(QPaintDevice::PaintDeviceMetric metric) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPaintDeviceWindow</name>
        <filename>qpaintdevicewindow.html</filename>
        <base>QWindow</base>
        <base>QPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qpaintdevicewindow.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qpaintdevicewindow.html</anchorfile>
            <anchor>update-1</anchor>
            <arglist>(const QRegion &amp;region)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qpaintdevicewindow.html</anchorfile>
            <anchor>update-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qpaintdevicewindow.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPaintEngine</name>
        <filename>qpaintengine.html</filename>
        <member kind="enumeration">
            <name>PaintEngineFeature</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PrimitiveTransform</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PatternTransform</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PixmapTransform</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PatternBrush</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinearGradientFill</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RadialGradientFill</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConicalGradientFill</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlphaBlend</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PorterDuff</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PainterPaths</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Antialiasing</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BrushStroke</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConstantOpacity</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MaskedBrush</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PerspectiveTransform</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlendModes</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ObjectBoundingModeGradients</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOpModes</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PaintOutsidePaintEvent</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllFeatures</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QPaintEngine::PaintEngineFeature">
            <name>PaintEngineFeatures</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>DirtyFlag</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DirtyPen</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyBrush</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyBrushOrigin</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyFont</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyBackground</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyBackgroundMode</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyTransform</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyClipRegion</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyClipPath</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyHints</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyCompositionMode</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyClipEnabled</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirtyOpacity</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllDirty</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QPaintEngine::DirtyFlag">
            <name>DirtyFlags</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PolygonDrawMode</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PolygonDrawMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>OddEvenMode</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PolygonDrawMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindingMode</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PolygonDrawMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConvexMode</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PolygonDrawMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PolylineMode</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PolygonDrawMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPaintEngine</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>QPaintEngine</anchor>
            <arglist>(QPaintEngine::PaintEngineFeatures caps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPaintEngine</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>dtor.QPaintEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActive</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>setActive</anchor>
            <arglist>(bool state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>begin</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>(QPaintDevice *pdev) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>end</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(const QPaintEngineState &amp;state) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawRects</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawRects-1</anchor>
            <arglist>(const QRect *rects, int rectCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawRects</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawRects</anchor>
            <arglist>(const QRectF *rects, int rectCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawLines</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawLines-1</anchor>
            <arglist>(const QLine *lines, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawLines</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawLines</anchor>
            <arglist>(const QLineF *lines, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawEllipse</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawEllipse</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawEllipse</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawEllipse-1</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPath</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawPath</anchor>
            <arglist>(const QPainterPath &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPoints</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawPoints</anchor>
            <arglist>(const QPointF *points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPoints</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawPoints-1</anchor>
            <arglist>(const QPoint *points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPolygon</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawPolygon</anchor>
            <arglist>(const QPointF *points, int pointCount, QPaintEngine::PolygonDrawMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPolygon</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawPolygon-1</anchor>
            <arglist>(const QPoint *points, int pointCount, QPaintEngine::PolygonDrawMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>drawPixmap</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawPixmap</anchor>
            <arglist>(const QRectF &amp;r, const QPixmap &amp;pm, const QRectF &amp;sr) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawTextItem</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawTextItem</anchor>
            <arglist>(const QPointF &amp;p, const QTextItem &amp;textItem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawTiledPixmap</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawTiledPixmap</anchor>
            <arglist>(const QRectF &amp;rect, const QPixmap &amp;pixmap, const QPointF &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawImage</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawImage</anchor>
            <arglist>(const QRectF &amp;rectangle, const QImage &amp;image, const QRectF &amp;sr, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintDevice *</type>
            <name>paintDevice</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>paintDevice</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>X11</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Windows</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QuickDraw</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CoreGraphics</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MacPrinter</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QWindowSystem</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PostScript</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Picture</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SVG</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Raster</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Direct3D</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pdf</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenVG</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL2</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PaintBuffer</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Blitter</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Direct2D</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>User</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MaxUser</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QPaintEngine::Type</type>
            <name>type</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFeature</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>hasFeature</anchor>
            <arglist>(QPaintEngine::PaintEngineFeatures feature) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainter *</type>
            <name>painter</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>painter</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPaintEngineState</name>
        <filename>qpaintenginestate.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintEngine::DirtyFlags</type>
            <name>state</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPen</type>
            <name>pen</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>pen</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>brush</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>brush</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>brushOrigin</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>brushOrigin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>backgroundBrush</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>backgroundBrush</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::BGMode</type>
            <name>backgroundMode</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>backgroundMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>matrix</name>
            <anchorfile>qpaintenginestate-obsolete.html</anchorfile>
            <anchor>matrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>transform</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ClipOperation</type>
            <name>clipOperation</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>clipOperation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>clipRegion</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>clipRegion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>clipPath</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>clipPath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isClipEnabled</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>isClipEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainter::RenderHints</type>
            <name>renderHints</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>renderHints</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainter::CompositionMode</type>
            <name>compositionMode</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>compositionMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>opacity</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>opacity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainter *</type>
            <name>painter</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>painter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>brushNeedsResolving</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>brushNeedsResolving</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>penNeedsResolving</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>penNeedsResolving</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPaintEvent</name>
        <filename>qpaintevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPaintEvent</name>
            <anchorfile>qpaintevent.html</anchorfile>
            <anchor>QPaintEvent</anchor>
            <arglist>(const QRegion &amp;paintRegion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPaintEvent</name>
            <anchorfile>qpaintevent.html</anchorfile>
            <anchor>QPaintEvent-1</anchor>
            <arglist>(const QRect &amp;paintRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRect &amp;</type>
            <name>rect</name>
            <anchorfile>qpaintevent.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion &amp;</type>
            <name>region</name>
            <anchorfile>qpaintevent.html</anchorfile>
            <anchor>region</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPainter</name>
        <filename>qpainter.html</filename>
        <member kind="enumeration">
            <name>RenderHint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>RenderHint-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Antialiasing</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextAntialiasing</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SmoothPixmapTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HighQualityAntialiasing</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NonCosmeticDefaultPen</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt4CompatiblePainting</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LosslessImageRendering</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QPainter::RenderHint">
            <name>RenderHints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QPainter::PixmapFragment</class>
        <member kind="enumeration">
            <name>PixmapFragmentHint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>PixmapFragmentHint-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>OpaqueHint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>PixmapFragmentHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QPainter::PixmapFragmentHint">
            <name>PixmapFragmentHints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>PixmapFragmentHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainter</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>QPainter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainter</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>QPainter-1</anchor>
            <arglist>(QPaintDevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPainter</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>dtor.QPainter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintDevice *</type>
            <name>device</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>begin</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>(QPaintDevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>end</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initFrom</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>initFrom</anchor>
            <arglist>(const QPaintDevice *device)</arglist>
        </member>
        <member kind="enumeration">
            <name>CompositionMode</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_SourceOver</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_DestinationOver</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_Clear</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_Source</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_Destination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_SourceIn</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_DestinationIn</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_SourceOut</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_DestinationOut</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_SourceAtop</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_DestinationAtop</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_Xor</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_Plus</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_Multiply</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_Screen</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_Overlay</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_Darken</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_Lighten</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_ColorDodge</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_ColorBurn</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_HardLight</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_SoftLight</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_Difference</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompositionMode_Exclusion</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_SourceOrDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_SourceAndDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_SourceXorDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_NotSourceAndNotDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_NotSourceOrNotDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_NotSourceXorDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_NotSource</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_NotSourceAndDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_SourceAndNotDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_NotSourceOrDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_SourceOrNotDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_ClearDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_SetDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterOp_NotDestination</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompositionMode</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setCompositionMode</anchor>
            <arglist>(QPainter::CompositionMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainter::CompositionMode</type>
            <name>compositionMode</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>compositionMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QFont &amp;</type>
            <name>font</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontMetrics</type>
            <name>fontMetrics</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fontMetrics</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontInfo</type>
            <name>fontInfo</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fontInfo</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPen</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setPen-1</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPen</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setPen</anchor>
            <arglist>(const QPen &amp;pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPen</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setPen-2</anchor>
            <arglist>(Qt::PenStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPen &amp;</type>
            <name>pen</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>pen</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrush</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBrush</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrush</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBrush-1</anchor>
            <arglist>(Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>brush</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>brush</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackgroundMode</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBackgroundMode</anchor>
            <arglist>(Qt::BGMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::BGMode</type>
            <name>backgroundMode</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>backgroundMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>brushOrigin</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>brushOrigin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrushOrigin</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBrushOrigin-1</anchor>
            <arglist>(int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrushOrigin</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBrushOrigin-2</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrushOrigin</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBrushOrigin</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackground</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBackground</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>background</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>background</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>opacity</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>opacity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacity</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setOpacity</anchor>
            <arglist>(qreal opacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>clipRegion</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>clipRegion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>clipPath</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>clipPath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setClipRect</anchor>
            <arglist>(const QRectF &amp;rectangle, Qt::ClipOperation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setClipRect-1</anchor>
            <arglist>(const QRect &amp;rectangle, Qt::ClipOperation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setClipRect-2</anchor>
            <arglist>(int x, int y, int width, int height, Qt::ClipOperation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipRegion</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setClipRegion</anchor>
            <arglist>(const QRegion &amp;region, Qt::ClipOperation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipPath</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setClipPath</anchor>
            <arglist>(const QPainterPath &amp;path, Qt::ClipOperation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipping</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setClipping</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasClipping</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>hasClipping</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>clipBoundingRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>clipBoundingRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>save</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>save</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>restore</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>restore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>setMatrix</anchor>
            <arglist>(const QMatrix &amp;matrix, bool combine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix &amp;</type>
            <name>matrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>matrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix &amp;</type>
            <name>deviceMatrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>deviceMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetMatrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>resetMatrix</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setTransform</anchor>
            <arglist>(const QTransform &amp;transform, bool combine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTransform &amp;</type>
            <name>transform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTransform &amp;</type>
            <name>deviceTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>deviceTransform</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>resetTransform</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorldMatrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>setWorldMatrix</anchor>
            <arglist>(const QMatrix &amp;matrix, bool combine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix &amp;</type>
            <name>worldMatrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>worldMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>combinedMatrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>combinedMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrixEnabled</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>setMatrixEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matrixEnabled</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>matrixEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorldTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setWorldTransform</anchor>
            <arglist>(const QTransform &amp;matrix, bool combine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTransform &amp;</type>
            <name>worldTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>worldTransform</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>combinedTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>combinedTransform</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorldMatrixEnabled</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setWorldMatrixEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>worldMatrixEnabled</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>worldMatrixEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(qreal sx, qreal sy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shear</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>shear</anchor>
            <arglist>(qreal sh, qreal sv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QPointF &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>translate-1</anchor>
            <arglist>(const QPoint &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>window</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindow</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setWindow</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindow</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setWindow-1</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>viewport</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>viewport</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewport</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setViewport</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewport</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setViewport-1</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewTransformEnabled</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setViewTransformEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>viewTransformEnabled</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>viewTransformEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>strokePath</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>strokePath</anchor>
            <arglist>(const QPainterPath &amp;path, const QPen &amp;pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillPath</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillPath</anchor>
            <arglist>(const QPainterPath &amp;path, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPath</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPath</anchor>
            <arglist>(const QPainterPath &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoint</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoint-1</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoint-2</anchor>
            <arglist>(int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoints</anchor>
            <arglist>(const QPointF *points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoints-1</anchor>
            <arglist>(const QPolygonF &amp;points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoints-2</anchor>
            <arglist>(const QPoint *points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoints-3</anchor>
            <arglist>(const QPolygon &amp;points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLine</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLine</anchor>
            <arglist>(const QLineF &amp;line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLine</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLine-1</anchor>
            <arglist>(const QLine &amp;line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLine</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLine-2</anchor>
            <arglist>(int x1, int y1, int x2, int y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLine</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLine-3</anchor>
            <arglist>(const QPoint &amp;p1, const QPoint &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLine</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLine-4</anchor>
            <arglist>(const QPointF &amp;p1, const QPointF &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines</anchor>
            <arglist>(const QLineF *lines, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-1</anchor>
            <arglist>(const QVector&lt;QLineF&gt; &amp;lines)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-2</anchor>
            <arglist>(const QPointF *pointPairs, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-3</anchor>
            <arglist>(const QVector&lt;QPointF&gt; &amp;pointPairs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-4</anchor>
            <arglist>(const QLine *lines, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-5</anchor>
            <arglist>(const QVector&lt;QLine&gt; &amp;lines)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-6</anchor>
            <arglist>(const QPoint *pointPairs, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-7</anchor>
            <arglist>(const QVector&lt;QPoint&gt; &amp;pointPairs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRect</anchor>
            <arglist>(const QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRect-1</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRect-2</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRects</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRects</anchor>
            <arglist>(const QRectF *rectangles, int rectCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRects</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRects-1</anchor>
            <arglist>(const QVector&lt;QRectF&gt; &amp;rectangles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRects</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRects-2</anchor>
            <arglist>(const QRect *rectangles, int rectCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRects</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRects-3</anchor>
            <arglist>(const QVector&lt;QRect&gt; &amp;rectangles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawEllipse</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawEllipse</anchor>
            <arglist>(const QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawEllipse</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawEllipse-1</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawEllipse</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawEllipse-2</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawEllipse</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawEllipse-3</anchor>
            <arglist>(const QPointF &amp;center, qreal rx, qreal ry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawEllipse</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawEllipse-4</anchor>
            <arglist>(const QPoint &amp;center, int rx, int ry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolyline</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolyline</anchor>
            <arglist>(const QPointF *points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolyline</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolyline-1</anchor>
            <arglist>(const QPolygonF &amp;points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolyline</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolyline-2</anchor>
            <arglist>(const QPoint *points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolyline</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolyline-3</anchor>
            <arglist>(const QPolygon &amp;points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolygon</anchor>
            <arglist>(const QPointF *points, int pointCount, Qt::FillRule fillRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolygon-1</anchor>
            <arglist>(const QPolygonF &amp;points, Qt::FillRule fillRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolygon-2</anchor>
            <arglist>(const QPoint *points, int pointCount, Qt::FillRule fillRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolygon-3</anchor>
            <arglist>(const QPolygon &amp;points, Qt::FillRule fillRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawConvexPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawConvexPolygon</anchor>
            <arglist>(const QPointF *points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawConvexPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawConvexPolygon-1</anchor>
            <arglist>(const QPolygonF &amp;polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawConvexPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawConvexPolygon-2</anchor>
            <arglist>(const QPoint *points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawConvexPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawConvexPolygon-3</anchor>
            <arglist>(const QPolygon &amp;polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawArc</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawArc</anchor>
            <arglist>(const QRectF &amp;rectangle, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawArc</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawArc-1</anchor>
            <arglist>(const QRect &amp;rectangle, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawArc</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawArc-2</anchor>
            <arglist>(int x, int y, int width, int height, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPie</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPie</anchor>
            <arglist>(const QRectF &amp;rectangle, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPie</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPie-1</anchor>
            <arglist>(int x, int y, int width, int height, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPie</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPie-2</anchor>
            <arglist>(const QRect &amp;rectangle, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawChord</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawChord</anchor>
            <arglist>(const QRectF &amp;rectangle, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawChord</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawChord-1</anchor>
            <arglist>(int x, int y, int width, int height, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawChord</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawChord-2</anchor>
            <arglist>(const QRect &amp;rectangle, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRoundedRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRoundedRect</anchor>
            <arglist>(const QRectF &amp;rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRoundedRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRoundedRect-1</anchor>
            <arglist>(int x, int y, int w, int h, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRoundedRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRoundedRect-2</anchor>
            <arglist>(const QRect &amp;rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRoundRect</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>drawRoundRect</anchor>
            <arglist>(const QRectF &amp;r, int xRnd, int yRnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRoundRect</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>drawRoundRect-1</anchor>
            <arglist>(int x, int y, int w, int h, int , int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRoundRect</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>drawRoundRect-2</anchor>
            <arglist>(const QRect &amp;r, int xRnd, int yRnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTiledPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawTiledPixmap</anchor>
            <arglist>(const QRectF &amp;rectangle, const QPixmap &amp;pixmap, const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTiledPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawTiledPixmap-1</anchor>
            <arglist>(int x, int y, int width, int height, const QPixmap &amp;pixmap, int sx, int sy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTiledPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawTiledPixmap-2</anchor>
            <arglist>(const QRect &amp;rectangle, const QPixmap &amp;pixmap, const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPicture</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPicture</anchor>
            <arglist>(const QPointF &amp;point, const QPicture &amp;picture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPicture</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPicture-1</anchor>
            <arglist>(int x, int y, const QPicture &amp;picture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPicture</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPicture-2</anchor>
            <arglist>(const QPoint &amp;point, const QPicture &amp;picture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap</anchor>
            <arglist>(const QRectF &amp;target, const QPixmap &amp;pixmap, const QRectF &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-1</anchor>
            <arglist>(const QRect &amp;target, const QPixmap &amp;pixmap, const QRect &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-2</anchor>
            <arglist>(int x, int y, int w, int h, const QPixmap &amp;pixmap, int sx, int sy, int sw, int sh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-3</anchor>
            <arglist>(int x, int y, const QPixmap &amp;pixmap, int sx, int sy, int sw, int sh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-4</anchor>
            <arglist>(const QPointF &amp;point, const QPixmap &amp;pixmap, const QRectF &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-5</anchor>
            <arglist>(const QPoint &amp;point, const QPixmap &amp;pixmap, const QRect &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-6</anchor>
            <arglist>(const QPointF &amp;point, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-7</anchor>
            <arglist>(const QPoint &amp;point, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-8</anchor>
            <arglist>(int x, int y, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-9</anchor>
            <arglist>(const QRect &amp;rectangle, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-10</anchor>
            <arglist>(int x, int y, int width, int height, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmapFragments</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmapFragments</anchor>
            <arglist>(const QPainter::PixmapFragment *fragments, int fragmentCount, const QPixmap &amp;pixmap, QPainter::PixmapFragmentHints hints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage</anchor>
            <arglist>(const QRectF &amp;target, const QImage &amp;image, const QRectF &amp;source, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-1</anchor>
            <arglist>(const QRect &amp;target, const QImage &amp;image, const QRect &amp;source, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-2</anchor>
            <arglist>(const QPointF &amp;point, const QImage &amp;image, const QRectF &amp;source, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-3</anchor>
            <arglist>(const QPoint &amp;point, const QImage &amp;image, const QRect &amp;source, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-4</anchor>
            <arglist>(const QRectF &amp;rectangle, const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-5</anchor>
            <arglist>(const QRect &amp;rectangle, const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-6</anchor>
            <arglist>(const QPointF &amp;point, const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-7</anchor>
            <arglist>(const QPoint &amp;point, const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-8</anchor>
            <arglist>(int x, int y, const QImage &amp;image, int sx, int sy, int sw, int sh, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayoutDirection</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setLayoutDirection</anchor>
            <arglist>(Qt::LayoutDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>layoutDirection</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>layoutDirection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawGlyphRun</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawGlyphRun</anchor>
            <arglist>(const QPointF &amp;position, const QGlyphRun &amp;glyphs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawStaticText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawStaticText</anchor>
            <arglist>(const QPointF &amp;topLeftPosition, const QStaticText &amp;staticText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawStaticText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawStaticText-1</anchor>
            <arglist>(const QPoint &amp;topLeftPosition, const QStaticText &amp;staticText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawStaticText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawStaticText-2</anchor>
            <arglist>(int left, int top, const QStaticText &amp;staticText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText</anchor>
            <arglist>(const QPointF &amp;position, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText-1</anchor>
            <arglist>(const QPoint &amp;position, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText-2</anchor>
            <arglist>(int x, int y, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText</anchor>
            <arglist>(const QRectF &amp;rectangle, int flags, const QString &amp;text, QRectF *boundingRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText-3</anchor>
            <arglist>(const QRect &amp;rectangle, int flags, const QString &amp;text, QRect *boundingRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText-4</anchor>
            <arglist>(int x, int y, int width, int height, int flags, const QString &amp;text, QRect *boundingRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText-5</anchor>
            <arglist>(const QRectF &amp;rectangle, const QString &amp;text, const QTextOption &amp;option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>(const QRectF &amp;rectangle, int flags, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>boundingRect-1</anchor>
            <arglist>(const QRect &amp;rectangle, int flags, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>boundingRect-2</anchor>
            <arglist>(int x, int y, int w, int h, int flags, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>boundingRect-3</anchor>
            <arglist>(const QRectF &amp;rectangle, const QString &amp;text, const QTextOption &amp;option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect</anchor>
            <arglist>(const QRectF &amp;rectangle, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-1</anchor>
            <arglist>(int x, int y, int width, int height, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-2</anchor>
            <arglist>(const QRect &amp;rectangle, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-3</anchor>
            <arglist>(const QRectF &amp;rectangle, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-4</anchor>
            <arglist>(int x, int y, int width, int height, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-5</anchor>
            <arglist>(const QRect &amp;rectangle, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-6</anchor>
            <arglist>(int x, int y, int width, int height, Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-7</anchor>
            <arglist>(const QRect &amp;rectangle, Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-8</anchor>
            <arglist>(const QRectF &amp;rectangle, Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-9</anchor>
            <arglist>(int x, int y, int width, int height, Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-10</anchor>
            <arglist>(const QRect &amp;rectangle, Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-11</anchor>
            <arglist>(const QRectF &amp;rectangle, Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-12</anchor>
            <arglist>(int x, int y, int width, int height, QGradient::Preset preset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-13</anchor>
            <arglist>(const QRect &amp;rectangle, QGradient::Preset preset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-14</anchor>
            <arglist>(const QRectF &amp;rectangle, QGradient::Preset preset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>eraseRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>eraseRect</anchor>
            <arglist>(const QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>eraseRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>eraseRect-1</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>eraseRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>eraseRect-2</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderHint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setRenderHint</anchor>
            <arglist>(QPainter::RenderHint hint, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderHints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setRenderHints</anchor>
            <arglist>(QPainter::RenderHints hints, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainter::RenderHints</type>
            <name>renderHints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>renderHints</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testRenderHint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>testRenderHint</anchor>
            <arglist>(QPainter::RenderHint hint) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setRedirected</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>setRedirected</anchor>
            <arglist>(const QPaintDevice *device, QPaintDevice *replacement, const QPoint &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPaintDevice *</type>
            <name>redirected</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>redirected</anchor>
            <arglist>(const QPaintDevice *device, QPoint *offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>restoreRedirected</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>restoreRedirected</anchor>
            <arglist>(const QPaintDevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginNativePainting</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>beginNativePainting</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endNativePainting</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>endNativePainting</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPainter::PixmapFragment</name>
        <filename>qpainter-pixmapfragment.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>PixmapFragment</type>
            <name>create</name>
            <anchorfile>qpainter-pixmapfragment.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QPointF &amp;pos, const QRectF &amp;sourceRect, qreal scaleX, qreal scaleY, qreal rotation, qreal opacity)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPainterPath</name>
        <filename>qpainterpath.html</filename>
        <member kind="enumeration">
            <name>ElementType</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>ElementType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MoveToElement</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineToElement</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CurveToElement</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CurveToDataElement</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QPainterPath::Element</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainterPath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>QPainterPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainterPath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>QPainterPath-1</anchor>
            <arglist>(const QPointF &amp;startPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainterPath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>QPainterPath-2</anchor>
            <arglist>(const QPainterPath &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath &amp;</type>
            <name>operator=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPainterPath &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath &amp;</type>
            <name>operator=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QPainterPath &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPainterPath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>dtor.QPainterPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPainterPath &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capacity</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closeSubpath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>closeSubpath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>moveTo</anchor>
            <arglist>(const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>moveTo-1</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lineTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>lineTo</anchor>
            <arglist>(const QPointF &amp;endPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lineTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>lineTo-1</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>arcMoveTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>arcMoveTo</anchor>
            <arglist>(const QRectF &amp;rectangle, qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>arcMoveTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>arcMoveTo-1</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height, qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>arcTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>arcTo</anchor>
            <arglist>(const QRectF &amp;rectangle, qreal startAngle, qreal sweepLength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>arcTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>arcTo-1</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height, qreal startAngle, qreal sweepLength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cubicTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>cubicTo</anchor>
            <arglist>(const QPointF &amp;c1, const QPointF &amp;c2, const QPointF &amp;endPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cubicTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>cubicTo-1</anchor>
            <arglist>(qreal c1X, qreal c1Y, qreal c2X, qreal c2Y, qreal endPointX, qreal endPointY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quadTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>quadTo</anchor>
            <arglist>(const QPointF &amp;c, const QPointF &amp;endPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quadTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>quadTo-1</anchor>
            <arglist>(qreal cx, qreal cy, qreal endPointX, qreal endPointY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>currentPosition</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>currentPosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRect</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addRect</anchor>
            <arglist>(const QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRect</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addRect-1</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addEllipse</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addEllipse</anchor>
            <arglist>(const QRectF &amp;boundingRectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addEllipse</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addEllipse-1</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addEllipse</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addEllipse-2</anchor>
            <arglist>(const QPointF &amp;center, qreal rx, qreal ry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addPolygon</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addPolygon</anchor>
            <arglist>(const QPolygonF &amp;polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addText</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addText</anchor>
            <arglist>(const QPointF &amp;point, const QFont &amp;font, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addText</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addText-1</anchor>
            <arglist>(qreal x, qreal y, const QFont &amp;font, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addPath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addPath</anchor>
            <arglist>(const QPainterPath &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRegion</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addRegion</anchor>
            <arglist>(const QRegion &amp;region)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRoundedRect</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addRoundedRect</anchor>
            <arglist>(const QRectF &amp;rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRoundedRect</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addRoundedRect-1</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRoundRect</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>addRoundRect</anchor>
            <arglist>(const QRectF &amp;r, int xRnd, int yRnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRoundRect</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>addRoundRect-1</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h, int xRnd, int yRnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRoundRect</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>addRoundRect-2</anchor>
            <arglist>(const QRectF &amp;rect, int roundness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRoundRect</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>addRoundRect-3</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height, int roundness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectPath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>connectPath</anchor>
            <arglist>(const QPainterPath &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(const QRectF &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QRectF &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>translate-1</anchor>
            <arglist>(const QPointF &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>translated</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(qreal dx, qreal dy) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>translated</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>translated-1</anchor>
            <arglist>(const QPointF &amp;offset) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>controlPointRect</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>controlPointRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::FillRule</type>
            <name>fillRule</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>fillRule</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFillRule</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>setFillRule</anchor>
            <arglist>(Qt::FillRule fillRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>toReversed</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>toReversed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPolygonF&gt;</type>
            <name>toSubpathPolygons</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>toSubpathPolygons-1</anchor>
            <arglist>(const QMatrix &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPolygonF&gt;</type>
            <name>toFillPolygons</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>toFillPolygons-1</anchor>
            <arglist>(const QMatrix &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>toFillPolygon</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>toFillPolygon-1</anchor>
            <arglist>(const QMatrix &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPolygonF&gt;</type>
            <name>toSubpathPolygons</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>toSubpathPolygons</anchor>
            <arglist>(const QTransform &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPolygonF&gt;</type>
            <name>toFillPolygons</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>toFillPolygons</anchor>
            <arglist>(const QTransform &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>toFillPolygon</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>toFillPolygon</anchor>
            <arglist>(const QTransform &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>elementCount</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>elementCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath::Element</type>
            <name>elementAt</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>elementAt</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setElementPositionAt</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>setElementPositionAt</anchor>
            <arglist>(int index, qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>length</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>percentAtLength</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>percentAtLength</anchor>
            <arglist>(qreal len) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pointAtPercent</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>pointAtPercent</anchor>
            <arglist>(qreal t) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>angleAtPercent</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>angleAtPercent</anchor>
            <arglist>(qreal t) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>slopeAtPercent</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>slopeAtPercent</anchor>
            <arglist>(qreal t) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>intersects-1</anchor>
            <arglist>(const QPainterPath &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(const QPainterPath &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>united</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QPainterPath &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>intersected</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QPainterPath &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>subtracted</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>subtracted</anchor>
            <arglist>(const QPainterPath &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>subtractedInverted</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>subtractedInverted</anchor>
            <arglist>(const QPainterPath &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>simplified</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>simplified</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPainterPath &amp;path) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPainterPath &amp;path) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>operator&amp;</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-and</anchor>
            <arglist>(const QPainterPath &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>operator|</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(const QPainterPath &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>operator+</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QPainterPath &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>operator-</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QPainterPath &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(const QPainterPath &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath &amp;</type>
            <name>operator|=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(const QPainterPath &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath &amp;</type>
            <name>operator+=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QPainterPath &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath &amp;</type>
            <name>operator-=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QPainterPath &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QPainterPath &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QPainterPath &amp;path)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPainterPath::Element</name>
        <filename>qpainterpath-element.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMoveTo</name>
            <anchorfile>qpainterpath-element.html</anchorfile>
            <anchor>isMoveTo</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLineTo</name>
            <anchorfile>qpainterpath-element.html</anchorfile>
            <anchor>isLineTo</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCurveTo</name>
            <anchorfile>qpainterpath-element.html</anchorfile>
            <anchor>isCurveTo</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>operator QPointF</name>
            <anchorfile>qpainterpath-element.html</anchorfile>
            <anchor>operator-QPointF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpainterpath-element.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const Element &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpainterpath-element.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const Element &amp;other) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPainterPathStroker</name>
        <filename>qpainterpathstroker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainterPathStroker</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>QPainterPathStroker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainterPathStroker</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>QPainterPathStroker-1</anchor>
            <arglist>(const QPen &amp;pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPainterPathStroker</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>dtor.QPainterPathStroker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapStyle</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setCapStyle</anchor>
            <arglist>(Qt::PenCapStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PenCapStyle</type>
            <name>capStyle</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>capStyle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setJoinStyle</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setJoinStyle</anchor>
            <arglist>(Qt::PenJoinStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PenJoinStyle</type>
            <name>joinStyle</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>joinStyle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMiterLimit</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setMiterLimit</anchor>
            <arglist>(qreal limit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>miterLimit</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>miterLimit</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurveThreshold</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setCurveThreshold</anchor>
            <arglist>(qreal threshold)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>curveThreshold</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>curveThreshold</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDashPattern</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setDashPattern</anchor>
            <arglist>(Qt::PenStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDashPattern</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setDashPattern-1</anchor>
            <arglist>(const QVector&lt;qreal&gt; &amp;dashPattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;qreal&gt;</type>
            <name>dashPattern</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>dashPattern</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDashOffset</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setDashOffset</anchor>
            <arglist>(qreal offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dashOffset</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>dashOffset</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>createStroke</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>createStroke</anchor>
            <arglist>(const QPainterPath &amp;path) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPalette</name>
        <filename>qpalette.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette-1</anchor>
            <arglist>(const QColor &amp;button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette-2</anchor>
            <arglist>(Qt::GlobalColor button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette-3</anchor>
            <arglist>(const QColor &amp;button, const QColor &amp;window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette-4</anchor>
            <arglist>(const QBrush &amp;windowText, const QBrush &amp;button, const QBrush &amp;light, const QBrush &amp;dark, const QBrush &amp;mid, const QBrush &amp;text, const QBrush &amp;bright_text, const QBrush &amp;base, const QBrush &amp;window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette-obsolete.html</anchorfile>
            <anchor>QPalette-5</anchor>
            <arglist>(const QColor &amp;windowText, const QColor &amp;window, const QColor &amp;light, const QColor &amp;dark, const QColor &amp;mid, const QColor &amp;text, const QColor &amp;base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette-6</anchor>
            <arglist>(const QPalette &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>dtor.QPalette</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPalette &amp;</type>
            <name>operator=</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPalette &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette-7</anchor>
            <arglist>(QPalette &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPalette &amp;</type>
            <name>operator=</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QPalette &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPalette &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>ColorGroup</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorGroup-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Active</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Disabled</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Inactive</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NColorGroups</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Current</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>All</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Normal</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ColorRole</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>WindowText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Button</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Light</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Midlight</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dark</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mid</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Text</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BrightText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ButtonText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Base</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Window</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Shadow</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Highlight</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HighlightedText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Link</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinkVisited</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlternateBase</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoRole</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolTipBase</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolTipText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PlaceholderText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NColorRoles</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Foreground</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Background</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPalette::ColorGroup</type>
            <name>currentColorGroup</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>currentColorGroup</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentColorGroup</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>setCurrentColorGroup</anchor>
            <arglist>(QPalette::ColorGroup cg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QColor &amp;</type>
            <name>color</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>color</anchor>
            <arglist>(QPalette::ColorGroup group, QPalette::ColorRole role) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>brush</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>brush</anchor>
            <arglist>(QPalette::ColorGroup group, QPalette::ColorRole role) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(QPalette::ColorGroup group, QPalette::ColorRole role, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>setColor-1</anchor>
            <arglist>(QPalette::ColorRole role, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrush</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>setBrush</anchor>
            <arglist>(QPalette::ColorRole role, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBrushSet</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>isBrushSet</anchor>
            <arglist>(QPalette::ColorGroup cg, QPalette::ColorRole cr) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrush</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>setBrush-1</anchor>
            <arglist>(QPalette::ColorGroup group, QPalette::ColorRole role, const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorGroup</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>setColorGroup</anchor>
            <arglist>(QPalette::ColorGroup cg, const QBrush &amp;windowText, const QBrush &amp;button, const QBrush &amp;light, const QBrush &amp;dark, const QBrush &amp;mid, const QBrush &amp;text, const QBrush &amp;bright_text, const QBrush &amp;base, const QBrush &amp;window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEqual</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>isEqual</anchor>
            <arglist>(QPalette::ColorGroup cg1, QPalette::ColorGroup cg2) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QColor &amp;</type>
            <name>color</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>color-1</anchor>
            <arglist>(QPalette::ColorRole role) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>brush</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>brush-1</anchor>
            <arglist>(QPalette::ColorRole role) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>windowText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>windowText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>button</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>button</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>light</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>light</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>dark</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>dark</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>mid</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>text</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>base</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>base</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>alternateBase</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>alternateBase</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>toolTipBase</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>toolTipBase</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>toolTipText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>toolTipText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>window</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>midlight</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>midlight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>brightText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>brightText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>buttonText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>buttonText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>shadow</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>shadow</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>highlight</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>highlight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>highlightedText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>highlightedText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>link</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>link</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>linkVisited</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>linkVisited</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>placeholderText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>placeholderText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>foreground</name>
            <anchorfile>qpalette-obsolete.html</anchorfile>
            <anchor>foreground</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>background</name>
            <anchorfile>qpalette-obsolete.html</anchorfile>
            <anchor>background</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPalette &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPalette &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCopyOf</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>isCopyOf</anchor>
            <arglist>(const QPalette &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serialNumber</name>
            <anchorfile>qpalette-obsolete.html</anchorfile>
            <anchor>serialNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>cacheKey</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>cacheKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPalette</type>
            <name>resolve</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>resolve</anchor>
            <arglist>(const QPalette &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;s, const QPalette &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;s, QPalette &amp;p)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPdfWriter</name>
        <filename>qpdfwriter.html</filename>
        <base>QObject</base>
        <base>QPagedPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPdfWriter</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>QPdfWriter</anchor>
            <arglist>(const QString &amp;filename)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPdfWriter</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>QPdfWriter-1</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPdfWriter</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>dtor.QPdfWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPdfVersion</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setPdfVersion</anchor>
            <arglist>(QPagedPaintDevice::PdfVersion version)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPagedPaintDevice::PdfVersion</type>
            <name>pdfVersion</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>pdfVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>title</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>title</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTitle</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setTitle</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>creator</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>creator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCreator</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setCreator</anchor>
            <arglist>(const QString &amp;creator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>newPage</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>newPage</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolution</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setResolution</anchor>
            <arglist>(int resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>resolution</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>resolution</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocumentXmpMetadata</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setDocumentXmpMetadata</anchor>
            <arglist>(const QByteArray &amp;xmpMetadata)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>documentXmpMetadata</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>documentXmpMetadata</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addFileAttachment</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>addFileAttachment</anchor>
            <arglist>(const QString &amp;fileName, const QByteArray &amp;data, const QString &amp;mimeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPageLayout</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setPageLayout</anchor>
            <arglist>(const QPageLayout &amp;newPageLayout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPageSize</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setPageSize</anchor>
            <arglist>(const QPageSize &amp;pageSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPageOrientation</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setPageOrientation</anchor>
            <arglist>(QPageLayout::Orientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPageMargins</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setPageMargins</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPageMargins</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setPageMargins-1</anchor>
            <arglist>(const QMarginsF &amp;margins, QPageLayout::Unit units)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPageLayout</type>
            <name>pageLayout</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>pageLayout</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPageSize</name>
            <anchorfile>qpdfwriter-obsolete.html</anchorfile>
            <anchor>setPageSize-1</anchor>
            <arglist>(QPagedPaintDevice::PageSize size) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPageSizeMM</name>
            <anchorfile>qpdfwriter-obsolete.html</anchorfile>
            <anchor>setPageSizeMM</anchor>
            <arglist>(const QSizeF &amp;size) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setMargins</name>
            <anchorfile>qpdfwriter-obsolete.html</anchorfile>
            <anchor>setMargins</anchor>
            <arglist>(const QPagedPaintDevice::Margins &amp;m) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPen</name>
        <filename>qpen.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>QPen</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>QPen-1</anchor>
            <arglist>(Qt::PenStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>QPen-2</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>QPen-3</anchor>
            <arglist>(const QBrush &amp;brush, qreal width, Qt::PenStyle style, Qt::PenCapStyle cap, Qt::PenJoinStyle join)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>QPen-4</anchor>
            <arglist>(const QPen &amp;pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>dtor.QPen</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPen &amp;</type>
            <name>operator=</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPen &amp;pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>QPen-5</anchor>
            <arglist>(QPen &amp;&amp;pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPen &amp;</type>
            <name>operator=</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QPen &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPen &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PenStyle</type>
            <name>style</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyle</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setStyle</anchor>
            <arglist>(Qt::PenStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;qreal&gt;</type>
            <name>dashPattern</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>dashPattern</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDashPattern</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setDashPattern</anchor>
            <arglist>(const QVector&lt;qreal&gt; &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dashOffset</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>dashOffset</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDashOffset</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setDashOffset</anchor>
            <arglist>(qreal offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>miterLimit</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>miterLimit</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMiterLimit</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setMiterLimit</anchor>
            <arglist>(qreal limit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>widthF</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>widthF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidthF</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setWidthF</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>color</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>brush</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>brush</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrush</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setBrush</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSolid</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>isSolid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PenCapStyle</type>
            <name>capStyle</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>capStyle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapStyle</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setCapStyle</anchor>
            <arglist>(Qt::PenCapStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PenJoinStyle</type>
            <name>joinStyle</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>joinStyle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setJoinStyle</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setJoinStyle</anchor>
            <arglist>(Qt::PenJoinStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCosmetic</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>isCosmetic</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCosmetic</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setCosmetic</anchor>
            <arglist>(bool cosmetic)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPen &amp;pen) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPen &amp;pen) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QPen &amp;pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QPen &amp;pen)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPicture</name>
        <filename>qpicture.html</filename>
        <base>QPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPicture</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>QPicture</anchor>
            <arglist>(int formatVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPicture</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>QPicture-1</anchor>
            <arglist>(const QPicture &amp;pic)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPicture</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>dtor.QPicture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>size</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>data</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setData</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const char *data, uint size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>play</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>play</anchor>
            <arglist>(QPainter *painter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>load-1</anchor>
            <arglist>(QIODevice *dev, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QString &amp;fileName, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>save-1</anchor>
            <arglist>(QIODevice *dev, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>save</anchor>
            <arglist>(const QString &amp;fileName, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBoundingRect</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>setBoundingRect</anchor>
            <arglist>(const QRect &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPicture &amp;</type>
            <name>operator=</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPicture &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPicture &amp;</type>
            <name>operator=</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QPicture &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPicture &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const char *</type>
            <name>pictureFormat</name>
            <anchorfile>qpicture-obsolete.html</anchorfile>
            <anchor>pictureFormat</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>inputFormats</name>
            <anchorfile>qpicture-obsolete.html</anchorfile>
            <anchor>inputFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>outputFormats</name>
            <anchorfile>qpicture-obsolete.html</anchorfile>
            <anchor>outputFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>inputFormatList</name>
            <anchorfile>qpicture-obsolete.html</anchorfile>
            <anchor>inputFormatList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>outputFormatList</name>
            <anchorfile>qpicture-obsolete.html</anchorfile>
            <anchor>outputFormatList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;s, const QPicture &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;s, QPicture &amp;r)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPictureFormatPlugin</name>
        <filename>qpictureformatplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPictureFormatPlugin</name>
            <anchorfile>qpictureformatplugin.html</anchorfile>
            <anchor>QPictureFormatPlugin</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPictureFormatPlugin</name>
            <anchorfile>qpictureformatplugin.html</anchorfile>
            <anchor>dtor.QPictureFormatPlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>loadPicture</name>
            <anchorfile>qpictureformatplugin.html</anchorfile>
            <anchor>loadPicture</anchor>
            <arglist>(const QString &amp;format, const QString &amp;fileName, QPicture *picture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>savePicture</name>
            <anchorfile>qpictureformatplugin.html</anchorfile>
            <anchor>savePicture</anchor>
            <arglist>(const QString &amp;format, const QString &amp;fileName, const QPicture &amp;picture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>installIOHandler</name>
            <anchorfile>qpictureformatplugin.html</anchorfile>
            <anchor>installIOHandler</anchor>
            <arglist>(const QString &amp;format) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPictureIO</name>
        <filename>qpictureio.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPictureIO</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>QPictureIO</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPictureIO</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>QPictureIO-1</anchor>
            <arglist>(QIODevice *ioDevice, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPictureIO</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>QPictureIO-2</anchor>
            <arglist>(const QString &amp;fileName, const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPictureIO</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>dtor.QPictureIO</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPicture &amp;</type>
            <name>picture</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>picture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>status</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>format</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>ioDevice</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>ioDevice</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>quality</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>quality</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>parameters</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>gamma</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>gamma</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPicture</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setPicture</anchor>
            <arglist>(const QPicture &amp;picture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(int status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const char *format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIODevice</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setIODevice</anchor>
            <arglist>(QIODevice *ioDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuality</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setQuality</anchor>
            <arglist>(int q)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParameters</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setParameters</anchor>
            <arglist>(const char *parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGamma</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setGamma</anchor>
            <arglist>(float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>read</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>read</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>write</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>pictureFormat</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>pictureFormat</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>pictureFormat</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>pictureFormat-1</anchor>
            <arglist>(QIODevice *d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>inputFormats</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>inputFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>outputFormats</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>outputFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>defineIOHandler</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>defineIOHandler</anchor>
            <arglist>(const char *format, const char *header, const char *flags, picture_io_handler readPicture, picture_io_handler writePicture)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPixelFormat</name>
        <filename>qpixelformat.html</filename>
        <member kind="enumeration">
            <name>ColorModel</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ColorModel-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>RGB</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ColorModel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BGR</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ColorModel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Indexed</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ColorModel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Grayscale</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ColorModel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CMYK</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ColorModel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HSL</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ColorModel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HSV</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ColorModel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>YUV</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ColorModel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Alpha</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ColorModel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AlphaUsage</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>AlphaUsage-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UsesAlpha</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>AlphaUsage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IgnoresAlpha</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>AlphaUsage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AlphaPosition</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>AlphaPosition-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AtBeginning</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>AlphaPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AtEnd</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>AlphaPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AlphaPremultiplied</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>AlphaPremultiplied-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NotPremultiplied</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>AlphaPremultiplied-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Premultiplied</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>AlphaPremultiplied-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TypeInterpretation</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>TypeInterpretation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnsignedInteger</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>TypeInterpretation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsignedShort</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>TypeInterpretation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsignedByte</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>TypeInterpretation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FloatingPoint</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>TypeInterpretation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>YUVLayout</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>YUV444</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>YUV422</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>YUV411</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>YUV420P</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>YUV420SP</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>YV12</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UYVY</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>YUYV</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NV12</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NV21</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IMC1</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IMC2</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IMC3</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IMC4</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Y8</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Y16</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>YUVLayout-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ByteOrder</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ByteOrder-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LittleEndian</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ByteOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BigEndian</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ByteOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CurrentSystemEndian</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>ByteOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixelFormat</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>QPixelFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixelFormat</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>QPixelFormat-1</anchor>
            <arglist>(QPixelFormat::ColorModel colorModel, uchar firstSize, uchar secondSize, uchar thirdSize, uchar fourthSize, uchar fifthSize, uchar alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::AlphaPremultiplied premultiplied, QPixelFormat::TypeInterpretation typeInterpretation, QPixelFormat::ByteOrder byteOrder, uchar subEnum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat::ColorModel</type>
            <name>colorModel</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>colorModel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>channelCount</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>channelCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>redSize</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>redSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>greenSize</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>greenSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>blueSize</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>blueSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>cyanSize</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>cyanSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>magentaSize</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>magentaSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>yellowSize</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>yellowSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>blackSize</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>blackSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>hueSize</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>hueSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>saturationSize</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>saturationSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>lightnessSize</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>lightnessSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>brightnessSize</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>brightnessSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>alphaSize</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>alphaSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>bitsPerPixel</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>bitsPerPixel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat::AlphaUsage</type>
            <name>alphaUsage</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>alphaUsage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat::AlphaPosition</type>
            <name>alphaPosition</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>alphaPosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat::AlphaPremultiplied</type>
            <name>premultiplied</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>premultiplied</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat::TypeInterpretation</type>
            <name>typeInterpretation</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>typeInterpretation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat::ByteOrder</type>
            <name>byteOrder</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>byteOrder</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat::YUVLayout</type>
            <name>yuvLayout</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>yuvLayout</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat</type>
            <name>qPixelFormatRgba</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>qPixelFormatRgba</anchor>
            <arglist>(uchar redSize, uchar greenSize, uchar blueSize, uchar alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::AlphaPremultiplied premultiplied, QPixelFormat::TypeInterpretation typeInterpretation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat</type>
            <name>qPixelFormatGrayscale</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>qPixelFormatGrayscale</anchor>
            <arglist>(uchar channelSize, QPixelFormat::TypeInterpretation typeInterpretation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat</type>
            <name>qPixelFormatAlpha</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>qPixelFormatAlpha</anchor>
            <arglist>(uchar channelSize, QPixelFormat::TypeInterpretation typeInterpretation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat</type>
            <name>qPixelFormatCmyk</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>qPixelFormatCmyk</anchor>
            <arglist>(uchar channelSize, uchar alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::TypeInterpretation typeInterpretation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat</type>
            <name>qPixelFormatHsl</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>qPixelFormatHsl</anchor>
            <arglist>(uchar channelSize, uchar alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::TypeInterpretation typeInterpretation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat</type>
            <name>qPixelFormatHsv</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>qPixelFormatHsv</anchor>
            <arglist>(uchar channelSize, uchar alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::TypeInterpretation typeInterpretation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixelFormat</type>
            <name>qPixelFormatYuv</name>
            <anchorfile>qpixelformat.html</anchorfile>
            <anchor>qPixelFormatYuv</anchor>
            <arglist>(QPixelFormat::YUVLayout yuvLayout, uchar alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::AlphaPremultiplied premultiplied, QPixelFormat::TypeInterpretation typeInterpretation, QPixelFormat::ByteOrder byteOrder)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPixmap</name>
        <filename>qpixmap.html</filename>
        <base>QPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>QPixmap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>QPixmap</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>QPixmap-1</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>QPixmap-2</anchor>
            <arglist>(const QString &amp;fileName, const char *format, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>QPixmap-3</anchor>
            <arglist>(const char *const [] xpm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>QPixmap-4</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>dtor.QPixmap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap &amp;</type>
            <name>operator=</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap &amp;</type>
            <name>operator=</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QPixmap &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPixmap &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>rect</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>defaultDepth</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>defaultDepth</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qpixmap-obsolete.html</anchorfile>
            <anchor>fill-1</anchor>
            <arglist>(const QPaintDevice *device, const QPoint &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qpixmap-obsolete.html</anchorfile>
            <anchor>fill-2</anchor>
            <arglist>(const QPaintDevice *device, int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap</type>
            <name>mask</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>mask</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMask</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>setMask</anchor>
            <arglist>(const QBitmap &amp;mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>devicePixelRatio</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevicePixelRatio</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>setDevicePixelRatio</anchor>
            <arglist>(qreal scaleFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAlpha</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>hasAlpha</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAlphaChannel</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>hasAlphaChannel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap</type>
            <name>createHeuristicMask</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>createHeuristicMask</anchor>
            <arglist>(bool clipTight) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap</type>
            <name>createMaskFromColor</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>createMaskFromColor</anchor>
            <arglist>(const QColor &amp;maskColor, Qt::MaskMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap</type>
            <name>grabWindow</name>
            <anchorfile>qpixmap-obsolete.html</anchorfile>
            <anchor>grabWindow</anchor>
            <arglist>(WId window, int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap</type>
            <name>grabWidget</name>
            <anchorfile>qpixmap-obsolete.html</anchorfile>
            <anchor>grabWidget</anchor>
            <arglist>(QObject *widget, const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap</type>
            <name>grabWidget</name>
            <anchorfile>qpixmap-obsolete.html</anchorfile>
            <anchor>grabWidget-1</anchor>
            <arglist>(QObject *widget, int x, int y, int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>scaled</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>scaled-1</anchor>
            <arglist>(int width, int height, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>scaled</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>scaled</anchor>
            <arglist>(const QSize &amp;size, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>scaledToWidth</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>scaledToWidth</anchor>
            <arglist>(int width, Qt::TransformationMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>scaledToHeight</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>scaledToHeight</anchor>
            <arglist>(int height, Qt::TransformationMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>transformed</name>
            <anchorfile>qpixmap-obsolete.html</anchorfile>
            <anchor>transformed-1</anchor>
            <arglist>(const QMatrix &amp;matrix, Qt::TransformationMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMatrix</type>
            <name>trueMatrix</name>
            <anchorfile>qpixmap-obsolete.html</anchorfile>
            <anchor>trueMatrix-1</anchor>
            <arglist>(const QMatrix &amp;m, int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>transformed</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>transformed</anchor>
            <arglist>(const QTransform &amp;transform, Qt::TransformationMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTransform</type>
            <name>trueMatrix</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>trueMatrix</anchor>
            <arglist>(const QTransform &amp;matrix, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>toImage</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>toImage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap</type>
            <name>fromImage</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>fromImage</anchor>
            <arglist>(const QImage &amp;image, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap</type>
            <name>fromImageReader</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>fromImageReader</anchor>
            <arglist>(QImageReader *imageReader, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap</type>
            <name>fromImage</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>fromImage-1</anchor>
            <arglist>(QImage &amp;&amp;image, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QString &amp;fileName, const char *format, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>loadFromData</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>loadFromData</anchor>
            <arglist>(const uchar *data, uint len, const char *format, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>loadFromData</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>loadFromData-1</anchor>
            <arglist>(const QByteArray &amp;data, const char *format, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>save</anchor>
            <arglist>(const QString &amp;fileName, const char *format, int quality) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>save-1</anchor>
            <arglist>(QIODevice *device, const char *format, int quality) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>convertFromImage</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>convertFromImage</anchor>
            <arglist>(const QImage &amp;image, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>copy</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>copy-1</anchor>
            <arglist>(int x, int y, int width, int height) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>copy</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QRect &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scroll</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>scroll</anchor>
            <arglist>(int dx, int dy, int x, int y, int width, int height, QRegion *exposed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scroll</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>scroll-1</anchor>
            <arglist>(int dx, int dy, const QRect &amp;rect, QRegion *exposed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serialNumber</name>
            <anchorfile>qpixmap-obsolete.html</anchorfile>
            <anchor>serialNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>cacheKey</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>cacheKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>detach</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>detach</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isQBitmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>isQBitmap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>alphaChannel</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>alphaChannel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaChannel</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>setAlphaChannel</anchor>
            <arglist>(const QPixmap &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>operator-lt-lt-23</anchor>
            <arglist>(QDataStream &amp;stream, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QPixmap &amp;pixmap)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPixmapCache</name>
        <filename>qpixmapcache.html</filename>
        <class>QPixmapCache::Key</class>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>cacheLimit</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>cacheLimit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setCacheLimit</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>setCacheLimit</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap *</type>
            <name>find</name>
            <anchorfile>qpixmapcache-obsolete.html</anchorfile>
            <anchor>find-1</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>find</name>
            <anchorfile>qpixmapcache-obsolete.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const QString &amp;key, QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>find</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const QString &amp;key, QPixmap *pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>find</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>find-3</anchor>
            <arglist>(const QPixmapCache::Key &amp;key, QPixmap *pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>insert</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const QString &amp;key, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmapCache::Key</type>
            <name>insert</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>replace</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(const QPixmapCache::Key &amp;key, const QPixmap &amp;pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>remove-1</anchor>
            <arglist>(const QPixmapCache::Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPixmapCache::Key</name>
        <filename>qpixmapcache-key.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Key</name>
            <anchorfile>qpixmapcache-key.html</anchorfile>
            <anchor>Key</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~Key</name>
            <anchorfile>qpixmapcache-key.html</anchorfile>
            <anchor>dtor.Key</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qpixmapcache-key.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlatformSurfaceEvent</name>
        <filename>qplatformsurfaceevent.html</filename>
        <base>QEvent</base>
        <member kind="enumeration">
            <name>SurfaceEventType</name>
            <anchorfile>qplatformsurfaceevent.html</anchorfile>
            <anchor>SurfaceEventType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SurfaceCreated</name>
            <anchorfile>qplatformsurfaceevent.html</anchorfile>
            <anchor>SurfaceEventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SurfaceAboutToBeDestroyed</name>
            <anchorfile>qplatformsurfaceevent.html</anchorfile>
            <anchor>SurfaceEventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPlatformSurfaceEvent</name>
            <anchorfile>qplatformsurfaceevent.html</anchorfile>
            <anchor>QPlatformSurfaceEvent</anchor>
            <arglist>(QPlatformSurfaceEvent::SurfaceEventType surfaceEventType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlatformSurfaceEvent::SurfaceEventType</type>
            <name>surfaceEventType</name>
            <anchorfile>qplatformsurfaceevent.html</anchorfile>
            <anchor>surfaceEventType</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPointingDeviceUniqueId</name>
        <filename>qpointingdeviceuniqueid.html</filename>
        <member kind="property" type="qint64">
            <name>numericId</name>
            <anchorfile>qpointingdeviceuniqueid.html</anchorfile>
            <anchor>numericId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointingDeviceUniqueId</name>
            <anchorfile>qpointingdeviceuniqueid.html</anchorfile>
            <anchor>QPointingDeviceUniqueId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPointingDeviceUniqueId</type>
            <name>fromNumericId</name>
            <anchorfile>qpointingdeviceuniqueid.html</anchorfile>
            <anchor>fromNumericId</anchor>
            <arglist>(qint64 id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qpointingdeviceuniqueid.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>numericId</name>
            <anchorfile>qpointingdeviceuniqueid.html</anchorfile>
            <anchor>numericId-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpointingdeviceuniqueid.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(QPointingDeviceUniqueId lhs, QPointingDeviceUniqueId rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpointingdeviceuniqueid.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(QPointingDeviceUniqueId lhs, QPointingDeviceUniqueId rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qpointingdeviceuniqueid.html</anchorfile>
            <anchor>qHash-1</anchor>
            <arglist>(QPointingDeviceUniqueId key, uint seed)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPolygon</name>
        <filename>qpolygon.html</filename>
        <base>QVector</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygon</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>QPolygon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPolygon</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>dtor.QPolygon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygon</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>QPolygon-1</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygon</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>QPolygon-2</anchor>
            <arglist>(const QVector&lt;QPoint&gt; &amp;points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygon</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>QPolygon-4</anchor>
            <arglist>(const QRect &amp;rectangle, bool closed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygon</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>QPolygon</anchor>
            <arglist>(const QPolygon &amp;polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPolygon &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>translate-1</anchor>
            <arglist>(const QPoint &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>translated</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(int dx, int dy) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>translated</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>translated-1</anchor>
            <arglist>(const QPoint &amp;offset) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>point</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>point</anchor>
            <arglist>(int index, int *x, int *y) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>point</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>point-1</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPoint</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>setPoint</anchor>
            <arglist>(int index, int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPoint</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>setPoint-1</anchor>
            <arglist>(int index, const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPoints</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>setPoints</anchor>
            <arglist>(int nPoints, const int *points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPoints</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>setPoints-1</anchor>
            <arglist>(int nPoints, int firstx, int firsty, ... )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>putPoints</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>putPoints</anchor>
            <arglist>(int index, int nPoints, int firstx, int firsty, ... )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>putPoints</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>putPoints</anchor>
            <arglist>(int index, int nPoints, const QPolygon &amp;fromPolygon, int fromIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsPoint</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>containsPoint</anchor>
            <arglist>(const QPoint &amp;point, Qt::FillRule fillRule) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>united</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QPolygon &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>intersected</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QPolygon &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>subtracted</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>subtracted</anchor>
            <arglist>(const QPolygon &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QPolygon &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>operator-lt-lt-14</anchor>
            <arglist>(QDataStream &amp;stream, const QPolygon &amp;polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QPolygon &amp;polygon)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPolygonF</name>
        <filename>qpolygonf.html</filename>
        <base>QVector</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>QPolygonF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>dtor.QPolygonF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>QPolygonF-1</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>QPolygonF-2</anchor>
            <arglist>(const QVector&lt;QPointF&gt; &amp;points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>QPolygonF-4</anchor>
            <arglist>(const QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>QPolygonF-5</anchor>
            <arglist>(const QPolygon &amp;polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>QPolygonF-6</anchor>
            <arglist>(const QPolygonF &amp;polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPolygonF &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>translate-1</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QPointF &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>translated</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>translated-1</anchor>
            <arglist>(qreal dx, qreal dy) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>translated</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(const QPointF &amp;offset) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>toPolygon</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>toPolygon</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isClosed</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>isClosed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsPoint</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>containsPoint</anchor>
            <arglist>(const QPointF &amp;point, Qt::FillRule fillRule) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>united</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QPolygonF &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>intersected</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QPolygonF &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>subtracted</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>subtracted</anchor>
            <arglist>(const QPolygonF &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QPolygonF &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>operator-lt-lt-16</anchor>
            <arglist>(QDataStream &amp;stream, const QPolygonF &amp;polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QPolygonF &amp;polygon)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuaternion</name>
        <filename>qquaternion.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuaternion</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>QQuaternion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuaternion</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>QQuaternion-2</anchor>
            <arglist>(float scalar, float xpos, float ypos, float zpos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuaternion</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>QQuaternion-3</anchor>
            <arglist>(float scalar, const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuaternion</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>QQuaternion-4</anchor>
            <arglist>(const QVector4D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isIdentity</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>isIdentity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>vector</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>vector</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVector</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>setVector</anchor>
            <arglist>(const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVector</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>setVector-1</anchor>
            <arglist>(float x, float y, float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>x</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>y</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>z</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>z</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scalar</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>scalar</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(float x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(float y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>setZ</anchor>
            <arglist>(float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScalar</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>setScalar</anchor>
            <arglist>(float scalar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>float</type>
            <name>dotProduct</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QQuaternion &amp;q1, const QQuaternion &amp;q2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lengthSquared</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>lengthSquared</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>normalized</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalize</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>normalize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>inverted</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>inverted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>conjugated</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>conjugated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>conjugate</name>
            <anchorfile>qquaternion-obsolete.html</anchorfile>
            <anchor>conjugate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>rotatedVector</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>rotatedVector</anchor>
            <arglist>(const QVector3D &amp;vector) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion &amp;</type>
            <name>operator+=</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QQuaternion &amp;quaternion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion &amp;</type>
            <name>operator-=</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QQuaternion &amp;quaternion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion &amp;</type>
            <name>operator*=</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion &amp;</type>
            <name>operator*=</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-2a-eq-1</anchor>
            <arglist>(const QQuaternion &amp;quaternion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion &amp;</type>
            <name>operator/=</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>toVector4D</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>toVector4D</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getAxisAndAngle</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>getAxisAndAngle-1</anchor>
            <arglist>(QVector3D *axis, float *angle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxisAndAngle</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>fromAxisAndAngle</anchor>
            <arglist>(const QVector3D &amp;axis, float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getAxisAndAngle</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>getAxisAndAngle</anchor>
            <arglist>(float *x, float *y, float *z, float *angle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxisAndAngle</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>fromAxisAndAngle-1</anchor>
            <arglist>(float x, float y, float z, float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>toEulerAngles</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>toEulerAngles</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromEulerAngles</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>fromEulerAngles-1</anchor>
            <arglist>(const QVector3D &amp;eulerAngles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getEulerAngles</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>getEulerAngles</anchor>
            <arglist>(float *pitch, float *yaw, float *roll) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromEulerAngles</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>fromEulerAngles</anchor>
            <arglist>(float pitch, float yaw, float roll)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix3x3</type>
            <name>toRotationMatrix</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>toRotationMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromRotationMatrix</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>fromRotationMatrix</anchor>
            <arglist>(const QMatrix3x3 &amp;rot3x3)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getAxes</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>getAxes</anchor>
            <arglist>(QVector3D *xAxis, QVector3D *yAxis, QVector3D *zAxis) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxes</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>fromAxes</anchor>
            <arglist>(const QVector3D &amp;xAxis, const QVector3D &amp;yAxis, const QVector3D &amp;zAxis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromDirection</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>fromDirection</anchor>
            <arglist>(const QVector3D &amp;direction, const QVector3D &amp;up)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>rotationTo</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>rotationTo</anchor>
            <arglist>(const QVector3D &amp;from, const QVector3D &amp;to)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>slerp</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>slerp</anchor>
            <arglist>(const QQuaternion &amp;q1, const QQuaternion &amp;q2, float t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>nlerp</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>nlerp</anchor>
            <arglist>(const QQuaternion &amp;q1, const QQuaternion &amp;q2, float t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-eq-eq-7</anchor>
            <arglist>(const QQuaternion &amp;q1, const QQuaternion &amp;q2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-not-eq-9</anchor>
            <arglist>(const QQuaternion &amp;q1, const QQuaternion &amp;q2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QQuaternion</type>
            <name>operator+</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QQuaternion &amp;q1, const QQuaternion &amp;q2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QQuaternion</type>
            <name>operator-</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QQuaternion &amp;q1, const QQuaternion &amp;q2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QQuaternion</type>
            <name>operator*</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(float factor, const QQuaternion &amp;quaternion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QQuaternion</type>
            <name>operator*</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-2a-1</anchor>
            <arglist>(const QQuaternion &amp;quaternion, float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QQuaternion</type>
            <name>operator*</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-2a-2</anchor>
            <arglist>(const QQuaternion &amp;q1, const QQuaternion &amp;q2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QQuaternion</type>
            <name>operator-</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QQuaternion &amp;quaternion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QQuaternion</type>
            <name>operator/</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-2f</anchor>
            <arglist>(const QQuaternion &amp;quaternion, float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>operator*</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-2a-3</anchor>
            <arglist>(const QQuaternion &amp;quaternion, const QVector3D &amp;vec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>qFuzzyCompare</anchor>
            <arglist>(const QQuaternion &amp;q1, const QQuaternion &amp;q2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QQuaternion &amp;quaternion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QQuaternion &amp;quaternion)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRadialGradient</name>
        <filename>qradialgradient.html</filename>
        <base>QGradient</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient-1</anchor>
            <arglist>(const QPointF &amp;center, qreal radius, const QPointF &amp;focalPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient-2</anchor>
            <arglist>(qreal cx, qreal cy, qreal radius, qreal fx, qreal fy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient-3</anchor>
            <arglist>(const QPointF &amp;center, qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient-4</anchor>
            <arglist>(qreal cx, qreal cy, qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient-5</anchor>
            <arglist>(const QPointF &amp;center, qreal centerRadius, const QPointF &amp;focalPoint, qreal focalRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient-6</anchor>
            <arglist>(qreal cx, qreal cy, qreal centerRadius, qreal fx, qreal fy, qreal focalRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>center</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setCenter</anchor>
            <arglist>(const QPointF &amp;center)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setCenter-1</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>focalPoint</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>focalPoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocalPoint</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setFocalPoint</anchor>
            <arglist>(const QPointF &amp;focalPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocalPoint</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setFocalPoint-1</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>radius</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>radius</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setRadius</anchor>
            <arglist>(qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>centerRadius</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>centerRadius</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenterRadius</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setCenterRadius</anchor>
            <arglist>(qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>focalRadius</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>focalRadius</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocalRadius</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setFocalRadius</anchor>
            <arglist>(qreal radius)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlatformDragQtResponse</name>
        <filename>qplatformdragqtresponse.html</filename>
    </compound>
    <compound kind="class">
        <name>QPlatformDropQtResponse</name>
        <filename>qplatformdropqtresponse.html</filename>
    </compound>
    <compound kind="class">
        <name>QPlatformIntegrationPlugin</name>
        <filename>qplatformintegrationplugin.html</filename>
        <base>QObject</base>
    </compound>
    <compound kind="class">
        <name>QPlatformMenu</name>
        <filename>qplatformmenu.html</filename>
        <base>QObject</base>
    </compound>
    <compound kind="class">
        <name>QPlatformMenuBar</name>
        <filename>qplatformmenubar.html</filename>
        <base>QObject</base>
    </compound>
    <compound kind="class">
        <name>QPlatformMenuItem</name>
        <filename>qplatformmenuitem.html</filename>
        <base>QObject</base>
    </compound>
    <compound kind="class">
        <name>QPlatformOffscreenSurface</name>
        <filename>qplatformoffscreensurface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPlatformScreen *</type>
            <name>screen</name>
            <anchorfile>qplatformoffscreensurface.html</anchorfile>
            <anchor>screen</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qplatformoffscreensurface.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isValid</name>
            <anchorfile>qplatformoffscreensurface.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlatformSessionManager</name>
        <filename>qplatformsessionmanager.html</filename>
    </compound>
    <compound kind="class">
        <name>QPlatformTextureList</name>
        <filename>qplatformtexturelist.html</filename>
        <base>QObject</base>
        <member kind="typedef" type="QPlatformTextureList::Flag">
            <name>Flags</name>
            <anchorfile>qplatformtexturelist.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRasterPaintEngine</name>
        <filename>qrasterpaintengine.html</filename>
        <base>QPaintEngineEx</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRasterPaintEngine</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>QRasterPaintEngine</anchor>
            <arglist>(QPaintDevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QRasterPaintEngine</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>dtor.QRasterPaintEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>begin</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>(QPaintDevice *device) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>end</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPolygon</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawPolygon</anchor>
            <arglist>(const QPointF *points, int pointCount, QPaintEngine::PolygonDrawMode mode) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPolygon</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawPolygon-1</anchor>
            <arglist>(const QPoint *points, int pointCount, QPaintEngine::PolygonDrawMode mode) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawEllipse</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawEllipse</anchor>
            <arglist>(const QRectF &amp;rect) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fillRect</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>fillRect</anchor>
            <arglist>(const QRectF &amp;r, const QBrush &amp;brush) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fillRect</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>fillRect-1</anchor>
            <arglist>(const QRectF &amp;r, const QColor &amp;color) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawRects</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawRects</anchor>
            <arglist>(const QRect *rects, int rectCount) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawRects</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawRects-1</anchor>
            <arglist>(const QRectF *rects, int rectCount) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPixmap</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawPixmap-1</anchor>
            <arglist>(const QRectF &amp;r, const QPixmap &amp;pixmap, const QRectF &amp;sr) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawImage</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawImage-1</anchor>
            <arglist>(const QRectF &amp;r, const QImage &amp;img, const QRectF &amp;sr, Qt::ImageConversionFlags flags) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawTiledPixmap</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawTiledPixmap</anchor>
            <arglist>(const QRectF &amp;r, const QPixmap &amp;pixmap, const QPointF &amp;sr) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawTextItem</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawTextItem</anchor>
            <arglist>(const QPointF &amp;p, const QTextItem &amp;textItem) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawLines</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawLines</anchor>
            <arglist>(const QLine *lines, int lineCount) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawLines</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawLines-1</anchor>
            <arglist>(const QLineF *lines, int lineCount) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPoints</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawPoints</anchor>
            <arglist>(const QPointF *points, int pointCount) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawStaticTextItem</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawStaticTextItem</anchor>
            <arglist>(QStaticTextItem *textItem) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>shouldDrawCachedGlyphs</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>shouldDrawCachedGlyphs</anchor>
            <arglist>(QFontEngine *fontEngine, const QTransform &amp;m) const const override</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QSpan</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>QSpan-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRasterWindow</name>
        <filename>qrasterwindow.html</filename>
        <base>QPaintDeviceWindow</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRasterWindow</name>
            <anchorfile>qrasterwindow.html</anchorfile>
            <anchor>QRasterWindow</anchor>
            <arglist>(QWindow *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRawFont</name>
        <filename>qrawfont.html</filename>
        <member kind="enumeration">
            <name>AntialiasingType</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>AntialiasingType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PixelAntialiasing</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>AntialiasingType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SubPixelAntialiasing</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>AntialiasingType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>LayoutFlag</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>LayoutFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SeparateAdvances</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>LayoutFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KernedAdvances</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>LayoutFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UseDesignMetrics</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>LayoutFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRawFont::LayoutFlag">
            <name>LayoutFlags</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>LayoutFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRawFont</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>QRawFont</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRawFont</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>QRawFont-1</anchor>
            <arglist>(const QString &amp;fileName, qreal pixelSize, QFont::HintingPreference hintingPreference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRawFont</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>QRawFont-2</anchor>
            <arglist>(const QByteArray &amp;fontData, qreal pixelSize, QFont::HintingPreference hintingPreference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRawFont</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>QRawFont-3</anchor>
            <arglist>(const QRawFont &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRawFont &amp;</type>
            <name>operator=</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QRawFont &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRawFont</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>dtor.QRawFont</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QRawFont &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QRawFont &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QRawFont &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>familyName</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>familyName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>styleName</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>styleName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::Style</type>
            <name>style</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>weight</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>weight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;quint32&gt;</type>
            <name>glyphIndexesForString</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>glyphIndexesForString</anchor>
            <arglist>(const QString &amp;text) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QPointF&gt;</type>
            <name>advancesForGlyphIndexes</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>advancesForGlyphIndexes-1</anchor>
            <arglist>(const QVector&lt;quint32&gt; &amp;glyphIndexes) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QPointF&gt;</type>
            <name>advancesForGlyphIndexes</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>advancesForGlyphIndexes</anchor>
            <arglist>(const QVector&lt;quint32&gt; &amp;glyphIndexes, QRawFont::LayoutFlags layoutFlags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>glyphIndexesForChars</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>glyphIndexesForChars</anchor>
            <arglist>(const QChar *chars, int numChars, quint32 *glyphIndexes, int *numGlyphs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>advancesForGlyphIndexes</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>advancesForGlyphIndexes-2</anchor>
            <arglist>(const quint32 *glyphIndexes, QPointF *advances, int numGlyphs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>advancesForGlyphIndexes</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>advancesForGlyphIndexes-3</anchor>
            <arglist>(const quint32 *glyphIndexes, QPointF *advances, int numGlyphs, QRawFont::LayoutFlags layoutFlags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>alphaMapForGlyph</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>alphaMapForGlyph</anchor>
            <arglist>(quint32 glyphIndex, QRawFont::AntialiasingType antialiasingType, const QTransform &amp;transform) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>pathForGlyph</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>pathForGlyph</anchor>
            <arglist>(quint32 glyphIndex) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>(quint32 glyphIndex) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelSize</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>setPixelSize</anchor>
            <arglist>(qreal pixelSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>pixelSize</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>pixelSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::HintingPreference</type>
            <name>hintingPreference</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>hintingPreference</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>ascent</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>ascent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>capHeight</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>capHeight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>descent</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>descent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leading</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>leading</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>xHeight</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>xHeight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>averageCharWidth</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>averageCharWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maxCharWidth</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>maxCharWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lineThickness</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>lineThickness</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>underlinePosition</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>underlinePosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>unitsPerEm</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>unitsPerEm</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loadFromFile</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>loadFromFile</anchor>
            <arglist>(const QString &amp;fileName, qreal pixelSize, QFont::HintingPreference hintingPreference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loadFromData</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>loadFromData</anchor>
            <arglist>(const QByteArray &amp;fontData, qreal pixelSize, QFont::HintingPreference hintingPreference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsCharacter</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>supportsCharacter-1</anchor>
            <arglist>(uint ucs4) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsCharacter</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>supportsCharacter</anchor>
            <arglist>(QChar character) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QFontDatabase::WritingSystem&gt;</type>
            <name>supportedWritingSystems</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>supportedWritingSystems</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>fontTable</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>fontTable</anchor>
            <arglist>(const char *tagName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRawFont</type>
            <name>fromFont</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>fromFont</anchor>
            <arglist>(const QFont &amp;font, QFontDatabase::WritingSystem writingSystem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>qHash-4</anchor>
            <arglist>(const QRawFont &amp;font, uint seed)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRegExpValidator</name>
        <filename>qregexpvalidator.html</filename>
        <base>QValidator</base>
        <member kind="property" type="QRegExp">
            <name>regExp</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>regExp-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegExpValidator</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>QRegExpValidator</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegExpValidator</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>QRegExpValidator-1</anchor>
            <arglist>(const QRegExp &amp;rx, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QRegExpValidator</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>dtor.QRegExpValidator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QValidator::State</type>
            <name>validate</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp;input, int &amp;pos) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRegExp</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>regExp-prop</anchor>
            <arglist>(const QRegExp &amp;rx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegExp &amp;</type>
            <name>regExp</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>regExp-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>regExpChanged</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>regExp-prop</anchor>
            <arglist>(const QRegExp &amp;regExp)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRegion</name>
        <filename>qregion.html</filename>
        <member kind="enumeration">
            <name>RegionType</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>RegionType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Rectangle</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>RegionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ellipse</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>RegionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion-1</anchor>
            <arglist>(int x, int y, int w, int h, QRegion::RegionType t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion-2</anchor>
            <arglist>(const QRect &amp;r, QRegion::RegionType t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion-3</anchor>
            <arglist>(const QPolygon &amp;a, Qt::FillRule fillRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion-4</anchor>
            <arglist>(const QRegion &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion-5</anchor>
            <arglist>(QRegion &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion-6</anchor>
            <arglist>(const QBitmap &amp;bm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QRegion &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QRegion &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QRegion &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion::const_iterator</type>
            <name>begin</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion::const_iterator</type>
            <name>end</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion::const_iterator</type>
            <name>cend</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion::const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion::const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion::const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion::const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPoint &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(const QRect &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>translate-1</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>translated</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(int dx, int dy) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>translated</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>translated-1</anchor>
            <arglist>(const QPoint &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>united</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>united</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>united-1</anchor>
            <arglist>(const QRect &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>intersected</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>intersected</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>intersected-1</anchor>
            <arglist>(const QRect &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>subtracted</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>subtracted</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>xored</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>xored</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>unite</name>
            <anchorfile>qregion-obsolete.html</anchorfile>
            <anchor>unite</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>unite</name>
            <anchorfile>qregion-obsolete.html</anchorfile>
            <anchor>unite-1</anchor>
            <arglist>(const QRect &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>intersect</name>
            <anchorfile>qregion-obsolete.html</anchorfile>
            <anchor>intersect</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>intersect</name>
            <anchorfile>qregion-obsolete.html</anchorfile>
            <anchor>intersect-1</anchor>
            <arglist>(const QRect &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>subtract</name>
            <anchorfile>qregion-obsolete.html</anchorfile>
            <anchor>subtract</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>eor</name>
            <anchorfile>qregion-obsolete.html</anchorfile>
            <anchor>eor</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QRegion &amp;region) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>intersects-1</anchor>
            <arglist>(const QRect &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRect&gt;</type>
            <name>rects</name>
            <anchorfile>qregion-obsolete.html</anchorfile>
            <anchor>rects</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRects</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>setRects</anchor>
            <arglist>(const QRect *rects, int number)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rectCount</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>rectCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator|</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator+</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator+</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(const QRect &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator&amp;</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-and</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator&amp;</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-and-1</anchor>
            <arglist>(const QRect &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator-</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator^</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-5e</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator|=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(const QRegion &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator+=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QRegion &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator+=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-2b-eq-1</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(const QRegion &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-and-eq-1</anchor>
            <arglist>(const QRect &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator-=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QRegion &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator^=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-5e-eq</anchor>
            <arglist>(const QRegion &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QRegion &amp;r) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QRegion &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(QDataStream &amp;s, const QRegion &amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;s, QRegion &amp;r)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRegularExpressionValidator</name>
        <filename>qregularexpressionvalidator.html</filename>
        <base>QValidator</base>
        <member kind="property" type="QRegularExpression">
            <name>regularExpression</name>
            <anchorfile>qregularexpressionvalidator.html</anchorfile>
            <anchor>regularExpression-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpressionValidator</name>
            <anchorfile>qregularexpressionvalidator.html</anchorfile>
            <anchor>QRegularExpressionValidator</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpressionValidator</name>
            <anchorfile>qregularexpressionvalidator.html</anchorfile>
            <anchor>QRegularExpressionValidator-1</anchor>
            <arglist>(const QRegularExpression &amp;re, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QRegularExpressionValidator</name>
            <anchorfile>qregularexpressionvalidator.html</anchorfile>
            <anchor>dtor.QRegularExpressionValidator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QValidator::State</type>
            <name>validate</name>
            <anchorfile>qregularexpressionvalidator.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp;input, int &amp;pos) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression</type>
            <name>regularExpression</name>
            <anchorfile>qregularexpressionvalidator.html</anchorfile>
            <anchor>regularExpression-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRegularExpression</name>
            <anchorfile>qregularexpressionvalidator.html</anchorfile>
            <anchor>regularExpression-prop</anchor>
            <arglist>(const QRegularExpression &amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>regularExpressionChanged</name>
            <anchorfile>qregularexpressionvalidator.html</anchorfile>
            <anchor>regularExpression-prop</anchor>
            <arglist>(const QRegularExpression &amp;re)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QResizeEvent</name>
        <filename>qresizeevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QResizeEvent</name>
            <anchorfile>qresizeevent.html</anchorfile>
            <anchor>QResizeEvent</anchor>
            <arglist>(const QSize &amp;size, const QSize &amp;oldSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QSize &amp;</type>
            <name>size</name>
            <anchorfile>qresizeevent.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QSize &amp;</type>
            <name>oldSize</name>
            <anchorfile>qresizeevent.html</anchorfile>
            <anchor>oldSize</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRgba64</name>
        <filename>qrgba64.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRgba64</type>
            <name>fromRgba64</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>fromRgba64</anchor>
            <arglist>(quint64 c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRgba64</type>
            <name>fromRgba64</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>fromRgba64-1</anchor>
            <arglist>(quint16 r, quint16 g, quint16 b, quint16 a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRgba64</type>
            <name>fromRgba</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>fromRgba</anchor>
            <arglist>(quint8 red, quint8 green, quint8 blue, quint8 alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRgba64</type>
            <name>fromArgb32</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>fromArgb32</anchor>
            <arglist>(uint rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOpaque</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>isOpaque</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTransparent</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>isTransparent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>red</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>red</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>green</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>green</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>blue</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>blue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>alpha</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>alpha</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRed</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>setRed</anchor>
            <arglist>(quint16 red)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGreen</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>setGreen</anchor>
            <arglist>(quint16 green)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlue</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>setBlue</anchor>
            <arglist>(quint16 blue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlpha</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>setAlpha</anchor>
            <arglist>(quint16 alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint8</type>
            <name>red8</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>red8</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint8</type>
            <name>green8</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>green8</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint8</type>
            <name>blue8</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>blue8</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint8</type>
            <name>alpha8</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>alpha8</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toArgb32</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>toArgb32</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toRgb16</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>toRgb16</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgba64</type>
            <name>premultiplied</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>premultiplied</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgba64</type>
            <name>unpremultiplied</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>unpremultiplied</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>operator quint64</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>operator-quint64</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgba64</type>
            <name>operator=</name>
            <anchorfile>qrgba64.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(quint64 rgba)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiMetalCommandBufferNativeHandles</name>
        <filename>qrhimetalcommandbuffernativehandles.html</filename>
    </compound>
    <compound kind="class">
        <name>QRhiMetalInitParams</name>
        <filename>qrhimetalinitparams.html</filename>
    </compound>
    <compound kind="class">
        <name>QRhiMetalNativeHandles</name>
        <filename>qrhimetalnativehandles.html</filename>
    </compound>
    <compound kind="class">
        <name>QScreen</name>
        <filename>qscreen.html</filename>
        <base>QObject</base>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>manufacturer</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>manufacturer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>model</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>model-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>serialNumber</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>serialNumber-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>depth</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>size</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>availableSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>virtualSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>virtualSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>availableVirtualSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableVirtualSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>geometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>availableGeometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableGeometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>virtualGeometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>virtualGeometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>availableVirtualGeometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableVirtualGeometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizeF">
            <name>physicalSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>physicalDotsPerInchX</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInchX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>physicalDotsPerInchY</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInchY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>physicalDotsPerInch</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInch-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>logicalDotsPerInchX</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInchX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>logicalDotsPerInchY</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInchY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>logicalDotsPerInch</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInch-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>devicePixelRatio</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>devicePixelRatio-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ScreenOrientation">
            <name>primaryOrientation</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>primaryOrientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ScreenOrientation">
            <name>orientation</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ScreenOrientation">
            <name>nativeOrientation</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>nativeOrientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>refreshRate</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>refreshRate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QScreen</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>dtor.QScreen</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlatformScreen *</type>
            <name>handle</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>manufacturer</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>manufacturer-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>model</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>model-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>serialNumber</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>serialNumber-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>geometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>physicalSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>physicalDotsPerInchX</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInchX-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>physicalDotsPerInchY</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInchY-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>physicalDotsPerInch</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInch-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>logicalDotsPerInchX</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInchX-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>logicalDotsPerInchY</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInchY-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>logicalDotsPerInch</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInch-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>devicePixelRatio</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>devicePixelRatio-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>availableSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>availableGeometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableGeometry-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QScreen *&gt;</type>
            <name>virtualSiblings</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>virtualSiblings</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScreen *</type>
            <name>virtualSiblingAt</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>virtualSiblingAt</anchor>
            <arglist>(QPoint point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>virtualSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>virtualSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>virtualGeometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>virtualGeometry-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>availableVirtualSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableVirtualSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>availableVirtualGeometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableVirtualGeometry-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScreenOrientation</type>
            <name>primaryOrientation</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>primaryOrientation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScreenOrientation</type>
            <name>orientation</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScreenOrientation</type>
            <name>nativeOrientation</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>nativeOrientation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScreenOrientations</type>
            <name>orientationUpdateMask</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>orientationUpdateMask</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientationUpdateMask</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>setOrientationUpdateMask</anchor>
            <arglist>(Qt::ScreenOrientations mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>angleBetween</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>angleBetween</anchor>
            <arglist>(Qt::ScreenOrientation a, Qt::ScreenOrientation b) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>transformBetween</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>transformBetween</anchor>
            <arglist>(Qt::ScreenOrientation a, Qt::ScreenOrientation b, const QRect &amp;target) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>mapBetween</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>mapBetween</anchor>
            <arglist>(Qt::ScreenOrientation a, Qt::ScreenOrientation b, const QRect &amp;rect) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPortrait</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>isPortrait</anchor>
            <arglist>(Qt::ScreenOrientation o) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLandscape</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>isLandscape</anchor>
            <arglist>(Qt::ScreenOrientation o) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>grabWindow</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>grabWindow</anchor>
            <arglist>(WId window, int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>refreshRate</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>refreshRate-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>geometryChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>geometryChanged</anchor>
            <arglist>(const QRect &amp;geometry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>availableGeometryChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableGeometryChanged</anchor>
            <arglist>(const QRect &amp;geometry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>physicalSizeChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalSize-prop</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>physicalDotsPerInchChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInchChanged</anchor>
            <arglist>(qreal dpi)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>logicalDotsPerInchChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInchChanged</anchor>
            <arglist>(qreal dpi)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>virtualGeometryChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>virtualGeometryChanged</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>primaryOrientationChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>primaryOrientationChanged</anchor>
            <arglist>(Qt::ScreenOrientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>orientationChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>orientationChanged</anchor>
            <arglist>(Qt::ScreenOrientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refreshRateChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>refreshRate-prop</anchor>
            <arglist>(qreal refreshRate)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScreenOrientationChangeEvent</name>
        <filename>qscreenorientationchangeevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScreenOrientationChangeEvent</name>
            <anchorfile>qscreenorientationchangeevent.html</anchorfile>
            <anchor>QScreenOrientationChangeEvent</anchor>
            <arglist>(QScreen *screen, Qt::ScreenOrientation screenOrientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QScreenOrientationChangeEvent</name>
            <anchorfile>qscreenorientationchangeevent.html</anchorfile>
            <anchor>dtor.QScreenOrientationChangeEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScreen *</type>
            <name>screen</name>
            <anchorfile>qscreenorientationchangeevent.html</anchorfile>
            <anchor>screen</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScreenOrientation</type>
            <name>orientation</name>
            <anchorfile>qscreenorientationchangeevent.html</anchorfile>
            <anchor>orientation</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScrollEvent</name>
        <filename>qscrollevent.html</filename>
        <base>QEvent</base>
        <member kind="enumeration">
            <name>ScrollState</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>ScrollState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ScrollStarted</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>ScrollState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScrollUpdated</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>ScrollState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScrollFinished</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>ScrollState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScrollEvent</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>QScrollEvent</anchor>
            <arglist>(const QPointF &amp;contentPos, const QPointF &amp;overshootDistance, QScrollEvent::ScrollState scrollState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QScrollEvent</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>dtor.QScrollEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>contentPos</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>contentPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>overshootDistance</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>overshootDistance</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScrollEvent::ScrollState</type>
            <name>scrollState</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>scrollState</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScrollPrepareEvent</name>
        <filename>qscrollprepareevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScrollPrepareEvent</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>QScrollPrepareEvent</anchor>
            <arglist>(const QPointF &amp;startPos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QScrollPrepareEvent</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>dtor.QScrollPrepareEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>startPos</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>startPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>viewportSize</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>viewportSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>contentPosRange</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>contentPosRange</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>contentPos</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>contentPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewportSize</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>setViewportSize</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentPosRange</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>setContentPosRange</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentPos</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>setContentPos</anchor>
            <arglist>(const QPointF &amp;pos)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSessionManager</name>
        <filename>qsessionmanager.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sessionId</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>sessionId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sessionKey</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>sessionKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>allowsInteraction</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>allowsInteraction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>allowsErrorInteraction</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>allowsErrorInteraction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>RestartHint</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>RestartHint-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>RestartIfRunning</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>RestartHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RestartAnyway</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>RestartHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RestartImmediately</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>RestartHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RestartNever</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>RestartHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRestartHint</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>setRestartHint</anchor>
            <arglist>(QSessionManager::RestartHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSessionManager::RestartHint</type>
            <name>restartHint</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>restartHint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRestartCommand</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>setRestartCommand</anchor>
            <arglist>(const QStringList &amp;command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>restartCommand</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>restartCommand</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiscardCommand</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>setDiscardCommand</anchor>
            <arglist>(const QStringList &amp;command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>discardCommand</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>discardCommand</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManagerProperty</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>setManagerProperty-1</anchor>
            <arglist>(const QString &amp;name, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManagerProperty</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>setManagerProperty</anchor>
            <arglist>(const QString &amp;name, const QStringList &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPhase2</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>isPhase2</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestPhase2</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>requestPhase2</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QShortcutEvent</name>
        <filename>qshortcutevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShortcutEvent</name>
            <anchorfile>qshortcutevent.html</anchorfile>
            <anchor>QShortcutEvent</anchor>
            <arglist>(const QKeySequence &amp;key, int id, bool ambiguous)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QShortcutEvent</name>
            <anchorfile>qshortcutevent.html</anchorfile>
            <anchor>dtor.QShortcutEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QKeySequence &amp;</type>
            <name>key</name>
            <anchorfile>qshortcutevent.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>shortcutId</name>
            <anchorfile>qshortcutevent.html</anchorfile>
            <anchor>shortcutId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAmbiguous</name>
            <anchorfile>qshortcutevent.html</anchorfile>
            <anchor>isAmbiguous</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QShowEvent</name>
        <filename>qshowevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShowEvent</name>
            <anchorfile>qshowevent.html</anchorfile>
            <anchor>QShowEvent</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStandardItem</name>
        <filename>qstandarditem.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItem</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>QStandardItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItem</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>QStandardItem-1</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItem</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>QStandardItem-2</anchor>
            <arglist>(const QIcon &amp;icon, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItem</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>QStandardItem-3</anchor>
            <arglist>(int rows, int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QStandardItem</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>dtor.QStandardItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(int role) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setData</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearData</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>clearData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>icon</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>icon</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setIcon</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toolTip</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>toolTip</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTip</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setToolTip</anchor>
            <arglist>(const QString &amp;toolTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>statusTip</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>statusTip</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatusTip</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setStatusTip</anchor>
            <arglist>(const QString &amp;statusTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>whatsThis</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>whatsThis</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWhatsThis</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setWhatsThis</anchor>
            <arglist>(const QString &amp;whatsThis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizeHint</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeHint</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setSizeHint</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>textAlignment</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>textAlignment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextAlignment</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setTextAlignment</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>background</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>background</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackground</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setBackground</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>foreground</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>foreground</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setForeground</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setForeground</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CheckState</type>
            <name>checkState</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>checkState</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCheckState</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setCheckState</anchor>
            <arglist>(Qt::CheckState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>accessibleText</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>accessibleText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccessibleText</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setAccessibleText</anchor>
            <arglist>(const QString &amp;accessibleText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>accessibleDescription</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>accessibleDescription</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccessibleDescription</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setAccessibleDescription</anchor>
            <arglist>(const QString &amp;accessibleDescription)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(Qt::ItemFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEditable</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isEditable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEditable</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setEditable</anchor>
            <arglist>(bool editable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSelectable</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isSelectable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectable</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setSelectable</anchor>
            <arglist>(bool selectable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCheckable</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isCheckable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCheckable</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setCheckable</anchor>
            <arglist>(bool checkable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAutoTristate</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isAutoTristate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoTristate</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setAutoTristate</anchor>
            <arglist>(bool tristate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUserTristate</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isUserTristate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUserTristate</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setUserTristate</anchor>
            <arglist>(bool tristate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTristate</name>
            <anchorfile>qstandarditem-obsolete.html</anchorfile>
            <anchor>isTristate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTristate</name>
            <anchorfile>qstandarditem-obsolete.html</anchorfile>
            <anchor>setTristate</anchor>
            <arglist>(bool tristate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDragEnabled</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isDragEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDragEnabled</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setDragEnabled</anchor>
            <arglist>(bool dragEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDropEnabled</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isDropEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDropEnabled</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setDropEnabled</anchor>
            <arglist>(bool dropEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>parent</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>row</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>row</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>index</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>index</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItemModel *</type>
            <name>model</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowCount</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowCount</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setRowCount</anchor>
            <arglist>(int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnCount</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnCount</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setColumnCount</anchor>
            <arglist>(int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasChildren</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>hasChildren</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>child</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>child</anchor>
            <arglist>(int row, int column) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChild</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setChild</anchor>
            <arglist>(int row, int column, QStandardItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChild</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setChild-1</anchor>
            <arglist>(int row, QStandardItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>insertRow</anchor>
            <arglist>(int row, const QList&lt;QStandardItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertColumn</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>insertColumn</anchor>
            <arglist>(int column, const QList&lt;QStandardItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRows</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, const QList&lt;QStandardItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRows</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>insertRows-1</anchor>
            <arglist>(int row, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertColumns</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int column, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRow</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>removeRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeColumn</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>removeColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRows</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeColumns</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int column, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendRow</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>appendRow</anchor>
            <arglist>(const QList&lt;QStandardItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendRows</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>appendRows</anchor>
            <arglist>(const QList&lt;QStandardItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendColumn</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>appendColumn</anchor>
            <arglist>(const QList&lt;QStandardItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>insertRow-1</anchor>
            <arglist>(int row, QStandardItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendRow</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>appendRow-1</anchor>
            <arglist>(QStandardItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>takeChild</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>takeChild</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStandardItem *&gt;</type>
            <name>takeRow</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>takeRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStandardItem *&gt;</type>
            <name>takeColumn</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>takeColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortChildren</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>sortChildren</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStandardItem *</type>
            <name>clone</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>ItemType</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>ItemType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Type</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserType</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>read</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(QDataStream &amp;in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>write</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(QDataStream &amp;out) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QStandardItem &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QStandardItem</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>QStandardItem-4</anchor>
            <arglist>(const QStandardItem &amp;other)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QStandardItem &amp;</type>
            <name>operator=</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QStandardItem &amp;other)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>emitDataChanged</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>emitDataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;in, QStandardItem &amp;item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;out, const QStandardItem &amp;item)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStandardItemModel</name>
        <filename>qstandarditemmodel.html</filename>
        <base>QAbstractItemModel</base>
        <member kind="property" type="int">
            <name>sortRole</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItemModel</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>QStandardItemModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItemModel</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>QStandardItemModel-1</anchor>
            <arglist>(int rows, int columns, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QStandardItemModel</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>dtor.QStandardItemModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemRoleNames</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setItemRoleNames</anchor>
            <arglist>(const QHash&lt;int, QByteArray&gt; &amp;roleNames)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>parent</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp;child) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasChildren</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>hasChildren</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp;index, int role) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp;index, const QVariant &amp;value, int role) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>clearItemData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>clearItemData</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setHeaderData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setHeaderData</anchor>
            <arglist>(int section, Qt::Orientation orientation, const QVariant &amp;value, int role) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertRows</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertColumns</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRows</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeColumns</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;int, QVariant&gt;</type>
            <name>itemData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>itemData</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setItemData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setItemData</anchor>
            <arglist>(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>itemFromIndex</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>itemFromIndex</anchor>
            <arglist>(const QModelIndex &amp;index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>indexFromItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>indexFromItem</anchor>
            <arglist>(const QStandardItem *item) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>item</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>item</anchor>
            <arglist>(int row, int column) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setItem</anchor>
            <arglist>(int row, int column, QStandardItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setItem-1</anchor>
            <arglist>(int row, QStandardItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>invisibleRootItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>invisibleRootItem</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>horizontalHeaderItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>horizontalHeaderItem</anchor>
            <arglist>(int column) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalHeaderItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setHorizontalHeaderItem</anchor>
            <arglist>(int column, QStandardItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>verticalHeaderItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>verticalHeaderItem</anchor>
            <arglist>(int row) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalHeaderItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setVerticalHeaderItem</anchor>
            <arglist>(int row, QStandardItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalHeaderLabels</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setHorizontalHeaderLabels</anchor>
            <arglist>(const QStringList &amp;labels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalHeaderLabels</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setVerticalHeaderLabels</anchor>
            <arglist>(const QStringList &amp;labels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowCount</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setRowCount</anchor>
            <arglist>(int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnCount</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setColumnCount</anchor>
            <arglist>(int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendRow</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>appendRow</anchor>
            <arglist>(const QList&lt;QStandardItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendColumn</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>appendColumn</anchor>
            <arglist>(const QList&lt;QStandardItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendRow</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>appendRow-1</anchor>
            <arglist>(QStandardItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertRow</anchor>
            <arglist>(int row, const QList&lt;QStandardItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertColumn</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertColumn</anchor>
            <arglist>(int column, const QList&lt;QStandardItem *&gt; &amp;items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertRow-1</anchor>
            <arglist>(int row, QStandardItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insertRow</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertRow-2</anchor>
            <arglist>(int row, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insertColumn</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertColumn-1</anchor>
            <arglist>(int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>takeItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>takeItem</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStandardItem *&gt;</type>
            <name>takeRow</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>takeRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStandardItem *&gt;</type>
            <name>takeColumn</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>takeColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>takeHorizontalHeaderItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>takeHorizontalHeaderItem</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>takeVerticalHeaderItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>takeVerticalHeaderItem</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QStandardItem *</type>
            <name>itemPrototype</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>itemPrototype</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemPrototype</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setItemPrototype</anchor>
            <arglist>(const QStandardItem *item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStandardItem *&gt;</type>
            <name>findItems</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>findItems</anchor>
            <arglist>(const QString &amp;text, Qt::MatchFlags flags, int column) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sortRole</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortRole</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist>(int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QModelIndexList &amp;indexes) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemChanged</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>itemChanged</anchor>
            <arglist>(QStandardItem *item)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStaticText</name>
        <filename>qstatictext.html</filename>
        <member kind="enumeration">
            <name>PerformanceHint</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>PerformanceHint-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ModerateCaching</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>PerformanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AggressiveCaching</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>PerformanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStaticText</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>QStaticText</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStaticText</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>QStaticText-1</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStaticText</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>QStaticText-2</anchor>
            <arglist>(const QStaticText &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStaticText &amp;</type>
            <name>operator=</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QStaticText &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStaticText</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>dtor.QStaticText</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QStaticText &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextFormat</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>setTextFormat</anchor>
            <arglist>(Qt::TextFormat textFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextFormat</type>
            <name>textFormat</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>textFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextWidth</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>setTextWidth</anchor>
            <arglist>(qreal textWidth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>textWidth</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>textWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextOption</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>setTextOption</anchor>
            <arglist>(const QTextOption &amp;textOption)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextOption</type>
            <name>textOption</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>textOption</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepare</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>prepare</anchor>
            <arglist>(const QTransform &amp;matrix, const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPerformanceHint</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>setPerformanceHint</anchor>
            <arglist>(QStaticText::PerformanceHint performanceHint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStaticText::PerformanceHint</type>
            <name>performanceHint</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>performanceHint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QStaticText &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QStaticText &amp;other) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStatusTipEvent</name>
        <filename>qstatustipevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStatusTipEvent</name>
            <anchorfile>qstatustipevent.html</anchorfile>
            <anchor>QStatusTipEvent</anchor>
            <arglist>(const QString &amp;tip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>tip</name>
            <anchorfile>qstatustipevent.html</anchorfile>
            <anchor>tip</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleHints</name>
        <filename>qstylehints.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>cursorFlashTime</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>cursorFlashTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>fontSmoothingGamma</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>fontSmoothingGamma-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>keyboardAutoRepeatRate</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>keyboardAutoRepeatRate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>keyboardInputInterval</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>keyboardInputInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>mouseDoubleClickInterval</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>mouseDoubleClickInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>mousePressAndHoldInterval</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>mousePressAndHoldInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QChar">
            <name>passwordMaskCharacter</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>passwordMaskCharacter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>passwordMaskDelay</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>passwordMaskDelay-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>setFocusOnTouchRelease</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>setFocusOnTouchRelease-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>showIsFullScreen</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>showIsFullScreen-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>showIsMaximized</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>showIsMaximized-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>showShortcutsInContextMenus</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>showShortcutsInContextMenus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>startDragDistance</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>startDragDistance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>startDragTime</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>startDragTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>startDragVelocity</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>startDragVelocity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>useRtlExtensions</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>useRtlExtensions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TabFocusBehavior">
            <name>tabFocusBehavior</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>tabFocusBehavior-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>singleClickActivation</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>singleClickActivation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>useHoverEffects</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>useHoverEffects-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>wheelScrollLines</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>wheelScrollLines-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>mouseQuickSelectionThreshold</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>mouseQuickSelectionThreshold-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>mouseDoubleClickDistance</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>mouseDoubleClickDistance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>touchDoubleTapDistance</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>touchDoubleTapDistance-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mouseDoubleClickInterval</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>mouseDoubleClickInterval-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mouseDoubleClickDistance</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>mouseDoubleClickDistance-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>touchDoubleTapDistance</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>touchDoubleTapDistance-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mousePressAndHoldInterval</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>mousePressAndHoldInterval-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startDragDistance</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>startDragDistance-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startDragTime</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>startDragTime-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startDragVelocity</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>startDragVelocity-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keyboardInputInterval</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>keyboardInputInterval-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keyboardAutoRepeatRate</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>keyboardAutoRepeatRate-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cursorFlashTime</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>cursorFlashTime-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>showIsFullScreen</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>showIsFullScreen-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>showIsMaximized</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>showIsMaximized-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>showShortcutsInContextMenus</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>showShortcutsInContextMenus-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShowShortcutsInContextMenus</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>showShortcutsInContextMenus-prop</anchor>
            <arglist>(bool showShortcutsInContextMenus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>passwordMaskDelay</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>passwordMaskDelay-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>passwordMaskCharacter</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>passwordMaskCharacter-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>fontSmoothingGamma</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>fontSmoothingGamma-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>useRtlExtensions</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>useRtlExtensions-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setFocusOnTouchRelease</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>setFocusOnTouchRelease-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TabFocusBehavior</type>
            <name>tabFocusBehavior</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>tabFocusBehavior-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>singleClickActivation</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>singleClickActivation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>useHoverEffects</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>useHoverEffects-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUseHoverEffects</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>useHoverEffects-prop</anchor>
            <arglist>(bool useHoverEffects)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>wheelScrollLines</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>wheelScrollLines-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mouseQuickSelectionThreshold</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>mouseQuickSelectionThreshold-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cursorFlashTimeChanged</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>cursorFlashTime-prop</anchor>
            <arglist>(int cursorFlashTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>keyboardInputIntervalChanged</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>keyboardInputInterval-prop</anchor>
            <arglist>(int keyboardInputInterval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseDoubleClickIntervalChanged</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>mouseDoubleClickInterval-prop</anchor>
            <arglist>(int mouseDoubleClickInterval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mousePressAndHoldIntervalChanged</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>mousePressAndHoldInterval-prop</anchor>
            <arglist>(int mousePressAndHoldInterval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startDragDistanceChanged</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>startDragDistance-prop</anchor>
            <arglist>(int startDragDistance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startDragTimeChanged</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>startDragTime-prop</anchor>
            <arglist>(int startDragTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>tabFocusBehaviorChanged</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>tabFocusBehavior-prop</anchor>
            <arglist>(Qt::TabFocusBehavior tabFocusBehavior)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>useHoverEffectsChanged</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>useHoverEffects-prop</anchor>
            <arglist>(bool useHoverEffects)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showShortcutsInContextMenusChanged</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>showShortcutsInContextMenus-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>wheelScrollLinesChanged</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>wheelScrollLines-prop</anchor>
            <arglist>(int scrollLines)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mouseQuickSelectionThresholdChanged</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>mouseQuickSelectionThreshold-prop</anchor>
            <arglist>(int threshold)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSupportedWritingSystems</name>
        <filename>qsupportedwritingsystems.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSupportedWritingSystems</name>
            <anchorfile>qsupportedwritingsystems.html</anchorfile>
            <anchor>QSupportedWritingSystems</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSupportedWritingSystems</name>
            <anchorfile>qsupportedwritingsystems.html</anchorfile>
            <anchor>QSupportedWritingSystems-1</anchor>
            <arglist>(const QSupportedWritingSystems &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSupportedWritingSystems &amp;</type>
            <name>operator=</name>
            <anchorfile>qsupportedwritingsystems.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSupportedWritingSystems &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSupportedWritingSystems</name>
            <anchorfile>qsupportedwritingsystems.html</anchorfile>
            <anchor>dtor.QSupportedWritingSystems</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSupported</name>
            <anchorfile>qsupportedwritingsystems.html</anchorfile>
            <anchor>setSupported</anchor>
            <arglist>(QFontDatabase::WritingSystem writingSystem, bool support)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supported</name>
            <anchorfile>qsupportedwritingsystems.html</anchorfile>
            <anchor>supported</anchor>
            <arglist>(QFontDatabase::WritingSystem writingSystem) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSurface</name>
        <filename>qsurface.html</filename>
        <member kind="enumeration">
            <name>SurfaceClass</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>SurfaceClass-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Window</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>SurfaceClass-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Offscreen</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>SurfaceClass-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SurfaceType</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>SurfaceType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>RasterSurface</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>SurfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGLSurface</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>SurfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RasterGLSurface</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>SurfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenVGSurface</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>SurfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VulkanSurface</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>SurfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MetalSurface</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>SurfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSurface</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>dtor.QSurface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurface::SurfaceClass</type>
            <name>surfaceClass</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>surfaceClass</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QPlatformSurface *</type>
            <name>surfaceHandle</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>surfaceHandle</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSurface::SurfaceType</type>
            <name>surfaceType</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>surfaceType</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsOpenGL</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>supportsOpenGL</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSize</type>
            <name>size</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSurface</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>QSurface</anchor>
            <arglist>(QSurface::SurfaceClass type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSurfaceFormat</name>
        <filename>qsurfaceformat.html</filename>
        <member kind="enumeration">
            <name>FormatOption</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StereoBuffers</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DebugContext</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeprecatedFunctions</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ResetNotification</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSurfaceFormat::FormatOption">
            <name>FormatOptions</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SwapBehavior</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>SwapBehavior-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DefaultSwapBehavior</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>SwapBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SingleBuffer</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>SwapBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DoubleBuffer</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>SwapBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TripleBuffer</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>SwapBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RenderableType</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>RenderableType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DefaultRenderableType</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>RenderableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGL</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>RenderableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenGLES</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>RenderableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenVG</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>RenderableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>OpenGLContextProfile</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>OpenGLContextProfile-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoProfile</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>OpenGLContextProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CoreProfile</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>OpenGLContextProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompatibilityProfile</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>OpenGLContextProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ColorSpace</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>ColorSpace-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DefaultColorSpace</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>ColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>sRGBColorSpace</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>ColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSurfaceFormat</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>QSurfaceFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSurfaceFormat</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>QSurfaceFormat-1</anchor>
            <arglist>(QSurfaceFormat::FormatOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSurfaceFormat</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>QSurfaceFormat-2</anchor>
            <arglist>(const QSurfaceFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat &amp;</type>
            <name>operator=</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSurfaceFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSurfaceFormat</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>dtor.QSurfaceFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setDepthBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depthBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>depthBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setStencilBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>stencilBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>stencilBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRedBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setRedBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>redBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>redBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGreenBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setGreenBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>greenBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>greenBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlueBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setBlueBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blueBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>blueBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setAlphaBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>alphaBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>alphaBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSamples</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setSamples</anchor>
            <arglist>(int numSamples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>samples</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>samples</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSwapBehavior</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setSwapBehavior</anchor>
            <arglist>(QSurfaceFormat::SwapBehavior behavior)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat::SwapBehavior</type>
            <name>swapBehavior</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>swapBehavior</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAlpha</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>hasAlpha</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProfile</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setProfile</anchor>
            <arglist>(QSurfaceFormat::OpenGLContextProfile profile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat::OpenGLContextProfile</type>
            <name>profile</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>profile</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderableType</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setRenderableType</anchor>
            <arglist>(QSurfaceFormat::RenderableType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat::RenderableType</type>
            <name>renderableType</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>renderableType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMajorVersion</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setMajorVersion</anchor>
            <arglist>(int major)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>majorVersion</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>majorVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinorVersion</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setMinorVersion</anchor>
            <arglist>(int minor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minorVersion</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>minorVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;int, int&gt;</type>
            <name>version</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVersion</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setVersion</anchor>
            <arglist>(int major, int minor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>stereo</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>stereo</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStereo</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setStereo</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qsurfaceformat-obsolete.html</anchorfile>
            <anchor>setOption-1</anchor>
            <arglist>(QSurfaceFormat::FormatOptions opt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testOption</name>
            <anchorfile>qsurfaceformat-obsolete.html</anchorfile>
            <anchor>testOption-1</anchor>
            <arglist>(QSurfaceFormat::FormatOptions opt) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptions</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setOptions</anchor>
            <arglist>(QSurfaceFormat::FormatOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(QSurfaceFormat::FormatOption option, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testOption</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>testOption</anchor>
            <arglist>(QSurfaceFormat::FormatOption option) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat::FormatOptions</type>
            <name>options</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>options</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>swapInterval</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>swapInterval</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSwapInterval</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setSwapInterval</anchor>
            <arglist>(int interval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat::ColorSpace</type>
            <name>colorSpace</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>colorSpace</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorSpace</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setColorSpace</anchor>
            <arglist>(QSurfaceFormat::ColorSpace colorSpace)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultFormat</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setDefaultFormat</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSurfaceFormat</type>
            <name>defaultFormat</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>defaultFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const QSurfaceFormat &amp;a, const QSurfaceFormat &amp;b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>operator-not-eq-4</anchor>
            <arglist>(const QSurfaceFormat &amp;a, const QSurfaceFormat &amp;b)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSyntaxHighlighter</name>
        <filename>qsyntaxhighlighter.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSyntaxHighlighter</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>QSyntaxHighlighter</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSyntaxHighlighter</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>QSyntaxHighlighter-1</anchor>
            <arglist>(QTextDocument *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSyntaxHighlighter</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>dtor.QSyntaxHighlighter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocument</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>setDocument</anchor>
            <arglist>(QTextDocument *doc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>document</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>document</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rehighlight</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>rehighlight</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rehighlightBlock</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>rehighlightBlock</anchor>
            <arglist>(const QTextBlock &amp;block)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>highlightBlock</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>highlightBlock</anchor>
            <arglist>(const QString &amp;text) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(int start, int count, const QTextCharFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>setFormat-1</anchor>
            <arglist>(int start, int count, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>setFormat-2</anchor>
            <arglist>(int start, int count, const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>format</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>format</anchor>
            <arglist>(int position) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>previousBlockState</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>previousBlockState</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>currentBlockState</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>currentBlockState</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentBlockState</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>setCurrentBlockState</anchor>
            <arglist>(int newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentBlockUserData</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>setCurrentBlockUserData</anchor>
            <arglist>(QTextBlockUserData *data)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QTextBlockUserData *</type>
            <name>currentBlockUserData</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>currentBlockUserData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>currentBlock</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>currentBlock</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTabletEvent</name>
        <filename>qtabletevent.html</filename>
        <base>QInputEvent</base>
        <member kind="enumeration">
            <name>TabletDevice</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>TabletDevice-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoDevice</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Puck</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Stylus</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Airbrush</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FourDMouse</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>XFreeEraser</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RotationStylus</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PointerType</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>PointerType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownPointer</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>PointerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pen</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>PointerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cursor</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>PointerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Eraser</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>PointerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTabletEvent</name>
            <anchorfile>qtabletevent-obsolete.html</anchorfile>
            <anchor>QTabletEvent</anchor>
            <arglist>(QEvent::Type type, const QPointF &amp;pos, const QPointF &amp;globalPos, int device, int pointerType, qreal pressure, int xTilt, int yTilt, qreal tangentialPressure, qreal rotation, int z, Qt::KeyboardModifiers keyState, qint64 uniqueID)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTabletEvent</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>QTabletEvent-1</anchor>
            <arglist>(QEvent::Type type, const QPointF &amp;pos, const QPointF &amp;globalPos, int device, int pointerType, qreal pressure, int xTilt, int yTilt, qreal tangentialPressure, qreal rotation, int z, Qt::KeyboardModifiers keyState, qint64 uniqueID, Qt::MouseButton button, Qt::MouseButtons buttons)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>globalPos</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>posF</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>posF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>globalPosF</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>globalPosF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalX</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>globalX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalY</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>globalY</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hiResGlobalX</name>
            <anchorfile>qtabletevent-obsolete.html</anchorfile>
            <anchor>hiResGlobalX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hiResGlobalY</name>
            <anchorfile>qtabletevent-obsolete.html</anchorfile>
            <anchor>hiResGlobalY</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTabletEvent::TabletDevice</type>
            <name>device</name>
            <anchorfile>qtabletevent-obsolete.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTabletEvent::TabletDevice</type>
            <name>deviceType</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>deviceType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTabletEvent::PointerType</type>
            <name>pointerType</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>pointerType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>uniqueId</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>uniqueId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>pressure</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>pressure</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>z</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>z</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>tangentialPressure</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>tangentialPressure</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rotation</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>rotation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>xTilt</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>xTilt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>yTilt</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>yTilt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButton</type>
            <name>button</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>button</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>buttons</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBlock</name>
        <filename>qtextblock.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBlock</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>QTextBlock-2</anchor>
            <arglist>(const QTextBlock &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTextBlock &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTextBlock &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QTextBlock &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QTextBlock &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>position</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(int position) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLayout *</type>
            <name>layout</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>layout</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearLayout</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>clearLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlockFormat</type>
            <name>blockFormat</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>blockFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blockFormatIndex</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>blockFormatIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>charFormat</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>charFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>charFormatIndex</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>charFormatIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>textDirection</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>textDirection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QTextLayout::FormatRange&gt;</type>
            <name>textFormats</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>textFormats</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTextDocument *</type>
            <name>document</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>document</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextList *</type>
            <name>textList</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>textList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlockUserData *</type>
            <name>userData</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>userData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUserData</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>setUserData</anchor>
            <arglist>(QTextBlockUserData *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>userState</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>userState</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUserState</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>setUserState</anchor>
            <arglist>(int state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>revision</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>revision</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRevision</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>setRevision</anchor>
            <arglist>(int rev)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>isVisible</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blockNumber</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>blockNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>firstLineNumber</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>firstLineNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineCount</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>setLineCount</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineCount</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>lineCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <class>QTextBlock::iterator</class>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock::iterator</type>
            <name>begin</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock::iterator</type>
            <name>end</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>next</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>next</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>previous</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBlock::iterator</name>
        <filename>qtextblock-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>iterator-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>iterator-2</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFragment</type>
            <name>fragment</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>fragment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator++</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator--</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int )</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBlockFormat</name>
        <filename>qtextblockformat.html</filename>
        <base>QTextFormat</base>
        <member kind="enumeration">
            <name>LineHeightTypes</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>LineHeightTypes-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SingleHeight</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>LineHeightTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProportionalHeight</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>LineHeightTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FixedHeight</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>LineHeightTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MinimumHeight</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>LineHeightTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineDistanceHeight</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>LineHeightTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MarkerType</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>MarkerType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoMarker</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>MarkerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unchecked</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>MarkerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Checked</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>MarkerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBlockFormat</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>QTextBlockFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>alignment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setTopMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>topMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>topMargin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setBottomMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>bottomMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>bottomMargin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeftMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setLeftMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leftMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>leftMargin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRightMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setRightMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rightMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>rightMargin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextIndent</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setTextIndent</anchor>
            <arglist>(qreal indent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>textIndent</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>textIndent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndent</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setIndent</anchor>
            <arglist>(int indentation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indent</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>indent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeadingLevel</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setHeadingLevel</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>headingLevel</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>headingLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineHeight</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setLineHeight</anchor>
            <arglist>(qreal height, int heightType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lineHeight</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>lineHeight</anchor>
            <arglist>(qreal scriptLineHeight, qreal scaling) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lineHeight</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>lineHeight-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineHeightType</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>lineHeightType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNonBreakableLines</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setNonBreakableLines</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>nonBreakableLines</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>nonBreakableLines</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPageBreakPolicy</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setPageBreakPolicy</anchor>
            <arglist>(QTextFormat::PageBreakFlags policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFormat::PageBreakFlags</type>
            <name>pageBreakPolicy</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>pageBreakPolicy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabPositions</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setTabPositions</anchor>
            <arglist>(const QList&lt;QTextOption::Tab&gt; &amp;tabs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTextOption::Tab&gt;</type>
            <name>tabPositions</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>tabPositions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMarker</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setMarker</anchor>
            <arglist>(QTextBlockFormat::MarkerType marker)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlockFormat::MarkerType</type>
            <name>marker</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>marker</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBlockGroup</name>
        <filename>qtextblockgroup.html</filename>
        <base>QTextObject</base>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QTextBlockGroup</name>
            <anchorfile>qtextblockgroup.html</anchorfile>
            <anchor>QTextBlockGroup</anchor>
            <arglist>(QTextDocument *document)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextBlockGroup</name>
            <anchorfile>qtextblockgroup.html</anchorfile>
            <anchor>dtor.QTextBlockGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>blockInserted</name>
            <anchorfile>qtextblockgroup.html</anchorfile>
            <anchor>blockInserted</anchor>
            <arglist>(const QTextBlock &amp;block)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>blockRemoved</name>
            <anchorfile>qtextblockgroup.html</anchorfile>
            <anchor>blockRemoved</anchor>
            <arglist>(const QTextBlock &amp;block)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>blockFormatChanged</name>
            <anchorfile>qtextblockgroup.html</anchorfile>
            <anchor>blockFormatChanged</anchor>
            <arglist>(const QTextBlock &amp;block)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QList&lt;QTextBlock&gt;</type>
            <name>blockList</name>
            <anchorfile>qtextblockgroup.html</anchorfile>
            <anchor>blockList</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBlockUserData</name>
        <filename>qtextblockuserdata.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextBlockUserData</name>
            <anchorfile>qtextblockuserdata.html</anchorfile>
            <anchor>dtor.QTextBlockUserData</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextCharFormat</name>
        <filename>qtextcharformat.html</filename>
        <base>QTextFormat</base>
        <member kind="enumeration">
            <name>VerticalAlignment</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>VerticalAlignment-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AlignNormal</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignSuperScript</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignSubScript</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignMiddle</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignTop</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignBottom</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignBaseline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>UnderlineStyle</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>UnderlineStyle-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoUnderline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SingleUnderline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DashUnderline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DotLine</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DashDotLine</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DashDotDotLine</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WaveUnderline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SpellCheckUnderline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextCharFormat</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>QTextCharFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>FontPropertiesInheritanceBehavior</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>FontPropertiesInheritanceBehavior-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>FontPropertiesSpecifiedOnly</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>FontPropertiesInheritanceBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontPropertiesAll</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>FontPropertiesInheritanceBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp;font, QTextCharFormat::FontPropertiesInheritanceBehavior behavior)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFont-1</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontFamily</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontFamily</anchor>
            <arglist>(const QString &amp;family)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fontFamily</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontFamily</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontFamilies</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontFamilies</anchor>
            <arglist>(const QStringList &amp;families)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>fontFamilies</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontFamilies</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontStyleName</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontStyleName</anchor>
            <arglist>(const QString &amp;styleName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>fontStyleName</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontStyleName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontPointSize</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontPointSize</anchor>
            <arglist>(qreal size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>fontPointSize</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontPointSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontWeight</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontWeight</anchor>
            <arglist>(int weight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>fontWeight</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontWeight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontItalic</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontItalic</anchor>
            <arglist>(bool italic)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontItalic</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontItalic</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontCapitalization</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontCapitalization</anchor>
            <arglist>(QFont::Capitalization capitalization)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::Capitalization</type>
            <name>fontCapitalization</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontCapitalization</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontLetterSpacingType</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontLetterSpacingType</anchor>
            <arglist>(QFont::SpacingType letterSpacingType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::SpacingType</type>
            <name>fontLetterSpacingType</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontLetterSpacingType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontLetterSpacing</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontLetterSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>fontLetterSpacing</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontLetterSpacing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontWordSpacing</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontWordSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>fontWordSpacing</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontWordSpacing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontUnderline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontUnderline</anchor>
            <arglist>(bool underline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontUnderline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontUnderline</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontOverline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontOverline</anchor>
            <arglist>(bool overline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontOverline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontOverline</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontStrikeOut</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontStrikeOut</anchor>
            <arglist>(bool strikeOut)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontStrikeOut</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontStrikeOut</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnderlineColor</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setUnderlineColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>underlineColor</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>underlineColor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontFixedPitch</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontFixedPitch</anchor>
            <arglist>(bool fixedPitch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontFixedPitch</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontFixedPitch</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontStretch</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontStretch</anchor>
            <arglist>(int factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>fontStretch</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontStretch</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontStyleHint</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontStyleHint</anchor>
            <arglist>(QFont::StyleHint hint, QFont::StyleStrategy strategy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontStyleStrategy</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontStyleStrategy</anchor>
            <arglist>(QFont::StyleStrategy strategy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::StyleHint</type>
            <name>fontStyleHint</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontStyleHint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::StyleStrategy</type>
            <name>fontStyleStrategy</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontStyleStrategy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontHintingPreference</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontHintingPreference</anchor>
            <arglist>(QFont::HintingPreference hintingPreference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::HintingPreference</type>
            <name>fontHintingPreference</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontHintingPreference</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontKerning</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontKerning</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontKerning</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontKerning</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnderlineStyle</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setUnderlineStyle</anchor>
            <arglist>(QTextCharFormat::UnderlineStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat::UnderlineStyle</type>
            <name>underlineStyle</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>underlineStyle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalAlignment</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setVerticalAlignment</anchor>
            <arglist>(QTextCharFormat::VerticalAlignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat::VerticalAlignment</type>
            <name>verticalAlignment</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>verticalAlignment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextOutline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setTextOutline</anchor>
            <arglist>(const QPen &amp;pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPen</type>
            <name>textOutline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>textOutline</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTip</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setToolTip</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toolTip</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>toolTip</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnchor</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setAnchor</anchor>
            <arglist>(bool anchor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAnchor</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>isAnchor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnchorHref</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setAnchorHref</anchor>
            <arglist>(const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>anchorHref</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>anchorHref</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnchorName</name>
            <anchorfile>qtextcharformat-obsolete.html</anchorfile>
            <anchor>setAnchorName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>anchorName</name>
            <anchorfile>qtextcharformat-obsolete.html</anchorfile>
            <anchor>anchorName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnchorNames</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setAnchorNames</anchor>
            <arglist>(const QStringList &amp;names)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>anchorNames</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>anchorNames</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextCursor</name>
        <filename>qtextcursor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>QTextCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>QTextCursor-1</anchor>
            <arglist>(QTextDocument *document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>QTextCursor-2</anchor>
            <arglist>(QTextFrame *frame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>QTextCursor-3</anchor>
            <arglist>(const QTextBlock &amp;block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>QTextCursor-4</anchor>
            <arglist>(const QTextCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QTextCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>dtor.QTextCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QTextCursor &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>MoveMode</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MoveAnchor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeepAnchor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(int pos, QTextCursor::MoveMode m)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>position</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>positionInBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>positionInBlock</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>anchor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>anchor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertText</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertText</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertText-1</anchor>
            <arglist>(const QString &amp;text, const QTextCharFormat &amp;format)</arglist>
        </member>
        <member kind="enumeration">
            <name>MoveOperation</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoMove</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Start</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Up</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StartOfLine</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StartOfBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StartOfWord</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreviousBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreviousCharacter</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreviousWord</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Left</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WordLeft</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>End</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Down</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EndOfLine</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EndOfWord</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EndOfBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NextBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NextCharacter</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NextWord</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Right</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WordRight</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NextCell</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreviousCell</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NextRow</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreviousRow</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>movePosition</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>movePosition</anchor>
            <arglist>(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode, int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>visualNavigation</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>visualNavigation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisualNavigation</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setVisualNavigation</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalMovementX</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setVerticalMovementX</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>verticalMovementX</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>verticalMovementX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeepPositionOnInsert</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setKeepPositionOnInsert</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>keepPositionOnInsert</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>keepPositionOnInsert</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deleteChar</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>deleteChar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deletePreviousChar</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>deletePreviousChar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>SelectionType</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>SelectionType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>WordUnderCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>SelectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineUnderCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>SelectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockUnderCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>SelectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Document</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>SelectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>select</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>select</anchor>
            <arglist>(QTextCursor::SelectionType selection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasSelection</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>hasSelection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasComplexSelection</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>hasComplexSelection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeSelectedText</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>removeSelectedText</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearSelection</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>clearSelection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>selectionStart</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>selectionStart</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>selectionEnd</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>selectionEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>selectedText</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>selectedText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocumentFragment</type>
            <name>selection</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>selection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectedTableCells</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>selectedTableCells</anchor>
            <arglist>(int *firstRow, int *numRows, int *firstColumn, int *numColumns) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>block</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>block</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>charFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>charFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCharFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setCharFormat</anchor>
            <arglist>(const QTextCharFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mergeCharFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>mergeCharFormat</anchor>
            <arglist>(const QTextCharFormat &amp;modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlockFormat</type>
            <name>blockFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>blockFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlockFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setBlockFormat</anchor>
            <arglist>(const QTextBlockFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mergeBlockFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>mergeBlockFormat</anchor>
            <arglist>(const QTextBlockFormat &amp;modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>blockCharFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>blockCharFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlockCharFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setBlockCharFormat</anchor>
            <arglist>(const QTextCharFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mergeBlockCharFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>mergeBlockCharFormat</anchor>
            <arglist>(const QTextCharFormat &amp;modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atBlockStart</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>atBlockStart</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atBlockEnd</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>atBlockEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atStart</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>atStart</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertBlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertBlock-1</anchor>
            <arglist>(const QTextBlockFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertBlock-2</anchor>
            <arglist>(const QTextBlockFormat &amp;format, const QTextCharFormat &amp;charFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextList *</type>
            <name>insertList</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertList</anchor>
            <arglist>(const QTextListFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextList *</type>
            <name>insertList</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertList-1</anchor>
            <arglist>(QTextListFormat::Style style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextList *</type>
            <name>createList</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>createList</anchor>
            <arglist>(const QTextListFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextList *</type>
            <name>createList</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>createList-1</anchor>
            <arglist>(QTextListFormat::Style style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextList *</type>
            <name>currentList</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>currentList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTable *</type>
            <name>insertTable</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertTable</anchor>
            <arglist>(int rows, int columns, const QTextTableFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTable *</type>
            <name>insertTable</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertTable-1</anchor>
            <arglist>(int rows, int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTable *</type>
            <name>currentTable</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>currentTable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame *</type>
            <name>insertFrame</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertFrame</anchor>
            <arglist>(const QTextFrameFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame *</type>
            <name>currentFrame</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>currentFrame</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertFragment</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertFragment</anchor>
            <arglist>(const QTextDocumentFragment &amp;fragment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertHtml</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertHtml</anchor>
            <arglist>(const QString &amp;html)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertImage</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertImage-1</anchor>
            <arglist>(const QTextImageFormat &amp;format, QTextFrameFormat::Position alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertImage</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertImage</anchor>
            <arglist>(const QTextImageFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertImage</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertImage-2</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertImage</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertImage-3</anchor>
            <arglist>(const QImage &amp;image, const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginEditBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>beginEditBlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>joinPreviousEditBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>joinPreviousEditBlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endEditBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>endEditBlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QTextCursor &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QTextCursor &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QTextCursor &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTextCursor &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QTextCursor &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QTextCursor &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCopyOf</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>isCopyOf</anchor>
            <arglist>(const QTextCursor &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blockNumber</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>blockNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnNumber</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>columnNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>document</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>document</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextDocument</name>
        <filename>qtextdocument.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>undoRedoEnabled</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>modified</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>modified-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizeF">
            <name>pageSize</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>pageSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QFont">
            <name>defaultFont</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultFont-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>useDesignMetrics</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>useDesignMetrics-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizeF">
            <name>size</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>textWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>textWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>blockCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>blockCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>indentWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>indentWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>defaultStyleSheet</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultStyleSheet-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximumBlockCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>maximumBlockCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>documentMargin</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>documentMargin-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QTextOption">
            <name>defaultTextOption</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultTextOption-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>baseUrl</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>baseUrl-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocument</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>QTextDocument</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocument</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>QTextDocument-1</anchor>
            <arglist>(const QString &amp;text, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextDocument</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>dtor.QTextDocument</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>clone</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>(QObject *parent) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>clear</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUndoRedoEnabled</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndoRedoEnabled</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndoAvailable</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>isUndoAvailable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRedoAvailable</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>isRedoAvailable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>availableUndoSteps</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>availableUndoSteps</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>availableRedoSteps</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>availableRedoSteps</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>revision</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>revision</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocumentLayout</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setDocumentLayout</anchor>
            <arglist>(QAbstractTextDocumentLayout *layout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTextDocumentLayout *</type>
            <name>documentLayout</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>documentLayout</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>MetaInformation</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>MetaInformation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DocumentTitle</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>MetaInformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DocumentUrl</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>MetaInformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMetaInformation</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setMetaInformation</anchor>
            <arglist>(QTextDocument::MetaInformation info, const QString &amp;string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>metaInformation</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>metaInformation</anchor>
            <arglist>(QTextDocument::MetaInformation info) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toHtml</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>toHtml</anchor>
            <arglist>(const QByteArray &amp;encoding) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHtml</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setHtml</anchor>
            <arglist>(const QString &amp;html)</arglist>
        </member>
        <member kind="typedef" type="QTextDocument::MarkdownFeature">
            <name>MarkdownFeatures</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>MarkdownFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toMarkdown</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>toMarkdown</anchor>
            <arglist>(QTextDocument::MarkdownFeatures features) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMarkdown</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setMarkdown</anchor>
            <arglist>(const QString &amp;markdown, QTextDocument::MarkdownFeatures features)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toRawText</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>toRawText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toPlainText</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>toPlainText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlainText</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setPlainText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>characterAt</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>characterAt</anchor>
            <arglist>(int pos) const const</arglist>
        </member>
        <member kind="enumeration">
            <name>FindFlag</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>FindFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>FindBackward</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>FindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FindCaseSensitively</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>FindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FindWholeWords</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>FindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTextDocument::FindFlag">
            <name>FindFlags</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>FindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>find</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>find-1</anchor>
            <arglist>(const QString &amp;subString, int position, QTextDocument::FindFlags options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>find</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const QString &amp;subString, const QTextCursor &amp;cursor, QTextDocument::FindFlags options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>find</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const QRegExp &amp;expr, int from, QTextDocument::FindFlags options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>find</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>find-3</anchor>
            <arglist>(const QRegExp &amp;expr, const QTextCursor &amp;cursor, QTextDocument::FindFlags options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>find</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>find-4</anchor>
            <arglist>(const QRegularExpression &amp;expr, int from, QTextDocument::FindFlags options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>find</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>find-5</anchor>
            <arglist>(const QRegularExpression &amp;expr, const QTextCursor &amp;cursor, QTextDocument::FindFlags options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame *</type>
            <name>rootFrame</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>rootFrame</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextObject *</type>
            <name>object</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>object</anchor>
            <arglist>(int objectIndex) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextObject *</type>
            <name>objectForFormat</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>objectForFormat</anchor>
            <arglist>(const QTextFormat &amp;f) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>findBlock</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>findBlock</anchor>
            <arglist>(int pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>findBlockByNumber</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>findBlockByNumber</anchor>
            <arglist>(int blockNumber) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>findBlockByLineNumber</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>findBlockByLineNumber</anchor>
            <arglist>(int lineNumber) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>begin</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>end</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>firstBlock</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>firstBlock</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>lastBlock</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>lastBlock</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPageSize</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>pageSize-prop</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>pageSize</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>pageSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultFont</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setDefaultFont</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>defaultFont</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultFont</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pageCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>pageCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isModified</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>modified-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>print</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>print</anchor>
            <arglist>(QPagedPaintDevice *printer) const const</arglist>
        </member>
        <member kind="enumeration">
            <name>ResourceType</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>ResourceType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownResource</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>ResourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HtmlResource</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>ResourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImageResource</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>ResourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StyleSheetResource</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>ResourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MarkdownResource</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>ResourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserResource</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>ResourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>resource</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>resource</anchor>
            <arglist>(int type, const QUrl &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addResource</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>addResource</anchor>
            <arglist>(int type, const QUrl &amp;name, const QVariant &amp;resource)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QTextFormat&gt;</type>
            <name>allFormats</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>allFormats</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>markContentsDirty</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>markContentsDirty</anchor>
            <arglist>(int position, int length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUseDesignMetrics</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>useDesignMetrics-prop</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>useDesignMetrics</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>useDesignMetrics-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawContents</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>drawContents</anchor>
            <arglist>(QPainter *p, const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>textWidth-prop</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>textWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>textWidth-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>idealWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>idealWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>indentWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>indentWidth-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndentWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setIndentWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>documentMargin</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>documentMargin-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocumentMargin</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>documentMargin-prop</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>adjustSize</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>adjustSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blockCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>blockCount-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>lineCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>characterCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>characterCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultStyleSheet</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultStyleSheet-prop</anchor>
            <arglist>(const QString &amp;sheet)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>defaultStyleSheet</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultStyleSheet-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undo</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undo</anchor>
            <arglist>(QTextCursor *cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redo</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>redo</anchor>
            <arglist>(QTextCursor *cursor)</arglist>
        </member>
        <member kind="enumeration">
            <name>Stacks</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>Stacks-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UndoStack</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>Stacks-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RedoStack</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>Stacks-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UndoAndRedoStacks</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>Stacks-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearUndoRedoStacks</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>clearUndoRedoStacks</anchor>
            <arglist>(QTextDocument::Stacks stacksToClear)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumBlockCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>maximumBlockCount-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumBlockCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>maximumBlockCount-prop</anchor>
            <arglist>(int maximum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextOption</type>
            <name>defaultTextOption</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultTextOption</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultTextOption</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setDefaultTextOption</anchor>
            <arglist>(const QTextOption &amp;option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>baseUrl</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>baseUrl-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseUrl</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>baseUrl-prop</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CursorMoveStyle</type>
            <name>defaultCursorMoveStyle</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultCursorMoveStyle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultCursorMoveStyle</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setDefaultCursorMoveStyle</anchor>
            <arglist>(Qt::CursorMoveStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contentsChange</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>contentsChange</anchor>
            <arglist>(int position, int charsRemoved, int charsAdded)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contentsChanged</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>contentsChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undoAvailable</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undoAvailable</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redoAvailable</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>redoAvailable</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undoCommandAdded</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undoCommandAdded</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modificationChanged</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>modificationChanged</anchor>
            <arglist>(bool changed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cursorPositionChanged</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>cursorPositionChanged</anchor>
            <arglist>(const QTextCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blockCountChanged</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>blockCountChanged</anchor>
            <arglist>(int newBlockCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>baseUrlChanged</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>baseUrl-prop</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>documentLayoutChanged</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>documentLayoutChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undo</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undo-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redo</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>redo-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModified</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>modified-prop</anchor>
            <arglist>(bool m)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QTextObject *</type>
            <name>createObject</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>createObject</anchor>
            <arglist>(const QTextFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>loadResource</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>loadResource</anchor>
            <arglist>(int type, const QUrl &amp;name)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextDocumentFragment</name>
        <filename>qtextdocumentfragment.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentFragment</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>QTextDocumentFragment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentFragment</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>QTextDocumentFragment-1</anchor>
            <arglist>(const QTextDocument *document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentFragment</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>QTextDocumentFragment-2</anchor>
            <arglist>(const QTextCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentFragment</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>QTextDocumentFragment-3</anchor>
            <arglist>(const QTextDocumentFragment &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocumentFragment &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTextDocumentFragment &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextDocumentFragment</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>dtor.QTextDocumentFragment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toPlainText</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>toPlainText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toHtml</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>toHtml</anchor>
            <arglist>(const QByteArray &amp;encoding) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextDocumentFragment</type>
            <name>fromPlainText</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>fromPlainText</anchor>
            <arglist>(const QString &amp;plainText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextDocumentFragment</type>
            <name>fromHtml</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>fromHtml</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextDocumentFragment</type>
            <name>fromHtml</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>fromHtml-1</anchor>
            <arglist>(const QString &amp;text, const QTextDocument *resourceProvider)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextDocumentWriter</name>
        <filename>qtextdocumentwriter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentWriter</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>QTextDocumentWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentWriter</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>QTextDocumentWriter-1</anchor>
            <arglist>(QIODevice *device, const QByteArray &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentWriter</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>QTextDocumentWriter-2</anchor>
            <arglist>(const QString &amp;fileName, const QByteArray &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextDocumentWriter</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>dtor.QTextDocumentWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QByteArray &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>format</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(const QTextDocument *document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>write-1</anchor>
            <arglist>(const QTextDocumentFragment &amp;fragment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCodec</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>setCodec</anchor>
            <arglist>(QTextCodec *codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCodec *</type>
            <name>codec</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>codec</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>supportedDocumentFormats</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>supportedDocumentFormats</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextFormat</name>
        <filename>qtextformat.html</filename>
        <member kind="enumeration">
            <name>FormatType</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>FormatType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InvalidFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CharFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrameFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Property</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ObjectIndex</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CssFloat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LayoutDirection</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutlinePen</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BackgroundBrush</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForegroundBrush</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BackgroundImageUrl</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockAlignment</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockTopMargin</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockBottomMargin</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockLeftMargin</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockRightMargin</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextIndent</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabPositions</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockIndent</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineHeight</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineHeightType</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockNonBreakableLines</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockTrailingHorizontalRulerWidth</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HeadingLevel</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockQuoteLevel</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockCodeLanguage</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockCodeFence</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockMarker</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FirstFontProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontCapitalization</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontLetterSpacingType</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontLetterSpacing</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontWordSpacing</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontStretch</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontStyleHint</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontStyleStrategy</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontKerning</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontHintingPreference</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontFamilies</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontStyleName</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontFamily</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontPointSize</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontSizeAdjustment</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontSizeIncrement</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontWeight</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontItalic</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontUnderline</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontOverline</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontStrikeOut</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontFixedPitch</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontPixelSize</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastFontProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextUnderlineColor</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextVerticalAlignment</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextOutline</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextUnderlineStyle</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextToolTip</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsAnchor</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnchorHref</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnchorName</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ObjectType</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListStyle</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListIndent</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListNumberPrefix</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListNumberSuffix</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrameBorder</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrameMargin</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FramePadding</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrameWidth</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrameHeight</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrameTopMargin</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrameBottomMargin</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrameLeftMargin</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrameRightMargin</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrameBorderBrush</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrameBorderStyle</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableColumns</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableColumnWidthConstraints</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellSpacing</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellPadding</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableHeaderRowCount</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableBorderCollapse</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellRowSpan</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellColumnSpan</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellTopPadding</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellBottomPadding</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellLeftPadding</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellRightPadding</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellTopBorder</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellBottomBorder</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellLeftBorder</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellRightBorder</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellTopBorderStyle</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellBottomBorderStyle</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellLeftBorderStyle</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellRightBorderStyle</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellTopBorderBrush</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellBottomBorderBrush</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellLeftBorderBrush</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellRightBorderBrush</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImageName</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImageTitle</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImageAltText</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImageWidth</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImageHeight</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImageQuality</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FullWidthSelection</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PageBreakPolicy</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ObjectTypes</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>ObjectTypes-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoObject</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>ObjectTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImageObject</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>ObjectTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableObject</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>ObjectTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TableCellObject</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>ObjectTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserObject</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>ObjectTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PageBreakFlag</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>PageBreakFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PageBreak_Auto</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>PageBreakFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PageBreak_AlwaysBefore</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>PageBreakFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PageBreak_AlwaysAfter</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>PageBreakFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTextFormat::PageBreakFlag">
            <name>PageBreakFlags</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>PageBreakFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>QTextFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>QTextFormat-1</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>QTextFormat-2</anchor>
            <arglist>(const QTextFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFormat &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTextFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>dtor.QTextFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QTextFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>merge</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>merge</anchor>
            <arglist>(const QTextFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>type</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>objectIndex</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>objectIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setObjectIndex</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setObjectIndex</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>property</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>property</anchor>
            <arglist>(int propertyId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setProperty</anchor>
            <arglist>(int propertyId, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>clearProperty</anchor>
            <arglist>(int propertyId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>hasProperty</anchor>
            <arglist>(int propertyId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>boolProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>boolProperty</anchor>
            <arglist>(int propertyId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>intProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>intProperty</anchor>
            <arglist>(int propertyId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>doubleProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>doubleProperty</anchor>
            <arglist>(int propertyId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>stringProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>stringProperty</anchor>
            <arglist>(int propertyId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>colorProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>colorProperty</anchor>
            <arglist>(int propertyId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPen</type>
            <name>penProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>penProperty</anchor>
            <arglist>(int propertyId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>brushProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>brushProperty</anchor>
            <arglist>(int propertyId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLength</type>
            <name>lengthProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>lengthProperty</anchor>
            <arglist>(int propertyId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QTextLength&gt;</type>
            <name>lengthVectorProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>lengthVectorProperty</anchor>
            <arglist>(int propertyId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setProperty-1</anchor>
            <arglist>(int propertyId, const QVector&lt;QTextLength&gt; &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QVariant&gt;</type>
            <name>properties</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>properties</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>propertyCount</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>propertyCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setObjectType</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setObjectType</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>objectType</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>objectType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCharFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isCharFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBlockFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isBlockFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isListFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isListFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFrameFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isFrameFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isImageFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isImageFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTableFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isTableFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTableCellFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isTableCellFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlockFormat</type>
            <name>toBlockFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toBlockFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>toCharFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toCharFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextListFormat</type>
            <name>toListFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toListFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableFormat</type>
            <name>toTableFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toTableFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrameFormat</type>
            <name>toFrameFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toFrameFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextImageFormat</type>
            <name>toImageFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toImageFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableCellFormat</type>
            <name>toTableCellFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toTableCellFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTextFormat &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QTextFormat &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayoutDirection</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setLayoutDirection</anchor>
            <arglist>(Qt::LayoutDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>layoutDirection</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>layoutDirection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackground</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setBackground</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>background</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>background</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearBackground</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>clearBackground</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setForeground</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setForeground</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>foreground</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>foreground</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearForeground</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>clearForeground</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextFragment</name>
        <filename>qtextfragment.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFragment</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>QTextFragment-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFragment</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>QTextFragment-2</anchor>
            <arglist>(const QTextFragment &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFragment &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTextFragment &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTextFragment &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QTextFragment &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QTextFragment &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>position</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(int position) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>charFormat</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>charFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>charFormatIndex</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>charFormatIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGlyphRun&gt;</type>
            <name>glyphRuns</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>glyphRuns</anchor>
            <arglist>(int pos, int len) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextFrame</name>
        <filename>qtextframe.html</filename>
        <base>QTextObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFrame</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>QTextFrame</anchor>
            <arglist>(QTextDocument *document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextFrame</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>dtor.QTextFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameFormat</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>setFrameFormat</anchor>
            <arglist>(const QTextFrameFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrameFormat</type>
            <name>frameFormat</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>frameFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>firstCursorPosition</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>firstCursorPosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>lastCursorPosition</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>lastCursorPosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>firstPosition</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>firstPosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastPosition</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>lastPosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTextFrame *&gt;</type>
            <name>childFrames</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>childFrames</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame *</type>
            <name>parentFrame</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>parentFrame</anchor>
            <arglist>() const const</arglist>
        </member>
        <class>QTextFrame::iterator</class>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame::iterator</type>
            <name>begin</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame::iterator</type>
            <name>end</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextFrame::iterator</name>
        <filename>qtextframe-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>iterator-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>iterator-2</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame *</type>
            <name>parentFrame</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>parentFrame</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame *</type>
            <name>currentFrame</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>currentFrame</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>currentBlock</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>currentBlock</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator++</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator--</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int )</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextFrameFormat</name>
        <filename>qtextframeformat.html</filename>
        <base>QTextFormat</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFrameFormat</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>QTextFrameFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>Position</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>Position-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InFlow</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>Position-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FloatLeft</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>Position-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FloatRight</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>Position-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>BorderStyle</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>BorderStyle-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BorderStyle_None</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BorderStyle_Dotted</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BorderStyle_Dashed</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BorderStyle_Solid</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BorderStyle_Double</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BorderStyle_DotDash</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BorderStyle_DotDotDash</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BorderStyle_Groove</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BorderStyle_Ridge</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BorderStyle_Inset</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BorderStyle_Outset</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(QTextFrameFormat::Position policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrameFormat::Position</type>
            <name>position</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorder</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setBorder</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>border</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>border</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderBrush</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setBorderBrush</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>borderBrush</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>borderBrush</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderStyle</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setBorderStyle</anchor>
            <arglist>(QTextFrameFormat::BorderStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrameFormat::BorderStyle</type>
            <name>borderStyle</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>borderStyle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>margin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>margin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setTopMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>topMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>topMargin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setBottomMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>bottomMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>bottomMargin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeftMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setLeftMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leftMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>leftMargin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRightMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setRightMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rightMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>rightMargin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPadding</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setPadding</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>padding</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>padding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setWidth-1</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(const QTextLength &amp;width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLength</type>
            <name>width</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setHeight-1</anchor>
            <arglist>(qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(const QTextLength &amp;height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLength</type>
            <name>height</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPageBreakPolicy</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setPageBreakPolicy</anchor>
            <arglist>(QTextFormat::PageBreakFlags policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFormat::PageBreakFlags</type>
            <name>pageBreakPolicy</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>pageBreakPolicy</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextFrameLayoutData</name>
        <filename>qtextframelayoutdata.html</filename>
    </compound>
    <compound kind="class">
        <name>QTextImageFormat</name>
        <filename>qtextimageformat.html</filename>
        <base>QTextCharFormat</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextImageFormat</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>QTextImageFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuality</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>setQuality</anchor>
            <arglist>(int quality)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>quality</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>quality</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextInlineObject</name>
        <filename>qtextinlineobject.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>ascent</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>ascent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>descent</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>descent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>textDirection</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>textDirection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(qreal w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAscent</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>setAscent</anchor>
            <arglist>(qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescent</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>setDescent</anchor>
            <arglist>(qreal d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>textPosition</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>textPosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>formatIndex</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>formatIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFormat</type>
            <name>format</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextItem</name>
        <filename>qtextitem.html</filename>
        <member kind="enumeration">
            <name>RenderFlag</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>RenderFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>RightToLeft</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Overline</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Underline</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StrikeOut</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dummy</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTextItem::RenderFlag">
            <name>RenderFlags</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>descent</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>descent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>ascent</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>ascent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextItem::RenderFlags</type>
            <name>renderFlags</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>renderFlags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextLayout</name>
        <filename>qtextlayout.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>QTextLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>QTextLayout-1</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLayout</name>
            <anchorfile>qtextlayout-obsolete.html</anchorfile>
            <anchor>QTextLayout-2</anchor>
            <arglist>(const QString &amp;text, const QFont &amp;font, QPaintDevice *paintdevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>QTextLayout-3</anchor>
            <arglist>(const QString &amp;text, const QFont &amp;font, const QPaintDevice *paintdevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>dtor.QTextLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp;font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextOption</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setTextOption</anchor>
            <arglist>(const QTextOption &amp;option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTextOption &amp;</type>
            <name>textOption</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>textOption</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreeditArea</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setPreeditArea</anchor>
            <arglist>(int position, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>preeditAreaPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>preeditAreaPosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>preeditAreaText</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>preeditAreaText</anchor>
            <arglist>() const const</arglist>
        </member>
        <class>QTextLayout::FormatRange</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAdditionalFormats</name>
            <anchorfile>qtextlayout-obsolete.html</anchorfile>
            <anchor>setAdditionalFormats</anchor>
            <arglist>(const QList&lt;QTextLayout::FormatRange&gt; &amp;formatList)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTextLayout::FormatRange&gt;</type>
            <name>additionalFormats</name>
            <anchorfile>qtextlayout-obsolete.html</anchorfile>
            <anchor>additionalFormats</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearAdditionalFormats</name>
            <anchorfile>qtextlayout-obsolete.html</anchorfile>
            <anchor>clearAdditionalFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormats</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setFormats</anchor>
            <arglist>(const QVector&lt;QTextLayout::FormatRange&gt; &amp;formats)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QTextLayout::FormatRange&gt;</type>
            <name>formats</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>formats</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearFormats</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>clearFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCacheEnabled</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setCacheEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cacheEnabled</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>cacheEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursorMoveStyle</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setCursorMoveStyle</anchor>
            <arglist>(Qt::CursorMoveStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CursorMoveStyle</type>
            <name>cursorMoveStyle</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>cursorMoveStyle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>beginLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>endLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>clearLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLine</type>
            <name>createLine</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>createLine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineCount</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>lineCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLine</type>
            <name>lineAt</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>lineAt</anchor>
            <arglist>(int i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLine</type>
            <name>lineForTextPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>lineForTextPosition</anchor>
            <arglist>(int pos) const const</arglist>
        </member>
        <member kind="enumeration">
            <name>CursorMode</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>CursorMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SkipCharacters</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>CursorMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SkipWords</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>CursorMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValidCursorPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>isValidCursorPosition</anchor>
            <arglist>(int pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>nextCursorPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>nextCursorPosition</anchor>
            <arglist>(int oldPos, QTextLayout::CursorMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>previousCursorPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>previousCursorPosition</anchor>
            <arglist>(int oldPos, QTextLayout::CursorMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>leftCursorPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>leftCursorPosition</anchor>
            <arglist>(int oldPos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rightCursorPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>rightCursorPosition</anchor>
            <arglist>(int oldPos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>draw</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(QPainter *p, const QPointF &amp;pos, const QVector&lt;QTextLayout::FormatRange&gt; &amp;selections, const QRectF &amp;clip) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawCursor</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>drawCursor-1</anchor>
            <arglist>(QPainter *painter, const QPointF &amp;position, int cursorPosition) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawCursor</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>drawCursor</anchor>
            <arglist>(QPainter *painter, const QPointF &amp;position, int cursorPosition, int width) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>position</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(const QPointF &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>minimumWidth</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>minimumWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maximumWidth</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>maximumWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGlyphRun&gt;</type>
            <name>glyphRuns</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>glyphRuns</anchor>
            <arglist>(int from, int length) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextLayout::FormatRange</name>
        <filename>qtextlayout-formatrange.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextlayout-formatrange.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QTextLayout::FormatRange &amp;lhs, const QTextLayout::FormatRange &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextlayout-formatrange.html</anchorfile>
            <anchor>operator-not-eq-3</anchor>
            <arglist>(const QTextLayout::FormatRange &amp;lhs, const QTextLayout::FormatRange &amp;rhs)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextLength</name>
        <filename>qtextlength.html</filename>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>VariableLength</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FixedLength</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PercentageLength</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLength</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>QTextLength</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLength</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>QTextLength-1</anchor>
            <arglist>(QTextLength::Type type, qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLength::Type</type>
            <name>type</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>value</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(qreal maximumLength) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rawValue</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>rawValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTextLength &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QTextLength &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextLine</name>
        <filename>qtextline.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLine</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>QTextLine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>ascent</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>ascent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>descent</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>descent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leading</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>leading</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeadingIncluded</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>setLeadingIncluded</anchor>
            <arglist>(bool included)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>leadingIncluded</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>leadingIncluded</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>naturalTextWidth</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>naturalTextWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>horizontalAdvance</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>horizontalAdvance</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>naturalTextRect</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>naturalTextRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>Edge</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>Edge-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Leading</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Trailing</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CursorPosition</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>CursorPosition-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CursorBetweenCharacters</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>CursorPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CursorOnCharacter</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>CursorPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>cursorToX</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>cursorToX</anchor>
            <arglist>(int *cursorPos, QTextLine::Edge edge) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>cursorToX</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>cursorToX-1</anchor>
            <arglist>(int cursorPos, QTextLine::Edge edge) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>xToCursor</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>xToCursor</anchor>
            <arglist>(qreal x, QTextLine::CursorPosition cpos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineWidth</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>setLineWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumColumns</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>setNumColumns</anchor>
            <arglist>(int numColumns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumColumns</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>setNumColumns-1</anchor>
            <arglist>(int numColumns, qreal alignmentWidth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(const QPointF &amp;pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>position</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>textStart</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>textStart</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>textLength</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>textLength</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineNumber</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>lineNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>draw</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(QPainter *painter, const QPointF &amp;position, const QTextLayout::FormatRange *selection) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGlyphRun&gt;</type>
            <name>glyphRuns</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>glyphRuns</anchor>
            <arglist>(int from, int length) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextList</name>
        <filename>qtextlist.html</filename>
        <base>QTextBlockGroup</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qtextlist-obsolete.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>item</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>item</anchor>
            <arglist>(int i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>itemNumber</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>itemNumber</anchor>
            <arglist>(const QTextBlock &amp;block) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>itemText</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>itemText</anchor>
            <arglist>(const QTextBlock &amp;block) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeItem</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>removeItem</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QTextBlock &amp;block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>add</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>add</anchor>
            <arglist>(const QTextBlock &amp;block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QTextListFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextListFormat</type>
            <name>format</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextListFormat</name>
        <filename>qtextlistformat.html</filename>
        <base>QTextFormat</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextListFormat</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>QTextListFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>Style</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>Style-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ListDisc</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListCircle</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListSquare</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListDecimal</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListLowerAlpha</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListUpperAlpha</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListLowerRoman</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListUpperRoman</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListStyleUndefined</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyle</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>setStyle</anchor>
            <arglist>(QTextListFormat::Style style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextListFormat::Style</type>
            <name>style</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndent</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>setIndent</anchor>
            <arglist>(int indentation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indent</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>indent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumberPrefix</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>setNumberPrefix</anchor>
            <arglist>(const QString &amp;numberPrefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>numberPrefix</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>numberPrefix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumberSuffix</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>setNumberSuffix</anchor>
            <arglist>(const QString &amp;numberSuffix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>numberSuffix</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>numberSuffix</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextObject</name>
        <filename>qtextobject.html</filename>
        <base>QObject</base>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QTextObject</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>QTextObject</anchor>
            <arglist>(QTextDocument *document)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextObject</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>dtor.QTextObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QTextFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFormat</type>
            <name>format</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>formatIndex</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>formatIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>document</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>document</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>objectIndex</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>objectIndex</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextObjectInterface</name>
        <filename>qtextobjectinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextObjectInterface</name>
            <anchorfile>qtextobjectinterface.html</anchorfile>
            <anchor>dtor.QTextObjectInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSizeF</type>
            <name>intrinsicSize</name>
            <anchorfile>qtextobjectinterface.html</anchorfile>
            <anchor>intrinsicSize</anchor>
            <arglist>(QTextDocument *doc, int posInDocument, const QTextFormat &amp;format) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>drawObject</name>
            <anchorfile>qtextobjectinterface.html</anchorfile>
            <anchor>drawObject</anchor>
            <arglist>(QPainter *painter, const QRectF &amp;rect, QTextDocument *doc, int posInDocument, const QTextFormat &amp;format) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextOption</name>
        <filename>qtextoption.html</filename>
        <member kind="enumeration">
            <name>TabType</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>TabType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LeftTab</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>TabType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightTab</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>TabType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CenterTab</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>TabType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DelimiterTab</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>TabType-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QTextOption::Tab</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextOption</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>QTextOption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextOption</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>QTextOption-1</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextOption</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>dtor.QTextOption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextOption</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>QTextOption-2</anchor>
            <arglist>(const QTextOption &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextOption &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTextOption &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>alignment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextDirection</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setTextDirection</anchor>
            <arglist>(Qt::LayoutDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>textDirection</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>textDirection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>WrapMode</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoWrap</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WordWrap</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ManualWrap</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WrapAnywhere</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WrapAtWordBoundaryOrAnywhere</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapMode</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setWrapMode</anchor>
            <arglist>(QTextOption::WrapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextOption::WrapMode</type>
            <name>wrapMode</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>wrapMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>Flag</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ShowTabsAndSpaces</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShowLineAndParagraphSeparators</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AddSpaceForLineAndParagraphSeparators</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SuppressColors</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShowDocumentTerminator</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IncludeTrailingSpaces</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTextOption::Flag">
            <name>Flags</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QTextOption::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextOption::Flags</type>
            <name>flags</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabStop</name>
            <anchorfile>qtextoption-obsolete.html</anchorfile>
            <anchor>setTabStop</anchor>
            <arglist>(qreal tabStop)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>tabStop</name>
            <anchorfile>qtextoption-obsolete.html</anchorfile>
            <anchor>tabStop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabStopDistance</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setTabStopDistance</anchor>
            <arglist>(qreal tabStopDistance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>tabStopDistance</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>tabStopDistance</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabArray</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setTabArray</anchor>
            <arglist>(const QList&lt;qreal&gt; &amp;tabStops)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;qreal&gt;</type>
            <name>tabArray</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>tabArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabs</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setTabs</anchor>
            <arglist>(const QList&lt;QTextOption::Tab&gt; &amp;tabStops)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTextOption::Tab&gt;</type>
            <name>tabs</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>tabs</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUseDesignMetrics</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setUseDesignMetrics</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>useDesignMetrics</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>useDesignMetrics</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextOption::Tab</name>
        <filename>qtextoption-tab.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Tab</name>
            <anchorfile>qtextoption-tab.html</anchorfile>
            <anchor>Tab</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Tab</name>
            <anchorfile>qtextoption-tab.html</anchorfile>
            <anchor>Tab-1</anchor>
            <arglist>(qreal pos, TabType tabType, QChar delim)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextoption-tab.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const Tab &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextoption-tab.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const Tab &amp;other) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextTable</name>
        <filename>qtexttable.html</filename>
        <base>QTextFrame</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(int rows, int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRows</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int index, int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertColumns</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int index, int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendRows</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>appendRows</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendColumns</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>appendColumns</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRows</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int index, int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeColumns</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int index, int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mergeCells</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>mergeCells</anchor>
            <arglist>(int row, int column, int numRows, int numCols)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mergeCells</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>mergeCells-1</anchor>
            <arglist>(const QTextCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>splitCell</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>splitCell</anchor>
            <arglist>(int row, int column, int numRows, int numCols)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rows</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>rows</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columns</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>columns</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableCell</type>
            <name>cellAt</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>cellAt</anchor>
            <arglist>(int row, int column) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableCell</type>
            <name>cellAt</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>cellAt-1</anchor>
            <arglist>(int position) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableCell</type>
            <name>cellAt</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>cellAt-2</anchor>
            <arglist>(const QTextCursor &amp;cursor) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>rowStart</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>rowStart</anchor>
            <arglist>(const QTextCursor &amp;cursor) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>rowEnd</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>rowEnd</anchor>
            <arglist>(const QTextCursor &amp;cursor) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QTextTableFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableFormat</type>
            <name>format</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextTableCell</name>
        <filename>qtexttablecell.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextTableCell</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>QTextTableCell</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextTableCell</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>dtor.QTextTableCell</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextTableCell</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>QTextTableCell-1</anchor>
            <arglist>(const QTextTableCell &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableCell &amp;</type>
            <name>operator=</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTextTableCell &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QTextCharFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>format</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>row</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>row</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowSpan</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>rowSpan</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnSpan</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>columnSpan</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>firstCursorPosition</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>firstCursorPosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>lastCursorPosition</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>lastCursorPosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTextTableCell &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QTextTableCell &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame::iterator</type>
            <name>begin</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame::iterator</type>
            <name>end</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>tableCellFormatIndex</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>tableCellFormatIndex</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextTableCellFormat</name>
        <filename>qtexttablecellformat.html</filename>
        <base>QTextCharFormat</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextTableCellFormat</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>QTextTableCellFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setTopPadding</anchor>
            <arglist>(qreal padding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>topPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>topPadding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setBottomPadding</anchor>
            <arglist>(qreal padding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>bottomPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>bottomPadding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeftPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setLeftPadding</anchor>
            <arglist>(qreal padding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leftPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>leftPadding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRightPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setRightPadding</anchor>
            <arglist>(qreal padding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rightPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>rightPadding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setPadding</anchor>
            <arglist>(qreal padding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopBorder</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setTopBorder</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>topBorder</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>topBorder</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomBorder</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setBottomBorder</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>bottomBorder</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>bottomBorder</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeftBorder</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setLeftBorder</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leftBorder</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>leftBorder</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRightBorder</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setRightBorder</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rightBorder</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>rightBorder</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorder</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setBorder</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopBorderStyle</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setTopBorderStyle</anchor>
            <arglist>(QTextFrameFormat::BorderStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrameFormat::BorderStyle</type>
            <name>topBorderStyle</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>topBorderStyle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomBorderStyle</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setBottomBorderStyle</anchor>
            <arglist>(QTextFrameFormat::BorderStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrameFormat::BorderStyle</type>
            <name>bottomBorderStyle</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>bottomBorderStyle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeftBorderStyle</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setLeftBorderStyle</anchor>
            <arglist>(QTextFrameFormat::BorderStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrameFormat::BorderStyle</type>
            <name>leftBorderStyle</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>leftBorderStyle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRightBorderStyle</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setRightBorderStyle</anchor>
            <arglist>(QTextFrameFormat::BorderStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrameFormat::BorderStyle</type>
            <name>rightBorderStyle</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>rightBorderStyle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderStyle</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setBorderStyle</anchor>
            <arglist>(QTextFrameFormat::BorderStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopBorderBrush</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setTopBorderBrush</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>topBorderBrush</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>topBorderBrush</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomBorderBrush</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setBottomBorderBrush</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>bottomBorderBrush</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>bottomBorderBrush</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeftBorderBrush</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setLeftBorderBrush</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>leftBorderBrush</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>leftBorderBrush</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRightBorderBrush</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setRightBorderBrush</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>rightBorderBrush</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>rightBorderBrush</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderBrush</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setBorderBrush</anchor>
            <arglist>(const QBrush &amp;brush)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextTableFormat</name>
        <filename>qtexttableformat.html</filename>
        <base>QTextFrameFormat</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextTableFormat</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>QTextTableFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columns</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>columns</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnWidthConstraints</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>setColumnWidthConstraints</anchor>
            <arglist>(const QVector&lt;QTextLength&gt; &amp;constraints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QTextLength&gt;</type>
            <name>columnWidthConstraints</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>columnWidthConstraints</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearColumnWidthConstraints</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>clearColumnWidthConstraints</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>cellSpacing</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>cellSpacing</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCellSpacing</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>setCellSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>cellPadding</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>cellPadding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCellPadding</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>setCellPadding</anchor>
            <arglist>(qreal padding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>alignment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeaderRowCount</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>setHeaderRowCount</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>headerRowCount</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>headerRowCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderCollapse</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>setBorderCollapse</anchor>
            <arglist>(bool borderCollapse)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>borderCollapse</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>borderCollapse</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTouchDevice</name>
        <filename>qtouchdevice.html</filename>
        <member kind="enumeration">
            <name>DeviceType</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>DeviceType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TouchScreen</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>DeviceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TouchPad</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>DeviceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CapabilityFlag</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>CapabilityFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Position</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Area</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pressure</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Velocity</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RawPositions</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NormalizedPosition</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MouseEmulation</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTouchDevice::CapabilityFlag">
            <name>Capabilities</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTouchDevice</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>QTouchDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTouchDevice</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>dtor.QTouchDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;const QTouchDevice *&gt;</type>
            <name>devices</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>devices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchDevice::DeviceType</type>
            <name>type</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchDevice::Capabilities</type>
            <name>capabilities</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>capabilities</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumTouchPoints</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>maximumTouchPoints</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(QTouchDevice::DeviceType devType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapabilities</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>setCapabilities</anchor>
            <arglist>(QTouchDevice::Capabilities caps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumTouchPoints</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>setMaximumTouchPoints</anchor>
            <arglist>(int max)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTouchEvent</name>
        <filename>qtouchevent.html</filename>
        <base>QInputEvent</base>
        <class>QTouchEvent::TouchPoint</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTouchEvent</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>QTouchEvent</anchor>
            <arglist>(QEvent::Type eventType, QTouchDevice *device, Qt::KeyboardModifiers modifiers, Qt::TouchPointStates touchPointStates, const QList&lt;QTouchEvent::TouchPoint&gt; &amp;touchPoints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTouchEvent</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>dtor.QTouchEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWindow *</type>
            <name>window</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>target</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TouchPointStates</type>
            <name>touchPointStates</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>touchPointStates</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QList&lt;QTouchEvent::TouchPoint&gt; &amp;</type>
            <name>touchPoints</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>touchPoints</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchDevice *</type>
            <name>device</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTouchEvent::TouchPoint</name>
        <filename>qtouchevent-touchpoint.html</filename>
        <member kind="enumeration">
            <name>InfoFlag</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>InfoFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Pen</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>InfoFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Token</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>InfoFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTouchEvent::TouchPoint::InfoFlag">
            <name>InfoFlags</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>InfoFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>TouchPoint</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>TouchPoint-2</anchor>
            <arglist>(TouchPoint &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>id</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointingDeviceUniqueId</type>
            <name>uniqueId</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>uniqueId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TouchPointState</type>
            <name>state</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>startPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>startPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>lastPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>scenePos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>scenePos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>startScenePos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>startScenePos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastScenePos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>lastScenePos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>screenPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>startScreenPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>startScreenPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastScreenPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>lastScreenPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>normalizedPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>normalizedPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>startNormalizedPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>startNormalizedPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastNormalizedPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>lastNormalizedPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qtouchevent-touchpoint-obsolete.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>sceneRect</name>
            <anchorfile>qtouchevent-touchpoint-obsolete.html</anchorfile>
            <anchor>sceneRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>screenRect</name>
            <anchorfile>qtouchevent-touchpoint-obsolete.html</anchorfile>
            <anchor>screenRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>pressure</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>pressure</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rotation</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>rotation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>ellipseDiameters</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>ellipseDiameters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>velocity</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>velocity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TouchPoint::InfoFlags</type>
            <name>flags</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QPointF&gt;</type>
            <name>rawScreenPositions</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>rawScreenPositions</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTransform</name>
        <filename>qtransform.html</filename>
        <member kind="enumeration">
            <name>TransformationType</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>TransformationType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TxNone</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TxTranslate</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TxScale</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TxRotate</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TxShear</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TxProject</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>QTransform-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>QTransform-2</anchor>
            <arglist>(qreal m11, qreal m12, qreal m13, qreal m21, qreal m22, qreal m23, qreal m31, qreal m32, qreal m33)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>QTransform-3</anchor>
            <arglist>(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qtransform-obsolete.html</anchorfile>
            <anchor>QTransform-4</anchor>
            <arglist>(const QMatrix &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>operator=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAffine</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>isAffine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isIdentity</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>isIdentity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInvertible</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>isInvertible</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isScaling</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>isScaling</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRotating</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>isRotating</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTranslating</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>isTranslating</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform::TransformationType</type>
            <name>type</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>determinant</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>determinant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>det</name>
            <anchorfile>qtransform-obsolete.html</anchorfile>
            <anchor>det</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m11</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m11</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m12</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m12</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m13</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m13</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m21</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m21</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m22</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m22</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m23</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m23</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m31</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m31</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m32</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m32</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m33</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m33</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dx</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>dx</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dy</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>dy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>setMatrix</anchor>
            <arglist>(qreal m11, qreal m12, qreal m13, qreal m21, qreal m22, qreal m23, qreal m31, qreal m32, qreal m33)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>inverted</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>inverted</anchor>
            <arglist>(bool *invertible) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>adjoint</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>adjoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>transposed</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>translate</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>scale</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(qreal sx, qreal sy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>shear</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>shear</anchor>
            <arglist>(qreal sh, qreal sv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>rotate</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(qreal angle, Qt::Axis axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>rotateRadians</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>rotateRadians</anchor>
            <arglist>(qreal angle, Qt::Axis axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>squareToQuad</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>squareToQuad</anchor>
            <arglist>(const QPolygonF &amp;quad, QTransform &amp;trans)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>quadToSquare</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>quadToSquare</anchor>
            <arglist>(const QPolygonF &amp;quad, QTransform &amp;trans)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>quadToQuad</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>quadToQuad</anchor>
            <arglist>(const QPolygonF &amp;one, const QPolygonF &amp;two, QTransform &amp;trans)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTransform &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QTransform &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>operator*=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(const QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>operator*</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(const QTransform &amp;matrix) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-1</anchor>
            <arglist>(const QPoint &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-2</anchor>
            <arglist>(const QPointF &amp;p) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-3</anchor>
            <arglist>(const QLine &amp;l) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-4</anchor>
            <arglist>(const QLineF &amp;line) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-5</anchor>
            <arglist>(const QPolygonF &amp;polygon) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-6</anchor>
            <arglist>(const QPolygon &amp;polygon) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-7</anchor>
            <arglist>(const QRegion &amp;region) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-8</anchor>
            <arglist>(const QPainterPath &amp;path) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>mapToPolygon</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>mapToPolygon</anchor>
            <arglist>(const QRect &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>mapRect</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>mapRect-1</anchor>
            <arglist>(const QRect &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRect</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>mapRect</anchor>
            <arglist>(const QRectF &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-9</anchor>
            <arglist>(int x, int y, int *tx, int *ty) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(qreal x, qreal y, qreal *tx, qreal *ty) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix &amp;</type>
            <name>toAffine</name>
            <anchorfile>qtransform-obsolete.html</anchorfile>
            <anchor>toAffine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>operator*=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2a-eq-1</anchor>
            <arglist>(qreal scalar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>operator/=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(qreal scalar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>operator+=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qreal scalar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>operator-=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qreal scalar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTransform</type>
            <name>fromTranslate</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>fromTranslate</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTransform</type>
            <name>fromScale</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>fromScale</anchor>
            <arglist>(qreal sx, qreal sy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>qHash-3</anchor>
            <arglist>(const QTransform &amp;key, uint seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-lt-lt-19</anchor>
            <arglist>(QDataStream &amp;stream, const QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator*</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2a-11</anchor>
            <arglist>(const QPoint &amp;point, const QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>operator*</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2a-12</anchor>
            <arglist>(const QPointF &amp;point, const QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>operator*</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2a-13</anchor>
            <arglist>(const QLineF &amp;line, const QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>operator*</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2a-14</anchor>
            <arglist>(const QLine &amp;line, const QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>operator*</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2a-16</anchor>
            <arglist>(const QPolygonF &amp;polygon, const QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>operator*</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2a-15</anchor>
            <arglist>(const QPolygon &amp;polygon, const QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>operator*</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2a-17</anchor>
            <arglist>(const QRegion &amp;region, const QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>operator*</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-2a-7</anchor>
            <arglist>(const QPainterPath &amp;path, const QTransform &amp;matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>qFuzzyCompare</anchor>
            <arglist>(const QTransform &amp;t1, const QTransform &amp;t2)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTypeInfo</name>
        <filename>qtypeinfo.html</filename>
    </compound>
    <compound kind="class">
        <name>QValidator</name>
        <filename>qvalidator.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QValidator</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>QValidator</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QValidator</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>dtor.QValidator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>State</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>State-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Invalid</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Intermediate</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Acceptable</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>locale</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QValidator::State</type>
            <name>validate</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp;input, int &amp;pos) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fixup</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>fixup</anchor>
            <arglist>(QString &amp;input) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>changed</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>changed</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVector2D</name>
        <filename>qvector2d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector2D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>QVector2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector2D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>QVector2D-2</anchor>
            <arglist>(float xpos, float ypos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector2D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>QVector2D-3</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector2D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>QVector2D-4</anchor>
            <arglist>(const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector2D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>QVector2D-5</anchor>
            <arglist>(const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector2D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>QVector2D-6</anchor>
            <arglist>(const QVector4D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>x</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>y</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(float x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(float y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float &amp;</type>
            <name>operator[]</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>operator[]</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(int i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lengthSquared</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>lengthSquared</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>normalized</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalize</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>normalize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distanceToPoint</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>distanceToPoint</anchor>
            <arglist>(const QVector2D &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distanceToLine</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>distanceToLine</anchor>
            <arglist>(const QVector2D &amp;point, const QVector2D &amp;direction) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D &amp;</type>
            <name>operator+=</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QVector2D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D &amp;</type>
            <name>operator-=</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QVector2D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D &amp;</type>
            <name>operator*=</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D &amp;</type>
            <name>operator*=</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-2a-eq-1</anchor>
            <arglist>(const QVector2D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D &amp;</type>
            <name>operator/=</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D &amp;</type>
            <name>operator/=</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-2f-eq-1</anchor>
            <arglist>(const QVector2D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>float</type>
            <name>dotProduct</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QVector2D &amp;v1, const QVector2D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>toVector3D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>toVector3D</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>toVector4D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>toVector4D</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>toPoint</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>toPoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>toPointF</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>toPointF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QVector2D &amp;v1, const QVector2D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QVector2D &amp;v1, const QVector2D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector2D</type>
            <name>operator+</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QVector2D &amp;v1, const QVector2D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector2D</type>
            <name>operator-</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QVector2D &amp;v1, const QVector2D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector2D</type>
            <name>operator*</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(float factor, const QVector2D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector2D</type>
            <name>operator*</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-2a-1</anchor>
            <arglist>(const QVector2D &amp;vector, float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector2D</type>
            <name>operator*</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-2a-2</anchor>
            <arglist>(const QVector2D &amp;v1, const QVector2D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector2D</type>
            <name>operator-</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QVector2D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector2D</type>
            <name>operator/</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-2f</anchor>
            <arglist>(const QVector2D &amp;vector, float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector2D</type>
            <name>operator/</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-2f-1</anchor>
            <arglist>(const QVector2D &amp;vector, const QVector2D &amp;divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>qFuzzyCompare</anchor>
            <arglist>(const QVector2D &amp;v1, const QVector2D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-lt-lt-7</anchor>
            <arglist>(QDataStream &amp;stream, const QVector2D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QVector2D &amp;vector)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVector3D</name>
        <filename>qvector3d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D-2</anchor>
            <arglist>(float xpos, float ypos, float zpos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D-3</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D-4</anchor>
            <arglist>(const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D-5</anchor>
            <arglist>(const QVector2D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D-6</anchor>
            <arglist>(const QVector2D &amp;vector, float zpos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D-7</anchor>
            <arglist>(const QVector4D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>x</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>y</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>z</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>z</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(float x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(float y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>setZ</anchor>
            <arglist>(float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float &amp;</type>
            <name>operator[]</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>operator[]</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(int i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lengthSquared</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>lengthSquared</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>normalized</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalize</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>normalize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D &amp;</type>
            <name>operator+=</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D &amp;</type>
            <name>operator-=</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D &amp;</type>
            <name>operator*=</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D &amp;</type>
            <name>operator*=</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-2a-eq-1</anchor>
            <arglist>(const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D &amp;</type>
            <name>operator/=</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D &amp;</type>
            <name>operator/=</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-2f-eq-1</anchor>
            <arglist>(const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>float</type>
            <name>dotProduct</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QVector3D &amp;v1, const QVector3D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVector3D</type>
            <name>crossProduct</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>crossProduct</anchor>
            <arglist>(const QVector3D &amp;v1, const QVector3D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVector3D</type>
            <name>normal</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>normal</anchor>
            <arglist>(const QVector3D &amp;v1, const QVector3D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVector3D</type>
            <name>normal</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>normal-1</anchor>
            <arglist>(const QVector3D &amp;v1, const QVector3D &amp;v2, const QVector3D &amp;v3)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>project</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>project</anchor>
            <arglist>(const QMatrix4x4 &amp;modelView, const QMatrix4x4 &amp;projection, const QRect &amp;viewport) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>unproject</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>unproject</anchor>
            <arglist>(const QMatrix4x4 &amp;modelView, const QMatrix4x4 &amp;projection, const QRect &amp;viewport) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distanceToPoint</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>distanceToPoint</anchor>
            <arglist>(const QVector3D &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distanceToPlane</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>distanceToPlane</anchor>
            <arglist>(const QVector3D &amp;plane, const QVector3D &amp;normal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distanceToPlane</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>distanceToPlane-1</anchor>
            <arglist>(const QVector3D &amp;plane1, const QVector3D &amp;plane2, const QVector3D &amp;plane3) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distanceToLine</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>distanceToLine</anchor>
            <arglist>(const QVector3D &amp;point, const QVector3D &amp;direction) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>toVector2D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>toVector2D</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>toVector4D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>toVector4D</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>toPoint</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>toPoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>toPointF</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>toPointF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-eq-eq-5</anchor>
            <arglist>(const QVector3D &amp;v1, const QVector3D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-not-eq-7</anchor>
            <arglist>(const QVector3D &amp;v1, const QVector3D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector3D</type>
            <name>operator+</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QVector3D &amp;v1, const QVector3D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector3D</type>
            <name>operator-</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QVector3D &amp;v1, const QVector3D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector3D</type>
            <name>operator*</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(float factor, const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector3D</type>
            <name>operator*</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-2a-1</anchor>
            <arglist>(const QVector3D &amp;vector, float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector3D</type>
            <name>operator*</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-2a-2</anchor>
            <arglist>(const QVector3D &amp;v1, const QVector3D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector3D</type>
            <name>operator-</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector3D</type>
            <name>operator/</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-2f</anchor>
            <arglist>(const QVector3D &amp;vector, float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector3D</type>
            <name>operator/</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-2f-1</anchor>
            <arglist>(const QVector3D &amp;vector, const QVector3D &amp;divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>qFuzzyCompare</anchor>
            <arglist>(const QVector3D &amp;v1, const QVector3D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QVector3D &amp;vector)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVector4D</name>
        <filename>qvector4d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-2</anchor>
            <arglist>(float xpos, float ypos, float zpos, float wpos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-3</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-4</anchor>
            <arglist>(const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-5</anchor>
            <arglist>(const QVector2D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-6</anchor>
            <arglist>(const QVector2D &amp;vector, float zpos, float wpos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-7</anchor>
            <arglist>(const QVector3D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-8</anchor>
            <arglist>(const QVector3D &amp;vector, float wpos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>x</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>y</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>z</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>z</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>w</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>w</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(float x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(float y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>setZ</anchor>
            <arglist>(float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setW</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>setW</anchor>
            <arglist>(float w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float &amp;</type>
            <name>operator[]</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>operator[]</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(int i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lengthSquared</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>lengthSquared</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>normalized</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalize</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>normalize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D &amp;</type>
            <name>operator+=</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QVector4D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D &amp;</type>
            <name>operator-=</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QVector4D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D &amp;</type>
            <name>operator*=</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D &amp;</type>
            <name>operator*=</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-2a-eq-1</anchor>
            <arglist>(const QVector4D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D &amp;</type>
            <name>operator/=</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D &amp;</type>
            <name>operator/=</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-2f-eq-1</anchor>
            <arglist>(const QVector4D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>float</type>
            <name>dotProduct</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QVector4D &amp;v1, const QVector4D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>toVector2D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>toVector2D</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>toVector2DAffine</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>toVector2DAffine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>toVector3D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>toVector3D</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>toVector3DAffine</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>toVector3DAffine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>toPoint</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>toPoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>toPointF</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>toPointF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-eq-eq-6</anchor>
            <arglist>(const QVector4D &amp;v1, const QVector4D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-not-eq-8</anchor>
            <arglist>(const QVector4D &amp;v1, const QVector4D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector4D</type>
            <name>operator+</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QVector4D &amp;v1, const QVector4D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector4D</type>
            <name>operator-</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QVector4D &amp;v1, const QVector4D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector4D</type>
            <name>operator*</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(float factor, const QVector4D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector4D</type>
            <name>operator*</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-2a-1</anchor>
            <arglist>(const QVector4D &amp;vector, float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector4D</type>
            <name>operator*</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-2a-2</anchor>
            <arglist>(const QVector4D &amp;v1, const QVector4D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector4D</type>
            <name>operator-</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QVector4D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector4D</type>
            <name>operator/</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-2f</anchor>
            <arglist>(const QVector4D &amp;vector, float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVector4D</type>
            <name>operator/</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-2f-1</anchor>
            <arglist>(const QVector4D &amp;vector, const QVector4D &amp;divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>qFuzzyCompare</anchor>
            <arglist>(const QVector4D &amp;v1, const QVector4D &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QVector4D &amp;vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QVector4D &amp;vector)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVulkanDeviceFunctions</name>
        <filename>qvulkandevicefunctions.html</filename>
    </compound>
    <compound kind="class">
        <name>QVulkanExtension</name>
        <filename>qvulkanextension.html</filename>
    </compound>
    <compound kind="class">
        <name>QVulkanFunctions</name>
        <filename>qvulkanfunctions.html</filename>
    </compound>
    <compound kind="class">
        <name>QVulkanInfoVector</name>
        <filename>qvulkaninfovector.html</filename>
        <base>QVector</base>
    </compound>
    <compound kind="class">
        <name>QVulkanInstance</name>
        <filename>qvulkaninstance.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVulkanInstance</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>QVulkanInstance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVulkanInstance</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>dtor.QVulkanInstance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>Flag</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>Flag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoDebugOutputRedirect</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QVulkanInstance::Flag">
            <name>Flags</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVulkanInfoVector&lt;QVulkanLayer&gt;</type>
            <name>supportedLayers</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>supportedLayers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVulkanInfoVector&lt;QVulkanExtension&gt;</type>
            <name>supportedExtensions</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>supportedExtensions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVkInstance</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>setVkInstance</anchor>
            <arglist>(int existingVkInstance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QVulkanInstance::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayers</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>setLayers</anchor>
            <arglist>(const QByteArrayList &amp;layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtensions</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>setExtensions</anchor>
            <arglist>(const QByteArrayList &amp;extensions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setApiVersion</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>setApiVersion</anchor>
            <arglist>(const QVersionNumber &amp;vulkanVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>errorCode</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>errorCode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>vkInstance</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>vkInstance</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVulkanInstance::Flags</type>
            <name>flags</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayList</type>
            <name>layers</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>layers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayList</type>
            <name>extensions</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>extensions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber</type>
            <name>apiVersion</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>apiVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PFN_vkVoidFunction</type>
            <name>getInstanceProcAddr</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>getInstanceProcAddr</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVulkanFunctions *</type>
            <name>functions</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>functions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVulkanDeviceFunctions *</type>
            <name>deviceFunctions</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>deviceFunctions</anchor>
            <arglist>(int device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetDeviceFunctions</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>resetDeviceFunctions</anchor>
            <arglist>(int device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>VkSurfaceKHR</type>
            <name>surfaceForWindow</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>surfaceForWindow</anchor>
            <arglist>(QWindow *window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsPresent</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>supportsPresent</anchor>
            <arglist>(int physicalDevice, uint32_t queueFamilyIndex, QWindow *window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>presentAboutToBeQueued</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>presentAboutToBeQueued</anchor>
            <arglist>(QWindow *window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>presentQueued</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>presentQueued</anchor>
            <arglist>(QWindow *window)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>DebugFilter</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>DebugFilter-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>installDebugOutputFilter</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>installDebugOutputFilter</anchor>
            <arglist>(QVulkanInstance::DebugFilter filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeDebugOutputFilter</name>
            <anchorfile>qvulkaninstance.html</anchorfile>
            <anchor>removeDebugOutputFilter</anchor>
            <arglist>(QVulkanInstance::DebugFilter filter)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVulkanLayer</name>
        <filename>qvulkanlayer.html</filename>
    </compound>
    <compound kind="class">
        <name>QVulkanWindow</name>
        <filename>qvulkanwindow.html</filename>
        <base>QWindow</base>
        <member kind="enumeration">
            <name>Flag</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>Flag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PersistentResources</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QVulkanWindow::Flag">
            <name>Flags</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVulkanWindow</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>QVulkanWindow</anchor>
            <arglist>(QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QVulkanWindow</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>dtor.QVulkanWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QVulkanWindow::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVulkanWindow::Flags</type>
            <name>flags</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>availablePhysicalDevices</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>availablePhysicalDevices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPhysicalDeviceIndex</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>setPhysicalDeviceIndex</anchor>
            <arglist>(int idx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVulkanInfoVector&lt;QVulkanExtension&gt;</type>
            <name>supportedDeviceExtensions</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>supportedDeviceExtensions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeviceExtensions</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>setDeviceExtensions</anchor>
            <arglist>(const QByteArrayList &amp;extensions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreferredColorFormats</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>setPreferredColorFormats</anchor>
            <arglist>(const int &amp;formats)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;int&gt;</type>
            <name>supportedSampleCounts</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>supportedSampleCounts</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleCount</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>setSampleCount</anchor>
            <arglist>(int sampleCount)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QueueCreateInfoModifier</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>QueueCreateInfoModifier-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQueueCreateInfoModifier</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>setQueueCreateInfoModifier</anchor>
            <arglist>(const QVulkanWindow::QueueCreateInfoModifier &amp;modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVulkanWindowRenderer *</type>
            <name>createRenderer</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>createRenderer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frameReady</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>frameReady</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>physicalDevice</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>physicalDevice</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const int *</type>
            <name>physicalDeviceProperties</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>physicalDeviceProperties</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>device</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>graphicsQueue</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>graphicsQueue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint32_t</type>
            <name>graphicsQueueFamilyIndex</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>graphicsQueueFamilyIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>graphicsCommandPool</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>graphicsCommandPool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint32_t</type>
            <name>hostVisibleMemoryIndex</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>hostVisibleMemoryIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint32_t</type>
            <name>deviceLocalMemoryIndex</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>deviceLocalMemoryIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>defaultRenderPass</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>defaultRenderPass</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>colorFormat</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>colorFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depthStencilFormat</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>depthStencilFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>swapChainImageSize</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>swapChainImageSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentCommandBuffer</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>currentCommandBuffer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentFramebuffer</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>currentFramebuffer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentFrame</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>currentFrame</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>concurrentFrameCount</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>concurrentFrameCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>swapChainImageCount</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>swapChainImageCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentSwapChainImageIndex</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>currentSwapChainImageIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>VkImage</type>
            <name>swapChainImage</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>swapChainImage</anchor>
            <arglist>(int idx) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>VkImageView</type>
            <name>swapChainImageView</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>swapChainImageView</anchor>
            <arglist>(int idx) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>VkImage</type>
            <name>depthStencilImage</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>depthStencilImage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>VkImageView</type>
            <name>depthStencilImageView</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>depthStencilImageView</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sampleCountFlagBits</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>sampleCountFlagBits</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>VkImage</type>
            <name>msaaColorImage</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>msaaColorImage</anchor>
            <arglist>(int idx) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>VkImageView</type>
            <name>msaaColorImageView</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>msaaColorImageView</anchor>
            <arglist>(int idx) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsGrab</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>supportsGrab</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grab</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>grab</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>clipCorrectionMatrix</name>
            <anchorfile>qvulkanwindow.html</anchorfile>
            <anchor>clipCorrectionMatrix</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVulkanWindowRenderer</name>
        <filename>qvulkanwindowrenderer.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QVulkanWindowRenderer</name>
            <anchorfile>qvulkanwindowrenderer.html</anchorfile>
            <anchor>dtor.QVulkanWindowRenderer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>preInitResources</name>
            <anchorfile>qvulkanwindowrenderer.html</anchorfile>
            <anchor>preInitResources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initResources</name>
            <anchorfile>qvulkanwindowrenderer.html</anchorfile>
            <anchor>initResources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initSwapChainResources</name>
            <anchorfile>qvulkanwindowrenderer.html</anchorfile>
            <anchor>initSwapChainResources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>releaseSwapChainResources</name>
            <anchorfile>qvulkanwindowrenderer.html</anchorfile>
            <anchor>releaseSwapChainResources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>releaseResources</name>
            <anchorfile>qvulkanwindowrenderer.html</anchorfile>
            <anchor>releaseResources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>physicalDeviceLost</name>
            <anchorfile>qvulkanwindowrenderer.html</anchorfile>
            <anchor>physicalDeviceLost</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>logicalDeviceLost</name>
            <anchorfile>qvulkanwindowrenderer.html</anchorfile>
            <anchor>logicalDeviceLost</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWhatsThisClickedEvent</name>
        <filename>qwhatsthisclickedevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWhatsThisClickedEvent</name>
            <anchorfile>qwhatsthisclickedevent.html</anchorfile>
            <anchor>QWhatsThisClickedEvent</anchor>
            <arglist>(const QString &amp;href)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>href</name>
            <anchorfile>qwhatsthisclickedevent.html</anchorfile>
            <anchor>href</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWheelEvent</name>
        <filename>qwheelevent.html</filename>
        <base>QInputEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>QWheelEvent</anchor>
            <arglist>(const QPointF &amp;pos, int delta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::Orientation orient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>QWheelEvent-1</anchor>
            <arglist>(const QPointF &amp;pos, const QPointF &amp;globalPos, int delta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::Orientation orient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>QWheelEvent-2</anchor>
            <arglist>(const QPointF &amp;pos, const QPointF &amp;globalPos, QPoint pixelDelta, QPoint angleDelta, int qt4Delta, Qt::Orientation qt4Orientation, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>QWheelEvent-3</anchor>
            <arglist>(const QPointF &amp;pos, const QPointF &amp;globalPos, QPoint pixelDelta, QPoint angleDelta, int qt4Delta, Qt::Orientation qt4Orientation, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::ScrollPhase phase)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>QWheelEvent-4</anchor>
            <arglist>(const QPointF &amp;pos, const QPointF &amp;globalPos, QPoint pixelDelta, QPoint angleDelta, int qt4Delta, Qt::Orientation qt4Orientation, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::ScrollPhase phase, Qt::MouseEventSource source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>QWheelEvent-5</anchor>
            <arglist>(const QPointF &amp;pos, const QPointF &amp;globalPos, QPoint pixelDelta, QPoint angleDelta, int qt4Delta, Qt::Orientation qt4Orientation, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::ScrollPhase phase, Qt::MouseEventSource source, bool inverted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>QWheelEvent-6</anchor>
            <arglist>(QPointF pos, QPointF globalPos, QPoint pixelDelta, QPoint angleDelta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::ScrollPhase phase, bool inverted, Qt::MouseEventSource source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pixelDelta</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>pixelDelta</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>angleDelta</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>angleDelta</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>delta</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>delta</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>orientation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>globalPos</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalX</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>globalX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalY</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>globalY</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>posF</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>posF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>globalPosF</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>globalPosF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>position</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>globalPosition</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>globalPosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>buttons</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScrollPhase</type>
            <name>phase</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>phase</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inverted</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>inverted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseEventSource</type>
            <name>source</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWindow</name>
        <filename>qwindow.html</filename>
        <base>QObject</base>
        <base>QSurface</base>
        <member kind="property" type="QString">
            <name>title</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::WindowModality">
            <name>modality</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>modality-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::WindowFlags">
            <name>flags</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>flags-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>x</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>y</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>width</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>height</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumHeight-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximumWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximumHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumHeight-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>visible</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>active</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Visibility">
            <name>visibility</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>visibility-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ScreenOrientation">
            <name>contentOrientation</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>contentOrientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>opacity</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Visibility</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>Visibility-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Hidden</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>Visibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AutomaticVisibility</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>Visibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Windowed</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>Visibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Minimized</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>Visibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Maximized</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>Visibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FullScreen</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>Visibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AncestorMode</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>AncestorMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ExcludeTransients</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>AncestorMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IncludeTransients</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>AncestorMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWindow</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>QWindow</anchor>
            <arglist>(QScreen *targetScreen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWindow</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>QWindow-1</anchor>
            <arglist>(QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QWindow</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>dtor.QWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSurfaceType</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setSurfaceType</anchor>
            <arglist>(QSurface::SurfaceType surfaceType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSurface::SurfaceType</type>
            <name>surfaceType</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>surfaceType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWindow::Visibility</type>
            <name>visibility</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>visibility-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisibility</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>visibility-prop</anchor>
            <arglist>(QWindow::Visibility v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>create</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WId</type>
            <name>winId</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>winId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWindow *</type>
            <name>parent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(QWindow::AncestorMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWindow *</type>
            <name>parent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>parent-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setParent</anchor>
            <arglist>(QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTopLevel</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>isTopLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isModal</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>isModal</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowModality</type>
            <name>modality</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>modality-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModality</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>modality-prop</anchor>
            <arglist>(Qt::WindowModality modality)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat</type>
            <name>requestedFormat</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>requestedFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>flags-prop</anchor>
            <arglist>(Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowFlags</type>
            <name>flags</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>flags-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlag</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setFlag</anchor>
            <arglist>(Qt::WindowType flag, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowType</type>
            <name>type</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>title</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacity</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist>(qreal level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>opacity</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMask</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setMask</anchor>
            <arglist>(const QRegion &amp;region)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>mask</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mask</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reportContentOrientationChange</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>contentOrientation-prop</anchor>
            <arglist>(Qt::ScreenOrientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScreenOrientation</type>
            <name>contentOrientation</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>contentOrientation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>devicePixelRatio</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowState</type>
            <name>windowState</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>windowState</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowStates</type>
            <name>windowStates</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>windowStates</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowState</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setWindowState</anchor>
            <arglist>(Qt::WindowState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowStates</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setWindowStates</anchor>
            <arglist>(Qt::WindowStates state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAncestorOf</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>isAncestorOf</anchor>
            <arglist>(const QWindow *child, QWindow::AncestorMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isExposed</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>isExposed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimumWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumWidth-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimumHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumHeight-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumWidth-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumHeight-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>minimumSize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>maximumSize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>baseSize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>baseSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizeIncrement</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>sizeIncrement</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumSize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setMinimumSize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumSize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setMaximumSize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseSize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setBaseSize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeIncrement</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setSizeIncrement</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>geometry</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>frameMargins</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>frameMargins</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>frameGeometry</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>frameGeometry</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>framePosition</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>framePosition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFramePosition</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setFramePosition</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>size</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>position</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(const QPoint &amp;pt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setPosition-1</anchor>
            <arglist>(int posx, int posy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(const QSize &amp;newSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>resize-1</anchor>
            <arglist>(int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilePath</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setFilePath</anchor>
            <arglist>(const QString &amp;filePath)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setIcon</anchor>
            <arglist>(const QIcon &amp;icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>icon</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>icon</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setKeyboardGrabEnabled</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setKeyboardGrabEnabled</anchor>
            <arglist>(bool grab)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setMouseGrabEnabled</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setMouseGrabEnabled</anchor>
            <arglist>(bool grab)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScreen *</type>
            <name>screen</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>screen</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScreen</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setScreen</anchor>
            <arglist>(QScreen *newScreen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QObject *</type>
            <name>focusObject</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>focusObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>mapToGlobal</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mapToGlobal</anchor>
            <arglist>(const QPoint &amp;pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>mapFromGlobal</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mapFromGlobal</anchor>
            <arglist>(const QPoint &amp;pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCursor</type>
            <name>cursor</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>cursor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursor</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setCursor</anchor>
            <arglist>(const QCursor &amp;cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetCursor</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>unsetCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindow *</type>
            <name>fromWinId</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>fromWinId</anchor>
            <arglist>(WId id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVulkanInstance</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setVulkanInstance</anchor>
            <arglist>(QVulkanInstance *instance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVulkanInstance *</type>
            <name>vulkanInstance</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>vulkanInstance</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestActivate</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>requestActivate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>show</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>show</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hide</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>hide</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMinimized</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>showMinimized</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMaximized</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>showMaximized</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showFullScreen</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>showFullScreen</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showNormal</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>showNormal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>close</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>raise</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>raise</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lower</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>lower</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startSystemResize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>startSystemResize</anchor>
            <arglist>(Qt::Edges edges)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startSystemMove</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>startSystemMove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTitle</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist>(const QString &amp;)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(int posx, int posy, int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setGeometry-1</anchor>
            <arglist>(const QRect &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumWidth-prop</anchor>
            <arglist>(int w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumHeight-prop</anchor>
            <arglist>(int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumWidth-prop</anchor>
            <arglist>(int w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumHeight-prop</anchor>
            <arglist>(int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>alert</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>alert</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestUpdate</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>requestUpdate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>screenChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>screenChanged</anchor>
            <arglist>(QScreen *screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modalityChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>modalityChanged</anchor>
            <arglist>(Qt::WindowModality modality)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>windowStateChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>windowStateChanged</anchor>
            <arglist>(Qt::WindowState windowState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>windowTitleChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist>(const QString &amp;title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minimumWidthChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumWidth-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minimumHeightChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumHeight-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>maximumWidthChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumWidth-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>maximumHeightChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumHeight-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>visibleChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>(bool arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>visibilityChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>visibility-prop</anchor>
            <arglist>(QWindow::Visibility visibility)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contentOrientationChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>contentOrientation-prop</anchor>
            <arglist>(Qt::ScreenOrientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusObjectChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>focusObjectChanged</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>opacityChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>opacity-prop</anchor>
            <arglist>(qreal opacity)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>exposeEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>exposeEvent</anchor>
            <arglist>(QExposeEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>moveEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>moveEvent</anchor>
            <arglist>(QMoveEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *ev) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>touchEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>touchEvent</anchor>
            <arglist>(QTouchEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>tabletEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>tabletEvent</anchor>
            <arglist>(QTabletEvent *ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>nativeEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>nativeEvent</anchor>
            <arglist>(const QByteArray &amp;eventType, void *message, long *result)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWindowStateChangeEvent</name>
        <filename>qwindowstatechangeevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowStates</type>
            <name>oldState</name>
            <anchorfile>qwindowstatechangeevent.html</anchorfile>
            <anchor>oldState</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt</name>
        <filename>qt-sub-qtgui.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mightBeRichText</name>
            <anchorfile>qt-sub-qtgui.html</anchorfile>
            <anchor>mightBeRichText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>convertFromPlainText</name>
            <anchorfile>qt-sub-qtgui.html</anchorfile>
            <anchor>convertFromPlainText</anchor>
            <arglist>(const QString &amp;plain, Qt::WhiteSpaceMode mode)</arglist>
        </member>
    </compound>
</tagfile>
