<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QAbstractXmlNodeModel</name>
        <filename>qabstractxmlnodemodel.html</filename>
        <base>QSharedData</base>
        <member kind="enumeration">
            <name>SimpleAxis</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>SimpleAxis-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Parent</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>SimpleAxis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FirstChild</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>SimpleAxis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreviousSibling</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>SimpleAxis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NextSibling</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>SimpleAxis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Ptr</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>Ptr-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>List</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>List-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractXmlNodeModel</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>QAbstractXmlNodeModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractXmlNodeModel</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>dtor.QAbstractXmlNodeModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QUrl</type>
            <name>baseUri</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>baseUri</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;n) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QUrl</type>
            <name>documentUri</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>documentUri</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;n) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QXmlNodeModelIndex::NodeKind</type>
            <name>kind</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>kind</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;ni) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QXmlNodeModelIndex::DocumentOrder</type>
            <name>compareOrder</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>compareOrder</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;ni1, const QXmlNodeModelIndex &amp;ni2) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QXmlNodeModelIndex</type>
            <name>root</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>root</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;n) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QXmlName</type>
            <name>name</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>name</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;ni) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QString</type>
            <name>stringValue</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>stringValue</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;n) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVariant</type>
            <name>typedValue</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>typedValue</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;node) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVector&lt;QXmlName&gt;</type>
            <name>namespaceBindings</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>namespaceBindings</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;n) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QXmlNodeModelIndex</type>
            <name>elementById</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>elementById</anchor>
            <arglist>(const QXmlName &amp;id) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVector&lt;QXmlNodeModelIndex&gt;</type>
            <name>nodesByIdref</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>nodesByIdref</anchor>
            <arglist>(const QXmlName &amp;idref) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSourceLocation</type>
            <name>sourceLocation</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>sourceLocation</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;index) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual QXmlNodeModelIndex</type>
            <name>nextFromSimpleAxis</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>nextFromSimpleAxis</anchor>
            <arglist>(QAbstractXmlNodeModel::SimpleAxis axis, const QXmlNodeModelIndex &amp;origin) const const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual QVector&lt;QXmlNodeModelIndex&gt;</type>
            <name>attributes</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;element) const const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QXmlNodeModelIndex</type>
            <name>createIndex</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>createIndex</anchor>
            <arglist>(qint64 data) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QXmlNodeModelIndex</type>
            <name>createIndex</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>createIndex-1</anchor>
            <arglist>(void *pointer, qint64 additionalData) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QXmlNodeModelIndex</type>
            <name>createIndex</name>
            <anchorfile>qabstractxmlnodemodel.html</anchorfile>
            <anchor>createIndex-2</anchor>
            <arglist>(qint64 data, qint64 additionalData) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractMessageHandler</name>
        <filename>qabstractmessagehandler.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractMessageHandler</name>
            <anchorfile>qabstractmessagehandler.html</anchorfile>
            <anchor>QAbstractMessageHandler</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractMessageHandler</name>
            <anchorfile>qabstractmessagehandler.html</anchorfile>
            <anchor>dtor.QAbstractMessageHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>message</name>
            <anchorfile>qabstractmessagehandler.html</anchorfile>
            <anchor>message</anchor>
            <arglist>(QtMsgType type, const QString &amp;description, const QUrl &amp;identifier, const QSourceLocation &amp;sourceLocation)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>handleMessage</name>
            <anchorfile>qabstractmessagehandler.html</anchorfile>
            <anchor>handleMessage</anchor>
            <arglist>(QtMsgType type, const QString &amp;description, const QUrl &amp;identifier, const QSourceLocation &amp;sourceLocation) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractUriResolver</name>
        <filename>qabstracturiresolver.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractUriResolver</name>
            <anchorfile>qabstracturiresolver.html</anchorfile>
            <anchor>QAbstractUriResolver</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractUriResolver</name>
            <anchorfile>qabstracturiresolver.html</anchorfile>
            <anchor>dtor.QAbstractUriResolver</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QUrl</type>
            <name>resolve</name>
            <anchorfile>qabstracturiresolver.html</anchorfile>
            <anchor>resolve</anchor>
            <arglist>(const QUrl &amp;relative, const QUrl &amp;baseURI) const const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractXmlReceiver</name>
        <filename>qabstractxmlreceiver.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractXmlReceiver</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>QAbstractXmlReceiver</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractXmlReceiver</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>dtor.QAbstractXmlReceiver</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>startElement</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>startElement</anchor>
            <arglist>(const QXmlName &amp;name) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>endElement</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>endElement</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>attribute</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(const QXmlName &amp;name, const QStringRef &amp;value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>comment</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>comment</anchor>
            <arglist>(const QString &amp;value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>characters</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>characters</anchor>
            <arglist>(const QStringRef &amp;value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>startDocument</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>startDocument</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>endDocument</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>endDocument</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>processingInstruction</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>processingInstruction</anchor>
            <arglist>(const QXmlName &amp;target, const QString &amp;value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>atomicValue</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>atomicValue</anchor>
            <arglist>(const QVariant &amp;value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>namespaceBinding</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>namespaceBinding</anchor>
            <arglist>(const QXmlName &amp;name) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>startOfSequence</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>startOfSequence</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>endOfSequence</name>
            <anchorfile>qabstractxmlreceiver.html</anchorfile>
            <anchor>endOfSequence</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSimpleXmlNodeModel</name>
        <filename>qsimplexmlnodemodel.html</filename>
        <base>QAbstractXmlNodeModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSimpleXmlNodeModel</name>
            <anchorfile>qsimplexmlnodemodel.html</anchorfile>
            <anchor>QSimpleXmlNodeModel</anchor>
            <arglist>(const QXmlNamePool &amp;namePool)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSimpleXmlNodeModel</name>
            <anchorfile>qsimplexmlnodemodel.html</anchorfile>
            <anchor>dtor.QSimpleXmlNodeModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QUrl</type>
            <name>baseUri</name>
            <anchorfile>qsimplexmlnodemodel.html</anchorfile>
            <anchor>baseUri</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;node) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlNamePool &amp;</type>
            <name>namePool</name>
            <anchorfile>qsimplexmlnodemodel.html</anchorfile>
            <anchor>namePool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVector&lt;QXmlName&gt;</type>
            <name>namespaceBindings</name>
            <anchorfile>qsimplexmlnodemodel.html</anchorfile>
            <anchor>namespaceBindings</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;node) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>stringValue</name>
            <anchorfile>qsimplexmlnodemodel.html</anchorfile>
            <anchor>stringValue</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;node) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QXmlNodeModelIndex</type>
            <name>elementById</name>
            <anchorfile>qsimplexmlnodemodel.html</anchorfile>
            <anchor>elementById</anchor>
            <arglist>(const QXmlName &amp;id) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVector&lt;QXmlNodeModelIndex&gt;</type>
            <name>nodesByIdref</name>
            <anchorfile>qsimplexmlnodemodel.html</anchorfile>
            <anchor>nodesByIdref</anchor>
            <arglist>(const QXmlName &amp;idref) const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSourceLocation</name>
        <filename>qsourcelocation.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSourceLocation</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>QSourceLocation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSourceLocation</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>QSourceLocation-1</anchor>
            <arglist>(const QSourceLocation &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSourceLocation</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>QSourceLocation-2</anchor>
            <arglist>(const QUrl &amp;u, int l, int c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSourceLocation</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>dtor.QSourceLocation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSourceLocation &amp;</type>
            <name>operator=</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSourceLocation &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSourceLocation &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSourceLocation &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>column</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumn</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>setColumn</anchor>
            <arglist>(qint64 newColumn)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>line</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>line</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLine</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>setLine</anchor>
            <arglist>(qint64 newLine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>uri</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>uri</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUri</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>setUri</anchor>
            <arglist>(const QUrl &amp;newUri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDebug debug, const QSourceLocation &amp;sourceLocation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qsourcelocation.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(const QSourceLocation &amp;location)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlFormatter</name>
        <filename>qxmlformatter.html</filename>
        <base>QXmlSerializer</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlFormatter</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>QXmlFormatter</anchor>
            <arglist>(const QXmlQuery &amp;query, QIODevice *outputDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>characters</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>characters</anchor>
            <arglist>(const QStringRef &amp;value) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>comment</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>comment</anchor>
            <arglist>(const QString &amp;value) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>startElement</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>startElement</anchor>
            <arglist>(const QXmlName &amp;name) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>endElement</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>endElement</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>attribute</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(const QXmlName &amp;name, const QStringRef &amp;value) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>processingInstruction</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>processingInstruction</anchor>
            <arglist>(const QXmlName &amp;name, const QString &amp;value) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>atomicValue</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>atomicValue</anchor>
            <arglist>(const QVariant &amp;value) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>startDocument</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>startDocument</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>endDocument</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>endDocument</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>startOfSequence</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>startOfSequence</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>endOfSequence</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>endOfSequence</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indentationDepth</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>indentationDepth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndentationDepth</name>
            <anchorfile>qxmlformatter.html</anchorfile>
            <anchor>setIndentationDepth</anchor>
            <arglist>(int depth)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlItem</name>
        <filename>qxmlitem.html</filename>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qxmlitem.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlItem</name>
            <anchorfile>qxmlitem.html</anchorfile>
            <anchor>QXmlItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlItem</name>
            <anchorfile>qxmlitem.html</anchorfile>
            <anchor>QXmlItem-1</anchor>
            <arglist>(const QXmlItem &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlItem</name>
            <anchorfile>qxmlitem.html</anchorfile>
            <anchor>QXmlItem-2</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;node)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlItem</name>
            <anchorfile>qxmlitem.html</anchorfile>
            <anchor>QXmlItem-3</anchor>
            <arglist>(const QVariant &amp;atomicValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlItem</name>
            <anchorfile>qxmlitem.html</anchorfile>
            <anchor>dtor.QXmlItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlItem &amp;</type>
            <name>operator=</name>
            <anchorfile>qxmlitem.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QXmlItem &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qxmlitem.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNode</name>
            <anchorfile>qxmlitem.html</anchorfile>
            <anchor>isNode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAtomicValue</name>
            <anchorfile>qxmlitem.html</anchorfile>
            <anchor>isAtomicValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>toAtomicValue</name>
            <anchorfile>qxmlitem.html</anchorfile>
            <anchor>toAtomicValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlNodeModelIndex</type>
            <name>toNodeModelIndex</name>
            <anchorfile>qxmlitem.html</anchorfile>
            <anchor>toNodeModelIndex</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlName</name>
        <filename>qxmlname.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlName</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>QXmlName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlName</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>QXmlName-1</anchor>
            <arglist>(QXmlNamePool &amp;namePool, const QString &amp;localName, const QString &amp;namespaceURI, const QString &amp;prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>namespaceUri</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>namespaceUri</anchor>
            <arglist>(const QXmlNamePool &amp;namePool) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>prefix</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>prefix</anchor>
            <arglist>(const QXmlNamePool &amp;namePool) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>localName</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>localName</anchor>
            <arglist>(const QXmlNamePool &amp;namePool) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toClarkName</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>toClarkName</anchor>
            <arglist>(const QXmlNamePool &amp;namePool) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QXmlName &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QXmlName &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlName</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>QXmlName-2</anchor>
            <arglist>(const QXmlName &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlName &amp;</type>
            <name>operator=</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QXmlName &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isNCName</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>isNCName</anchor>
            <arglist>(const QString &amp;candidate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QXmlName</type>
            <name>fromClarkName</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>fromClarkName</anchor>
            <arglist>(const QString &amp;clarkName, const QXmlNamePool &amp;namePool)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qxmlname.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(const QXmlName &amp;name)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlNamePool</name>
        <filename>qxmlnamepool.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlNamePool</name>
            <anchorfile>qxmlnamepool.html</anchorfile>
            <anchor>QXmlNamePool</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlNamePool</name>
            <anchorfile>qxmlnamepool.html</anchorfile>
            <anchor>QXmlNamePool-1</anchor>
            <arglist>(const QXmlNamePool &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlNamePool</name>
            <anchorfile>qxmlnamepool.html</anchorfile>
            <anchor>dtor.QXmlNamePool</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlNamePool &amp;</type>
            <name>operator=</name>
            <anchorfile>qxmlnamepool.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QXmlNamePool &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlNodeModelIndex</name>
        <filename>qxmlnodemodelindex.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlNodeModelIndex</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>QXmlNodeModelIndex</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlNodeModelIndex</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>QXmlNodeModelIndex-1</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QXmlNodeModelIndex &amp;other) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>List</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>List-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>NodeKind</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>NodeKind-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Attribute</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>NodeKind-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Comment</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>NodeKind-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Document</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>NodeKind-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Element</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>NodeKind-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Namespace</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>NodeKind-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProcessingInstruction</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>NodeKind-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Text</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>NodeKind-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>DocumentOrder</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>DocumentOrder-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Precedes</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>DocumentOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Is</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>DocumentOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Follows</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>DocumentOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>data</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>internalPointer</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>internalPointer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QAbstractXmlNodeModel *</type>
            <name>model</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>additionalData</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>additionalData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qxmlnodemodelindex.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlQuery</name>
        <filename>qxmlquery.html</filename>
        <member kind="enumeration">
            <name>QueryLanguage</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>QueryLanguage-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>XQuery10</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>QueryLanguage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>XSLT20</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>QueryLanguage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>XmlSchema11IdentityConstraintSelector</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>QueryLanguage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>XmlSchema11IdentityConstraintField</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>QueryLanguage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>XPath20</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>QueryLanguage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlQuery</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>QXmlQuery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlQuery</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>QXmlQuery-1</anchor>
            <arglist>(const QXmlQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlQuery</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>QXmlQuery-2</anchor>
            <arglist>(const QXmlNamePool &amp;np)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlQuery</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>QXmlQuery-3</anchor>
            <arglist>(QXmlQuery::QueryLanguage queryLanguage, const QXmlNamePool &amp;np)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlQuery</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>dtor.QXmlQuery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlQuery &amp;</type>
            <name>operator=</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QXmlQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMessageHandler</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>setMessageHandler</anchor>
            <arglist>(QAbstractMessageHandler *aMessageHandler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractMessageHandler *</type>
            <name>messageHandler</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>messageHandler</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuery</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>setQuery-1</anchor>
            <arglist>(const QString &amp;sourceCode, const QUrl &amp;documentURI)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuery</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>setQuery</anchor>
            <arglist>(QIODevice *sourceCode, const QUrl &amp;documentURI)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuery</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>setQuery-2</anchor>
            <arglist>(const QUrl &amp;queryURI, const QUrl &amp;baseURI)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlNamePool</type>
            <name>namePool</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>namePool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindVariable</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>bindVariable</anchor>
            <arglist>(const QXmlName &amp;name, const QXmlItem &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindVariable</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>bindVariable-1</anchor>
            <arglist>(const QString &amp;localName, const QXmlItem &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindVariable</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>bindVariable-2</anchor>
            <arglist>(const QXmlName &amp;name, QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindVariable</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>bindVariable-3</anchor>
            <arglist>(const QString &amp;localName, QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindVariable</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>bindVariable-4</anchor>
            <arglist>(const QXmlName &amp;name, const QXmlQuery &amp;query)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindVariable</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>bindVariable-5</anchor>
            <arglist>(const QString &amp;localName, const QXmlQuery &amp;query)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>evaluateTo</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>evaluateTo</anchor>
            <arglist>(QXmlResultItems *result) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>evaluateTo</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>evaluateTo-1</anchor>
            <arglist>(QAbstractXmlReceiver *callback) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>evaluateTo</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>evaluateTo-2</anchor>
            <arglist>(QStringList *target) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>evaluateTo</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>evaluateTo-3</anchor>
            <arglist>(QIODevice *target) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>evaluateTo</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>evaluateTo-4</anchor>
            <arglist>(QString *output) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUriResolver</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>setUriResolver</anchor>
            <arglist>(const QAbstractUriResolver *resolver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QAbstractUriResolver *</type>
            <name>uriResolver</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>uriResolver</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocus</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>setFocus</anchor>
            <arglist>(const QXmlItem &amp;item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setFocus</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>setFocus-1</anchor>
            <arglist>(const QUrl &amp;documentURI)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setFocus</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>setFocus-2</anchor>
            <arglist>(QIODevice *document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setFocus</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>setFocus-3</anchor>
            <arglist>(const QString &amp;focus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInitialTemplateName</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>setInitialTemplateName</anchor>
            <arglist>(const QXmlName &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInitialTemplateName</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>setInitialTemplateName-1</anchor>
            <arglist>(const QString &amp;localName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlName</type>
            <name>initialTemplateName</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>initialTemplateName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNetworkAccessManager</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>setNetworkAccessManager</anchor>
            <arglist>(QNetworkAccessManager *newManager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAccessManager *</type>
            <name>networkAccessManager</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>networkAccessManager</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlQuery::QueryLanguage</type>
            <name>queryLanguage</name>
            <anchorfile>qxmlquery.html</anchorfile>
            <anchor>queryLanguage</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlResultItems</name>
        <filename>qxmlresultitems.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlResultItems</name>
            <anchorfile>qxmlresultitems.html</anchorfile>
            <anchor>QXmlResultItems</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QXmlResultItems</name>
            <anchorfile>qxmlresultitems.html</anchorfile>
            <anchor>dtor.QXmlResultItems</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasError</name>
            <anchorfile>qxmlresultitems.html</anchorfile>
            <anchor>hasError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlItem</type>
            <name>next</name>
            <anchorfile>qxmlresultitems.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlItem</type>
            <name>current</name>
            <anchorfile>qxmlresultitems.html</anchorfile>
            <anchor>current</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlSchema</name>
        <filename>qxmlschema.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlSchema</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>QXmlSchema</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlSchema</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>QXmlSchema-1</anchor>
            <arglist>(const QXmlSchema &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlSchema &amp;</type>
            <name>operator=</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QXmlSchema &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlSchema</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>dtor.QXmlSchema</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QUrl &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>load-1</anchor>
            <arglist>(QIODevice *source, const QUrl &amp;documentUri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>load-2</anchor>
            <arglist>(const QByteArray &amp;data, const QUrl &amp;documentUri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlNamePool</type>
            <name>namePool</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>namePool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>documentUri</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>documentUri</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMessageHandler</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>setMessageHandler</anchor>
            <arglist>(QAbstractMessageHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractMessageHandler *</type>
            <name>messageHandler</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>messageHandler</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUriResolver</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>setUriResolver</anchor>
            <arglist>(const QAbstractUriResolver *resolver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QAbstractUriResolver *</type>
            <name>uriResolver</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>uriResolver</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNetworkAccessManager</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>setNetworkAccessManager</anchor>
            <arglist>(QNetworkAccessManager *manager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAccessManager *</type>
            <name>networkAccessManager</name>
            <anchorfile>qxmlschema.html</anchorfile>
            <anchor>networkAccessManager</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlSchemaValidator</name>
        <filename>qxmlschemavalidator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlSchemaValidator</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>QXmlSchemaValidator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlSchemaValidator</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>QXmlSchemaValidator-1</anchor>
            <arglist>(const QXmlSchema &amp;schema)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlSchemaValidator</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>dtor.QXmlSchemaValidator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSchema</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>setSchema</anchor>
            <arglist>(const QXmlSchema &amp;schema)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>validate</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(const QUrl &amp;source) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>validate</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>validate-1</anchor>
            <arglist>(QIODevice *source, const QUrl &amp;documentUri) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>validate</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>validate-2</anchor>
            <arglist>(const QByteArray &amp;data, const QUrl &amp;documentUri) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlNamePool</type>
            <name>namePool</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>namePool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlSchema</type>
            <name>schema</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>schema</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMessageHandler</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>setMessageHandler</anchor>
            <arglist>(QAbstractMessageHandler *handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractMessageHandler *</type>
            <name>messageHandler</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>messageHandler</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUriResolver</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>setUriResolver</anchor>
            <arglist>(const QAbstractUriResolver *resolver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QAbstractUriResolver *</type>
            <name>uriResolver</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>uriResolver</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNetworkAccessManager</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>setNetworkAccessManager</anchor>
            <arglist>(QNetworkAccessManager *manager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAccessManager *</type>
            <name>networkAccessManager</name>
            <anchorfile>qxmlschemavalidator.html</anchorfile>
            <anchor>networkAccessManager</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlSerializer</name>
        <filename>qxmlserializer.html</filename>
        <base>QAbstractXmlReceiver</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlSerializer</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>QXmlSerializer</anchor>
            <arglist>(const QXmlQuery &amp;query, QIODevice *outputDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>namespaceBinding</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>namespaceBinding</anchor>
            <arglist>(const QXmlName &amp;nb) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>characters</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>characters</anchor>
            <arglist>(const QStringRef &amp;value) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>comment</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>comment</anchor>
            <arglist>(const QString &amp;value) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>startElement</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>startElement</anchor>
            <arglist>(const QXmlName &amp;name) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>endElement</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>endElement</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>attribute</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(const QXmlName &amp;name, const QStringRef &amp;value) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>processingInstruction</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>processingInstruction</anchor>
            <arglist>(const QXmlName &amp;name, const QString &amp;value) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>atomicValue</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>atomicValue</anchor>
            <arglist>(const QVariant &amp;value) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>startDocument</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>startDocument</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>endDocument</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>endDocument</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>startOfSequence</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>startOfSequence</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>endOfSequence</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>endOfSequence</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>outputDevice</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>outputDevice</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCodec</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>setCodec</anchor>
            <arglist>(const QTextCodec *outputCodec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTextCodec *</type>
            <name>codec</name>
            <anchorfile>qxmlserializer.html</anchorfile>
            <anchor>codec</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.XmlListModel.XmlListModel</name>
        <filename>qml-qtquick-xmllistmodel-xmllistmodel.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>object</type>
            <name>get</name>
            <anchorfile>qml-qtquick-xmllistmodel-xmllistmodel.html</anchorfile>
            <anchor>get-method</anchor>
            <arglist>( index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>errorString</name>
            <anchorfile>qml-qtquick-xmllistmodel-xmllistmodel.html</anchorfile>
            <anchor>errorString-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>reload</name>
            <anchorfile>qml-qtquick-xmllistmodel-xmllistmodel.html</anchorfile>
            <anchor>reload-method</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtQuick.XmlListModel.XmlRole</name>
        <filename>qml-qtquick-xmllistmodel-xmlrole.html</filename>
    </compound>
</tagfile>
