<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QAbstractNetworkCache</name>
        <filename>qabstractnetworkcache.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractNetworkCache</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>dtor.QAbstractNetworkCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QNetworkCacheMetaData</type>
            <name>metaData</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>(const QUrl &amp;url) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>updateMetaData</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>updateMetaData</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;metaData) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QIODevice *</type>
            <name>data</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QUrl &amp;url) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>remove</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QUrl &amp;url) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual qint64</type>
            <name>cacheSize</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>cacheSize</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QIODevice *</type>
            <name>prepare</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>prepare</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;metaData) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>insert</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(QIODevice *device) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>clear</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractNetworkCache</name>
            <anchorfile>qabstractnetworkcache.html</anchorfile>
            <anchor>QAbstractNetworkCache</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractSocket</name>
        <filename>qabstractsocket.html</filename>
        <base>QIODevice</base>
        <member kind="enumeration">
            <name>SocketType</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TcpSocket</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UdpSocket</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SctpSocket</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownSocketType</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>NetworkLayerProtocol</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>NetworkLayerProtocol-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>IPv4Protocol</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>NetworkLayerProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IPv6Protocol</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>NetworkLayerProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnyIPProtocol</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>NetworkLayerProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownNetworkLayerProtocol</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>NetworkLayerProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SocketError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ConnectionRefusedError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemoteHostClosedError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HostNotFoundError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SocketAccessError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SocketResourceError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SocketTimeoutError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DatagramTooLargeError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NetworkError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AddressInUseError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SocketAddressNotAvailableError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsupportedSocketOperationError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnfinishedSocketOperationError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProxyAuthenticationRequiredError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslHandshakeFailedError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProxyConnectionRefusedError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProxyConnectionClosedError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProxyConnectionTimeoutError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProxyNotFoundError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProxyProtocolError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OperationError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslInternalError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslInvalidUserDataError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TemporaryError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownSocketError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SocketState</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnconnectedState</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HostLookupState</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectingState</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectedState</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BoundState</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListeningState</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClosingState</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SocketOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LowDelayOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeepAliveOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MulticastTtlOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MulticastLoopbackOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TypeOfServiceOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SendBufferSizeSocketOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReceiveBufferSizeSocketOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PathMtuSocketOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>BindFlag</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DefaultForPlatform</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShareAddress</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DontShareAddress</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReuseAddressHint</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QAbstractSocket::BindFlag">
            <name>BindMode</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PauseMode</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>PauseMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PauseNever</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>PauseMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PauseOnSslErrors</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>PauseMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QAbstractSocket::PauseMode">
            <name>PauseModes</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>PauseMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractSocket</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>QAbstractSocket</anchor>
            <arglist>(QAbstractSocket::SocketType socketType, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractSocket</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>dtor.QAbstractSocket</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resume</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::PauseModes</type>
            <name>pauseMode</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>pauseMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPauseMode</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setPauseMode</anchor>
            <arglist>(QAbstractSocket::PauseModes pauseMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>(const QHostAddress &amp;address, quint16 port, QAbstractSocket::BindMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>bind-1</anchor>
            <arglist>(quint16 port, QAbstractSocket::BindMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>connectToHost</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>connectToHost</anchor>
            <arglist>(const QString &amp;hostName, quint16 port, QIODevice::OpenMode openMode, QAbstractSocket::NetworkLayerProtocol protocol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>connectToHost</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>connectToHost-1</anchor>
            <arglist>(const QHostAddress &amp;address, quint16 port, QIODevice::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>disconnectFromHost</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>disconnectFromHost</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesAvailable</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>bytesAvailable</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesToWrite</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>bytesToWrite</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canReadLine</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>canReadLine</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>localPort</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>localPort</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>localAddress</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>localAddress</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>peerPort</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>peerPort</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>peerAddress</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>peerAddress</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>peerName</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>peerName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>readBufferSize</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>readBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setReadBufferSize</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setReadBufferSize</anchor>
            <arglist>(qint64 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>abort</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qintptr</type>
            <name>socketDescriptor</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>socketDescriptor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setSocketDescriptor</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setSocketDescriptor</anchor>
            <arglist>(qintptr socketDescriptor, QAbstractSocket::SocketState socketState, QIODevice::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSocketOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setSocketOption</anchor>
            <arglist>(QAbstractSocket::SocketOption option, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>socketOption</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>socketOption</anchor>
            <arglist>(QAbstractSocket::SocketOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::SocketType</type>
            <name>socketType</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>socketType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::SocketState</type>
            <name>state</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::SocketError</type>
            <name>error</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isSequential</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>isSequential</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>atEnd</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>flush</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForConnected</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>waitForConnected</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForReadyRead</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>waitForReadyRead</anchor>
            <arglist>(int msecs) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForBytesWritten</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>waitForBytesWritten</anchor>
            <arglist>(int msecs) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForDisconnected</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>waitForDisconnected</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProxy</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setProxy</anchor>
            <arglist>(const QNetworkProxy &amp;networkProxy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy</type>
            <name>proxy</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>proxy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>protocolTag</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>protocolTag</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProtocolTag</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setProtocolTag</anchor>
            <arglist>(const QString &amp;tag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hostFound</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>hostFound</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connected</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>connected</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnected</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>disconnected</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QAbstractSocket::SocketState socketState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qabstractsocket-obsolete.html</anchorfile>
            <anchor>error-1</anchor>
            <arglist>(QAbstractSocket::SocketError socketError)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>errorOccurred</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>errorOccurred</anchor>
            <arglist>(QAbstractSocket::SocketError socketError)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>proxyAuthenticationRequired</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>proxyAuthenticationRequired</anchor>
            <arglist>(const QNetworkProxy &amp;proxy, QAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 maxSize) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readLineData</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>readLineData</anchor>
            <arglist>(char *data, qint64 maxlen) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 size) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSocketState</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setSocketState</anchor>
            <arglist>(QAbstractSocket::SocketState state)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSocketError</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setSocketError</anchor>
            <arglist>(QAbstractSocket::SocketError socketError)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalPort</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setLocalPort</anchor>
            <arglist>(quint16 port)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalAddress</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setLocalAddress</anchor>
            <arglist>(const QHostAddress &amp;address)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerPort</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setPeerPort</anchor>
            <arglist>(quint16 port)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerAddress</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setPeerAddress</anchor>
            <arglist>(const QHostAddress &amp;address)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerName</name>
            <anchorfile>qabstractsocket.html</anchorfile>
            <anchor>setPeerName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAuthenticator</name>
        <filename>qauthenticator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAuthenticator</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>QAuthenticator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAuthenticator</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>dtor.QAuthenticator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAuthenticator</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>QAuthenticator-1</anchor>
            <arglist>(const QAuthenticator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAuthenticator &amp;</type>
            <name>operator=</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QAuthenticator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QAuthenticator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QAuthenticator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>user</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>user</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUser</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>setUser</anchor>
            <arglist>(const QString &amp;user)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>password</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>password</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPassword</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>setPassword</anchor>
            <arglist>(const QString &amp;password)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>realm</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>realm</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>option</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>option</anchor>
            <arglist>(const QString &amp;opt) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantHash</type>
            <name>options</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>options</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(const QString &amp;opt, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qauthenticator.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDnsDomainNameRecord</name>
        <filename>qdnsdomainnamerecord.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsDomainNameRecord</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>QDnsDomainNameRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsDomainNameRecord</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>QDnsDomainNameRecord-1</anchor>
            <arglist>(const QDnsDomainNameRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDnsDomainNameRecord &amp;</type>
            <name>operator=</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDnsDomainNameRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDnsDomainNameRecord</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>dtor.QDnsDomainNameRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDnsDomainNameRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>timeToLive</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>timeToLive</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qdnsdomainnamerecord.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDnsHostAddressRecord</name>
        <filename>qdnshostaddressrecord.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsHostAddressRecord</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>QDnsHostAddressRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsHostAddressRecord</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>QDnsHostAddressRecord-1</anchor>
            <arglist>(const QDnsHostAddressRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDnsHostAddressRecord &amp;</type>
            <name>operator=</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDnsHostAddressRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDnsHostAddressRecord</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>dtor.QDnsHostAddressRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDnsHostAddressRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>timeToLive</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>timeToLive</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>value</name>
            <anchorfile>qdnshostaddressrecord.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDnsLookup</name>
        <filename>qdnslookup.html</filename>
        <base>QObject</base>
        <member kind="property" type="Error">
            <name>error</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>error-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>errorString</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>errorString-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Type">
            <name>type</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QHostAddress">
            <name>nameserver</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>nameserver-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Error</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Error-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ResolverError</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OperationCancelledError</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidRequestError</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidReplyError</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServerFailureError</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServerRefusedError</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotFoundError</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>A</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AAAA</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ANY</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CNAME</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MX</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NS</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PTR</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRV</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TXT</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsLookup</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>QDnsLookup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsLookup</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>QDnsLookup-1</anchor>
            <arglist>(QDnsLookup::Type type, const QString &amp;name, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsLookup</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>QDnsLookup-2</anchor>
            <arglist>(QDnsLookup::Type type, const QString &amp;name, const QHostAddress &amp;nameserver, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDnsLookup</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>dtor.QDnsLookup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDnsLookup::Error</type>
            <name>error</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>error-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>errorString-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDnsLookup::Type</type>
            <name>type</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>(QDnsLookup::Type )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>nameserver</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>nameserver-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNameserver</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>nameserver-prop</anchor>
            <arglist>(const QHostAddress &amp;nameserver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsDomainNameRecord&gt;</type>
            <name>canonicalNameRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>canonicalNameRecords</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsHostAddressRecord&gt;</type>
            <name>hostAddressRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>hostAddressRecords</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsMailExchangeRecord&gt;</type>
            <name>mailExchangeRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>mailExchangeRecords</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsDomainNameRecord&gt;</type>
            <name>nameServerRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>nameServerRecords</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsDomainNameRecord&gt;</type>
            <name>pointerRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>pointerRecords</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsServiceRecord&gt;</type>
            <name>serviceRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>serviceRecords</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QDnsTextRecord&gt;</type>
            <name>textRecords</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>textRecords</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>abort</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lookup</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>lookup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameChanged</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>nameChanged</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>typeChanged</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>typeChanged</anchor>
            <arglist>(QDnsLookup::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nameserverChanged</name>
            <anchorfile>qdnslookup.html</anchorfile>
            <anchor>nameserver-prop</anchor>
            <arglist>(const QHostAddress &amp;nameserver)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDnsMailExchangeRecord</name>
        <filename>qdnsmailexchangerecord.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsMailExchangeRecord</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>QDnsMailExchangeRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsMailExchangeRecord</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>QDnsMailExchangeRecord-1</anchor>
            <arglist>(const QDnsMailExchangeRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDnsMailExchangeRecord &amp;</type>
            <name>operator=</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDnsMailExchangeRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDnsMailExchangeRecord</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>dtor.QDnsMailExchangeRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDnsMailExchangeRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>exchange</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>exchange</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>preference</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>preference</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>timeToLive</name>
            <anchorfile>qdnsmailexchangerecord.html</anchorfile>
            <anchor>timeToLive</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDnsServiceRecord</name>
        <filename>qdnsservicerecord.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsServiceRecord</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>QDnsServiceRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsServiceRecord</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>QDnsServiceRecord-1</anchor>
            <arglist>(const QDnsServiceRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDnsServiceRecord &amp;</type>
            <name>operator=</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDnsServiceRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDnsServiceRecord</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>dtor.QDnsServiceRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDnsServiceRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>port</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>port</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>priority</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>priority</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>target</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>timeToLive</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>timeToLive</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>weight</name>
            <anchorfile>qdnsservicerecord.html</anchorfile>
            <anchor>weight</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDnsTextRecord</name>
        <filename>qdnstextrecord.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsTextRecord</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>QDnsTextRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDnsTextRecord</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>QDnsTextRecord-1</anchor>
            <arglist>(const QDnsTextRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDnsTextRecord &amp;</type>
            <name>operator=</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDnsTextRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDnsTextRecord</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>dtor.QDnsTextRecord</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDnsTextRecord &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>timeToLive</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>timeToLive</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>values</name>
            <anchorfile>qdnstextrecord.html</anchorfile>
            <anchor>values</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDtls</name>
        <filename>qdtls.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>HandshakeState</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>HandshakeState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>HandshakeNotStarted</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>HandshakeState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HandshakeInProgress</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>HandshakeState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PeerVerificationFailed</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>HandshakeState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HandshakeComplete</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>HandshakeState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDtls</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>QDtls</anchor>
            <arglist>(QSslSocket::SslMode mode, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDtls</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>dtor.QDtls</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPeer</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>setPeer</anchor>
            <arglist>(const QHostAddress &amp;address, quint16 port, const QString &amp;verificationName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPeerVerificationName</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>setPeerVerificationName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>peerAddress</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>peerAddress</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>peerPort</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>peerPort</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>peerVerificationName</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>peerVerificationName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslSocket::SslMode</type>
            <name>sslMode</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>sslMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMtuHint</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>setMtuHint</anchor>
            <arglist>(quint16 mtuHint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>mtuHint</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>mtuHint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>GeneratorParameters</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>GeneratorParameters-alias</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setCookieGeneratorParameters</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>setCookieGeneratorParameters</anchor>
            <arglist>(const QDtls::GeneratorParameters &amp;params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDtls::GeneratorParameters</type>
            <name>cookieGeneratorParameters</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>cookieGeneratorParameters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setDtlsConfiguration</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>setDtlsConfiguration</anchor>
            <arglist>(const QSslConfiguration &amp;configuration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslConfiguration</type>
            <name>dtlsConfiguration</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>dtlsConfiguration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDtls::HandshakeState</type>
            <name>handshakeState</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>handshakeState</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>doHandshake</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>doHandshake</anchor>
            <arglist>(QUdpSocket *socket, const QByteArray &amp;dgram)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>handleTimeout</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>handleTimeout</anchor>
            <arglist>(QUdpSocket *socket)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>resumeHandshake</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>resumeHandshake</anchor>
            <arglist>(QUdpSocket *socket)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>abortHandshake</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>abortHandshake</anchor>
            <arglist>(QUdpSocket *socket)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>shutdown</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>shutdown</anchor>
            <arglist>(QUdpSocket *socket)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isConnectionEncrypted</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>isConnectionEncrypted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCipher</type>
            <name>sessionCipher</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>sessionCipher</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::SslProtocol</type>
            <name>sessionProtocol</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>sessionProtocol</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>writeDatagramEncrypted</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>writeDatagramEncrypted</anchor>
            <arglist>(QUdpSocket *socket, const QByteArray &amp;dgram)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>decryptDatagram</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>decryptDatagram</anchor>
            <arglist>(QUdpSocket *socket, const QByteArray &amp;dgram)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDtlsError</type>
            <name>dtlsError</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>dtlsError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>dtlsErrorString</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>dtlsErrorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QSslError&gt;</type>
            <name>peerVerificationErrors</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>peerVerificationErrors</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignoreVerificationErrors</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>ignoreVerificationErrors</anchor>
            <arglist>(const QVector&lt;QSslError&gt; &amp;errorsToIgnore)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pskRequired</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>pskRequired</anchor>
            <arglist>(QSslPreSharedKeyAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>handshakeTimeout</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>handshakeTimeout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>QDtlsError</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>QDtlsError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>QDtlsError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidInputParameters</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>QDtlsError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidOperation</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>QDtlsError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnderlyingSocketError</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>QDtlsError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemoteClosedConnectionError</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>QDtlsError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PeerVerificationError</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>QDtlsError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsInitializationError</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>QDtlsError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsFatalError</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>QDtlsError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsNonFatalError</name>
            <anchorfile>qdtls.html</anchorfile>
            <anchor>QDtlsError-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDtlsClientVerifier</name>
        <filename>qdtlsclientverifier.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDtlsClientVerifier</name>
            <anchorfile>qdtlsclientverifier.html</anchorfile>
            <anchor>QDtlsClientVerifier</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QDtlsClientVerifier</name>
            <anchorfile>qdtlsclientverifier.html</anchorfile>
            <anchor>dtor.QDtlsClientVerifier</anchor>
            <arglist>()</arglist>
        </member>
        <class>QDtlsClientVerifier::GeneratorParameters</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setCookieGeneratorParameters</name>
            <anchorfile>qdtlsclientverifier.html</anchorfile>
            <anchor>setCookieGeneratorParameters</anchor>
            <arglist>(const QDtlsClientVerifier::GeneratorParameters &amp;params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDtlsClientVerifier::GeneratorParameters</type>
            <name>cookieGeneratorParameters</name>
            <anchorfile>qdtlsclientverifier.html</anchorfile>
            <anchor>cookieGeneratorParameters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>verifyClient</name>
            <anchorfile>qdtlsclientverifier.html</anchorfile>
            <anchor>verifyClient</anchor>
            <arglist>(QUdpSocket *socket, const QByteArray &amp;dgram, const QHostAddress &amp;address, quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>verifiedHello</name>
            <anchorfile>qdtlsclientverifier.html</anchorfile>
            <anchor>verifiedHello</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDtlsError</type>
            <name>dtlsError</name>
            <anchorfile>qdtlsclientverifier.html</anchorfile>
            <anchor>dtlsError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>dtlsErrorString</name>
            <anchorfile>qdtlsclientverifier.html</anchorfile>
            <anchor>dtlsErrorString</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDtlsClientVerifier::GeneratorParameters</name>
        <filename>qdtlsclientverifier-generatorparameters.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>GeneratorParameters</name>
            <anchorfile>qdtlsclientverifier-generatorparameters.html</anchorfile>
            <anchor>GeneratorParameters</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>GeneratorParameters</name>
            <anchorfile>qdtlsclientverifier-generatorparameters.html</anchorfile>
            <anchor>GeneratorParameters-1</anchor>
            <arglist>(QCryptographicHash::Algorithm algorithm, const QByteArray &amp;secret)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHostAddress</name>
        <filename>qhostaddress.html</filename>
        <member kind="enumeration">
            <name>SpecialAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>SpecialAddress-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Null</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Broadcast</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LocalHost</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LocalHostIPv6</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Any</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnyIPv6</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnyIPv4</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>SpecialAddress-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ConversionModeFlag</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>ConversionModeFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ConvertV4MappedToIPv4</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>ConversionModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConvertV4CompatToIPv4</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>ConversionModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConvertUnspecifiedAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>ConversionModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConvertLocalHost</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>ConversionModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TolerantConversion</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>ConversionModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StrictConversion</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>ConversionModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QHostAddress::ConversionModeFlag">
            <name>ConversionMode</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>ConversionModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-1</anchor>
            <arglist>(quint32 ip4Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-2</anchor>
            <arglist>(quint8 *ip6Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-3</anchor>
            <arglist>(const quint8 *ip6Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-4</anchor>
            <arglist>(const Q_IPV6ADDR &amp;ip6Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-5</anchor>
            <arglist>(const sockaddr *sockaddr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-6</anchor>
            <arglist>(const QString &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-7</anchor>
            <arglist>(const QHostAddress &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>QHostAddress-8</anchor>
            <arglist>(QHostAddress::SpecialAddress address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHostAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>dtor.QHostAddress</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress &amp;</type>
            <name>operator=</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QHostAddress &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress &amp;</type>
            <name>operator=</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QString &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress &amp;</type>
            <name>operator=</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-eq-3</anchor>
            <arglist>(QHostAddress::SpecialAddress address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QHostAddress &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress</anchor>
            <arglist>(quint32 ip4Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress-1</anchor>
            <arglist>(quint8 *ip6Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress-2</anchor>
            <arglist>(const quint8 *ip6Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress-3</anchor>
            <arglist>(const Q_IPV6ADDR &amp;ip6Addr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress-4</anchor>
            <arglist>(const sockaddr *sockaddr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress-5</anchor>
            <arglist>(const QString &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setAddress-6</anchor>
            <arglist>(QHostAddress::SpecialAddress address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::NetworkLayerProtocol</type>
            <name>protocol</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>protocol</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>toIPv4Address</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>toIPv4Address</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>toIPv4Address</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>toIPv4Address-1</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Q_IPV6ADDR</type>
            <name>toIPv6Address</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>toIPv6Address</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>scopeId</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>scopeId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScopeId</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>setScopeId</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEqual</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isEqual</anchor>
            <arglist>(const QHostAddress &amp;other, QHostAddress::ConversionMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QHostAddress &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(QHostAddress::SpecialAddress other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QHostAddress &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(QHostAddress::SpecialAddress other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInSubnet</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isInSubnet</anchor>
            <arglist>(const QHostAddress &amp;subnet, int netmask) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInSubnet</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isInSubnet-1</anchor>
            <arglist>(const QPair&lt;QHostAddress, int&gt; &amp;subnet) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLoopback</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isLoopback</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isGlobal</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isGlobal</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLinkLocal</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isLinkLocal</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSiteLocal</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isSiteLocal</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUniqueLocalUnicast</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isUniqueLocalUnicast</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMulticast</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isMulticast</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBroadcast</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>isBroadcast</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPair&lt;QHostAddress, int&gt;</type>
            <name>parseSubnet</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>parseSubnet</anchor>
            <arglist>(const QString &amp;subnet)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(const QHostAddress &amp;key, uint seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(QHostAddress::SpecialAddress lhs, const QHostAddress &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(QHostAddress::SpecialAddress lhs, const QHostAddress &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;out, const QHostAddress &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qhostaddress.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;in, QHostAddress &amp;address)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHostInfo</name>
        <filename>qhostinfo.html</filename>
        <member kind="enumeration">
            <name>HostInfoError</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>HostInfoError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>HostInfoError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HostNotFound</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>HostInfoError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownError</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>HostInfoError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostInfo</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>QHostInfo</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostInfo</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>QHostInfo-1</anchor>
            <arglist>(const QHostInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHostInfo</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>QHostInfo-2</anchor>
            <arglist>(QHostInfo &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QHostInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QHostInfo &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHostInfo</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>dtor.QHostInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QHostInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>hostName</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>hostName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHostName</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>setHostName</anchor>
            <arglist>(const QString &amp;hostName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QHostAddress&gt;</type>
            <name>addresses</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>addresses</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddresses</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>setAddresses</anchor>
            <arglist>(const QList&lt;QHostAddress&gt; &amp;addresses)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostInfo::HostInfoError</type>
            <name>error</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(QHostInfo::HostInfoError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setErrorString</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>setErrorString</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLookupId</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>setLookupId</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lookupId</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>lookupId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>lookupHost</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>lookupHost</anchor>
            <arglist>(const QString &amp;name, QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>abortHostLookup</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>abortHostLookup</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QHostInfo</type>
            <name>fromName</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>fromName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>localHostName</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>localHostName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>localDomainName</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>localDomainName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>lookupHost</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>lookupHost-1</anchor>
            <arglist>(const QString &amp;name, Functor functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>lookupHost</name>
            <anchorfile>qhostinfo.html</anchorfile>
            <anchor>lookupHost-2</anchor>
            <arglist>(const QString &amp;name, const QObject *context, Functor functor)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHstsPolicy</name>
        <filename>qhstspolicy.html</filename>
        <member kind="enumeration">
            <name>PolicyFlag</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>PolicyFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>IncludeSubDomains</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>PolicyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QHstsPolicy::PolicyFlag">
            <name>PolicyFlags</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>PolicyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHstsPolicy</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>QHstsPolicy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHstsPolicy</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>QHstsPolicy-1</anchor>
            <arglist>(const QDateTime &amp;expiry, QHstsPolicy::PolicyFlags flags, const QString &amp;host, QUrl::ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHstsPolicy</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>QHstsPolicy-2</anchor>
            <arglist>(const QHstsPolicy &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHstsPolicy &amp;</type>
            <name>operator=</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QHstsPolicy &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHstsPolicy</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>dtor.QHstsPolicy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QHstsPolicy &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHost</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>setHost</anchor>
            <arglist>(const QString &amp;host, QUrl::ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>host</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>host</anchor>
            <arglist>(QUrl::ComponentFormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpiry</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>setExpiry</anchor>
            <arglist>(const QDateTime &amp;expiry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>expiry</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>expiry</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIncludesSubDomains</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>setIncludesSubDomains</anchor>
            <arglist>(bool include)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>includesSubDomains</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>includesSubDomains</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isExpired</name>
            <anchorfile>qhstspolicy.html</anchorfile>
            <anchor>isExpired</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHttp2Configuration</name>
        <filename>qhttp2configuration.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHttp2Configuration</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>QHttp2Configuration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHttp2Configuration</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>QHttp2Configuration-1</anchor>
            <arglist>(const QHttp2Configuration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHttp2Configuration</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>QHttp2Configuration-2</anchor>
            <arglist>(QHttp2Configuration &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHttp2Configuration &amp;</type>
            <name>operator=</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QHttp2Configuration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHttp2Configuration &amp;</type>
            <name>operator=</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QHttp2Configuration &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHttp2Configuration</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>dtor.QHttp2Configuration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setServerPushEnabled</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>setServerPushEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>serverPushEnabled</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>serverPushEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHuffmanCompressionEnabled</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>setHuffmanCompressionEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>huffmanCompressionEnabled</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>huffmanCompressionEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setSessionReceiveWindowSize</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>setSessionReceiveWindowSize</anchor>
            <arglist>(unsigned int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>unsigned int</type>
            <name>sessionReceiveWindowSize</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>sessionReceiveWindowSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setStreamReceiveWindowSize</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>setStreamReceiveWindowSize</anchor>
            <arglist>(unsigned int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>unsigned int</type>
            <name>streamReceiveWindowSize</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>streamReceiveWindowSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setMaxFrameSize</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>setMaxFrameSize</anchor>
            <arglist>(unsigned int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>unsigned int</type>
            <name>maxFrameSize</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>maxFrameSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qhttp2configuration.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QHttp2Configuration &amp;other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHttpMultiPart</name>
        <filename>qhttpmultipart.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>ContentType</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>ContentType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MixedType</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>ContentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RelatedType</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>ContentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FormDataType</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>ContentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlternativeType</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>ContentType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHttpMultiPart</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>QHttpMultiPart</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHttpMultiPart</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>QHttpMultiPart-1</anchor>
            <arglist>(QHttpMultiPart::ContentType contentType, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QHttpMultiPart</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>dtor.QHttpMultiPart</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QHttpPart &amp;httpPart)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentType</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>setContentType</anchor>
            <arglist>(QHttpMultiPart::ContentType contentType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>boundary</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>boundary</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBoundary</name>
            <anchorfile>qhttpmultipart.html</anchorfile>
            <anchor>setBoundary</anchor>
            <arglist>(const QByteArray &amp;boundary)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHttpPart</name>
        <filename>qhttppart.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHttpPart</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>QHttpPart</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHttpPart</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>QHttpPart-1</anchor>
            <arglist>(const QHttpPart &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHttpPart</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>dtor.QHttpPart</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHttpPart &amp;</type>
            <name>operator=</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QHttpPart &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QHttpPart &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QHttpPart &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QHttpPart &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeader</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>setHeader</anchor>
            <arglist>(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawHeader</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>setRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName, const QByteArray &amp;headerValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBody</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>setBody</anchor>
            <arglist>(const QByteArray &amp;body)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBodyDevice</name>
            <anchorfile>qhttppart.html</anchorfile>
            <anchor>setBodyDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIPv6Address</name>
        <filename>qipv6address.html</filename>
    </compound>
    <compound kind="class">
        <name>QLocalServer</name>
        <filename>qlocalserver.html</filename>
        <base>QObject</base>
        <member kind="property" type="SocketOptions">
            <name>socketOptions</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>socketOptions-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>newConnection</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>newConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>SocketOption</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoOptions</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserAccessOption</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GroupAccessOption</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OtherAccessOption</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WorldAccessOption</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QLocalServer::SocketOption">
            <name>SocketOptions</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>SocketOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocalServer</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>QLocalServer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLocalServer</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>dtor.QLocalServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>close</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasPendingConnections</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>hasPendingConnections</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isListening</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>isListening</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>listen</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>listen</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>listen</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>listen-1</anchor>
            <arglist>(qintptr socketDescriptor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxPendingConnections</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>maxPendingConnections</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QLocalSocket *</type>
            <name>nextPendingConnection</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>nextPendingConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>serverName</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>serverName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fullServerName</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>fullServerName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>removeServer</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>removeServer</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::SocketError</type>
            <name>serverError</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>serverError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxPendingConnections</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>setMaxPendingConnections</anchor>
            <arglist>(int numConnections)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForNewConnection</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>waitForNewConnection</anchor>
            <arglist>(int msec, bool *timedOut)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSocketOptions</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>socketOptions-prop</anchor>
            <arglist>(QLocalServer::SocketOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocalServer::SocketOptions</type>
            <name>socketOptions</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>socketOptions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qintptr</type>
            <name>socketDescriptor</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>socketDescriptor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>incomingConnection</name>
            <anchorfile>qlocalserver.html</anchorfile>
            <anchor>incomingConnection</anchor>
            <arglist>(quintptr socketDescriptor)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLocalSocket</name>
        <filename>qlocalsocket.html</filename>
        <base>QIODevice</base>
        <member kind="enumeration">
            <name>LocalSocketError</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ConnectionRefusedError</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PeerClosedError</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServerNotFoundError</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SocketAccessError</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SocketResourceError</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SocketTimeoutError</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DatagramTooLargeError</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectionError</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsupportedSocketOperationError</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownSocketError</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OperationError</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>LocalSocketState</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnconnectedState</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectingState</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectedState</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClosingState</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>LocalSocketState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocalSocket</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>QLocalSocket</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLocalSocket</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>dtor.QLocalSocket</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToServer</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>connectToServer</anchor>
            <arglist>(QIODevice::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToServer</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>connectToServer-1</anchor>
            <arglist>(const QString &amp;name, QIODevice::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnectFromServer</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>disconnectFromServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setServerName</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>setServerName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>serverName</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>serverName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fullServerName</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>fullServerName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>abort</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isSequential</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>isSequential</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesAvailable</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>bytesAvailable</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesToWrite</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>bytesToWrite</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canReadLine</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>canReadLine</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(QIODevice::OpenMode openMode) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocalSocket::LocalSocketError</type>
            <name>error</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>flush</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>readBufferSize</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>readBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadBufferSize</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>setReadBufferSize</anchor>
            <arglist>(qint64 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setSocketDescriptor</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>setSocketDescriptor</anchor>
            <arglist>(qintptr socketDescriptor, QLocalSocket::LocalSocketState socketState, QIODevice::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qintptr</type>
            <name>socketDescriptor</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>socketDescriptor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocalSocket::LocalSocketState</type>
            <name>state</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForBytesWritten</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>waitForBytesWritten</anchor>
            <arglist>(int msecs) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForConnected</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>waitForConnected</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForDisconnected</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>waitForDisconnected</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForReadyRead</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>waitForReadyRead</anchor>
            <arglist>(int msecs) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connected</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>connected</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disconnected</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>disconnected</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qlocalsocket-obsolete.html</anchorfile>
            <anchor>error-1</anchor>
            <arglist>(QLocalSocket::LocalSocketError socketError)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>errorOccurred</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>errorOccurred</anchor>
            <arglist>(QLocalSocket::LocalSocketError socketError)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QLocalSocket::LocalSocketState socketState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 c) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qlocalsocket.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 c) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaTypeId</name>
        <filename>qmetatypeid.html</filename>
    </compound>
    <compound kind="class">
        <name>QNetworkAccessManager</name>
        <filename>qnetworkaccessmanager.html</filename>
        <base>QObject</base>
        <member kind="property" type="NetworkAccessibility">
            <name>networkAccessible</name>
            <anchorfile>qnetworkaccessmanager-obsolete.html</anchorfile>
            <anchor>networkAccessible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Operation</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>Operation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>HeadOperation</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GetOperation</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PutOperation</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PostOperation</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeleteOperation</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomOperation</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownOperation</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>Operation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>NetworkAccessibility</name>
            <anchorfile>qnetworkaccessmanager-obsolete.html</anchorfile>
            <anchor>NetworkAccessibility-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownAccessibility</name>
            <anchorfile>qnetworkaccessmanager-obsolete.html</anchorfile>
            <anchor>NetworkAccessibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotAccessible</name>
            <anchorfile>qnetworkaccessmanager-obsolete.html</anchorfile>
            <anchor>NetworkAccessibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Accessible</name>
            <anchorfile>qnetworkaccessmanager-obsolete.html</anchorfile>
            <anchor>NetworkAccessibility-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkAccessManager</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>QNetworkAccessManager</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkAccessManager</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>dtor.QNetworkAccessManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>supportedSchemes</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>supportedSchemes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearAccessCache</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>clearAccessCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearConnectionCache</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>clearConnectionCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy</type>
            <name>proxy</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>proxy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProxy</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setProxy</anchor>
            <arglist>(const QNetworkProxy &amp;proxy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxyFactory *</type>
            <name>proxyFactory</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>proxyFactory</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProxyFactory</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setProxyFactory</anchor>
            <arglist>(QNetworkProxyFactory *factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractNetworkCache *</type>
            <name>cache</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>cache</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCache</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setCache</anchor>
            <arglist>(QAbstractNetworkCache *cache)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkCookieJar *</type>
            <name>cookieJar</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>cookieJar</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCookieJar</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setCookieJar</anchor>
            <arglist>(QNetworkCookieJar *cookieJar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStrictTransportSecurityEnabled</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setStrictTransportSecurityEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStrictTransportSecurityEnabled</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>isStrictTransportSecurityEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableStrictTransportSecurityStore</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>enableStrictTransportSecurityStore</anchor>
            <arglist>(bool enabled, const QString &amp;storeDir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStrictTransportSecurityStoreEnabled</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>isStrictTransportSecurityStoreEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addStrictTransportSecurityHosts</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>addStrictTransportSecurityHosts</anchor>
            <arglist>(const QVector&lt;QHstsPolicy&gt; &amp;knownHosts)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QHstsPolicy&gt;</type>
            <name>strictTransportSecurityHosts</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>strictTransportSecurityHosts</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>head</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>head</anchor>
            <arglist>(const QNetworkRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>get</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(const QNetworkRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>post</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>post</anchor>
            <arglist>(const QNetworkRequest &amp;request, QIODevice *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>post</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>post-1</anchor>
            <arglist>(const QNetworkRequest &amp;request, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>put</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>put</anchor>
            <arglist>(const QNetworkRequest &amp;request, QIODevice *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>put</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>put-1</anchor>
            <arglist>(const QNetworkRequest &amp;request, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>deleteResource</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>deleteResource</anchor>
            <arglist>(const QNetworkRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>sendCustomRequest</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>sendCustomRequest</anchor>
            <arglist>(const QNetworkRequest &amp;request, const QByteArray &amp;verb, QIODevice *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>sendCustomRequest</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>sendCustomRequest-1</anchor>
            <arglist>(const QNetworkRequest &amp;request, const QByteArray &amp;verb, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>post</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>post-2</anchor>
            <arglist>(const QNetworkRequest &amp;request, QHttpMultiPart *multiPart)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>put</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>put-2</anchor>
            <arglist>(const QNetworkRequest &amp;request, QHttpMultiPart *multiPart)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply *</type>
            <name>sendCustomRequest</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>sendCustomRequest-2</anchor>
            <arglist>(const QNetworkRequest &amp;request, const QByteArray &amp;verb, QHttpMultiPart *multiPart)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setConfiguration</name>
            <anchorfile>qnetworkaccessmanager-obsolete.html</anchorfile>
            <anchor>setConfiguration</anchor>
            <arglist>(const QNetworkConfiguration &amp;config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>configuration</name>
            <anchorfile>qnetworkaccessmanager-obsolete.html</anchorfile>
            <anchor>configuration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>activeConfiguration</name>
            <anchorfile>qnetworkaccessmanager-obsolete.html</anchorfile>
            <anchor>activeConfiguration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNetworkAccessible</name>
            <anchorfile>qnetworkaccessmanager-obsolete.html</anchorfile>
            <anchor>setNetworkAccessible</anchor>
            <arglist>(QNetworkAccessManager::NetworkAccessibility accessible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAccessManager::NetworkAccessibility</type>
            <name>networkAccessible</name>
            <anchorfile>qnetworkaccessmanager-obsolete.html</anchorfile>
            <anchor>networkAccessible</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToHostEncrypted</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>connectToHostEncrypted</anchor>
            <arglist>(const QString &amp;hostName, quint16 port, const QSslConfiguration &amp;sslConfiguration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToHostEncrypted</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>connectToHostEncrypted-1</anchor>
            <arglist>(const QString &amp;hostName, quint16 port, const QSslConfiguration &amp;sslConfiguration, const QString &amp;peerName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToHost</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>connectToHost</anchor>
            <arglist>(const QString &amp;hostName, quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRedirectPolicy</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setRedirectPolicy</anchor>
            <arglist>(QNetworkRequest::RedirectPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkRequest::RedirectPolicy</type>
            <name>redirectPolicy</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>redirectPolicy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoDeleteReplies</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>autoDeleteReplies</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoDeleteReplies</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setAutoDeleteReplies</anchor>
            <arglist>(bool shouldAutoDelete)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>transferTimeout</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>transferTimeout</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransferTimeout</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>setTransferTimeout</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>proxyAuthenticationRequired</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>proxyAuthenticationRequired</anchor>
            <arglist>(const QNetworkProxy &amp;proxy, QAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>authenticationRequired</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>authenticationRequired</anchor>
            <arglist>(QNetworkReply *reply, QAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QNetworkReply *reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>encrypted</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>encrypted</anchor>
            <arglist>(QNetworkReply *reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sslErrors</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>sslErrors</anchor>
            <arglist>(QNetworkReply *reply, const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>preSharedKeyAuthenticationRequired</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>preSharedKeyAuthenticationRequired</anchor>
            <arglist>(QNetworkReply *reply, QSslPreSharedKeyAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>networkAccessibleChanged</name>
            <anchorfile>qnetworkaccessmanager-obsolete.html</anchorfile>
            <anchor>networkAccessibleChanged</anchor>
            <arglist>(QNetworkAccessManager::NetworkAccessibility accessible)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QNetworkReply *</type>
            <name>createRequest</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>createRequest</anchor>
            <arglist>(QNetworkAccessManager::Operation op, const QNetworkRequest &amp;originalReq, QIODevice *outgoingData)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QStringList</type>
            <name>supportedSchemesImplementation</name>
            <anchorfile>qnetworkaccessmanager.html</anchorfile>
            <anchor>supportedSchemesImplementation</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkAddressEntry</name>
        <filename>qnetworkaddressentry.html</filename>
        <member kind="enumeration">
            <name>DnsEligibilityStatus</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>DnsEligibilityStatus-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DnsEligibilityUnknown</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>DnsEligibilityStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DnsIneligible</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>DnsEligibilityStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DnsEligible</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>DnsEligibilityStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkAddressEntry</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>QNetworkAddressEntry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkAddressEntry</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>QNetworkAddressEntry-1</anchor>
            <arglist>(const QNetworkAddressEntry &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAddressEntry &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QNetworkAddressEntry &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkAddressEntry</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>dtor.QNetworkAddressEntry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkAddressEntry &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkAddressEntry &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkAddressEntry &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAddressEntry::DnsEligibilityStatus</type>
            <name>dnsEligibility</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>dnsEligibility</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDnsEligibility</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>setDnsEligibility</anchor>
            <arglist>(QNetworkAddressEntry::DnsEligibilityStatus status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>ip</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>ip</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIp</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>setIp</anchor>
            <arglist>(const QHostAddress &amp;newIp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>netmask</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>netmask</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNetmask</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>setNetmask</anchor>
            <arglist>(const QHostAddress &amp;newNetmask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>prefixLength</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>prefixLength</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrefixLength</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>setPrefixLength</anchor>
            <arglist>(int length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>broadcast</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>broadcast</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBroadcast</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>setBroadcast</anchor>
            <arglist>(const QHostAddress &amp;newBroadcast)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLifetimeKnown</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>isLifetimeKnown</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDeadlineTimer</type>
            <name>preferredLifetime</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>preferredLifetime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDeadlineTimer</type>
            <name>validityLifetime</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>validityLifetime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddressLifetime</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>setAddressLifetime</anchor>
            <arglist>(QDeadlineTimer preferred, QDeadlineTimer validity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearAddressLifetime</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>clearAddressLifetime</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPermanent</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>isPermanent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTemporary</name>
            <anchorfile>qnetworkaddressentry.html</anchorfile>
            <anchor>isTemporary</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkCacheMetaData</name>
        <filename>qnetworkcachemetadata.html</filename>
        <member kind="typedef" type="">
            <name>RawHeader</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>RawHeader-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>RawHeaderList</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>RawHeaderList-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>AttributesMap</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>AttributesMap-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkCacheMetaData</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>QNetworkCacheMetaData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkCacheMetaData</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>QNetworkCacheMetaData-1</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkCacheMetaData</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>dtor.QNetworkCacheMetaData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkCacheMetaData &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkCacheMetaData &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkCacheMetaData::RawHeaderList</type>
            <name>rawHeaders</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>rawHeaders</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawHeaders</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>setRawHeaders</anchor>
            <arglist>(const QNetworkCacheMetaData::RawHeaderList &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>lastModified</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>lastModified</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLastModified</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>setLastModified</anchor>
            <arglist>(const QDateTime &amp;dateTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>expirationDate</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>expirationDate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpirationDate</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>setExpirationDate</anchor>
            <arglist>(const QDateTime &amp;dateTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveToDisk</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>saveToDisk</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSaveToDisk</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>setSaveToDisk</anchor>
            <arglist>(bool allow)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkCacheMetaData::AttributesMap</type>
            <name>attributes</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributes</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>setAttributes</anchor>
            <arglist>(const QNetworkCacheMetaData::AttributesMap &amp;attributes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;out, const QNetworkCacheMetaData &amp;metaData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qnetworkcachemetadata.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;in, QNetworkCacheMetaData &amp;metaData)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkConfiguration</name>
        <filename>qnetworkconfiguration.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkConfiguration</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>QNetworkConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkConfiguration</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>QNetworkConfiguration-1</anchor>
            <arglist>(const QNetworkConfiguration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QNetworkConfiguration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkConfiguration</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>dtor.QNetworkConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkConfiguration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkConfiguration &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkConfiguration &amp;other) const const</arglist>
        </member>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InternetAccessPoint</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServiceNetwork</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserChoice</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Invalid</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Purpose</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>Purpose-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownPurpose</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PublicPurpose</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PrivatePurpose</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServiceSpecificPurpose</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>StateFlag</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Undefined</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Defined</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Discovered</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Active</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QNetworkConfiguration::StateFlag">
            <name>StateFlags</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>BearerType</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BearerUnknown</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BearerEthernet</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BearerWLAN</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bearer2G</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BearerCDMA2000</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BearerWCDMA</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BearerHSPA</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BearerBluetooth</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BearerWiMAX</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BearerEVDO</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BearerLTE</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bearer3G</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bearer4G</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>BearerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration::StateFlags</type>
            <name>state</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration::Type</type>
            <name>type</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration::Purpose</type>
            <name>purpose</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>purpose</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration::BearerType</type>
            <name>bearerType</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>bearerType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration::BearerType</type>
            <name>bearerTypeFamily</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>bearerTypeFamily</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>bearerTypeName</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>bearerTypeName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>identifier</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>identifier</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRoamingAvailable</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>isRoamingAvailable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QNetworkConfiguration&gt;</type>
            <name>children</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>children</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>connectTimeout</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>connectTimeout</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setConnectTimeout</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>setConnectTimeout</anchor>
            <arglist>(int timeout)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkConfigurationManager</name>
        <filename>qnetworkconfigurationmanager.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>Capability</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>Capability-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CanStartAndStopInterfaces</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirectConnectionRouting</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SystemSessionSupport</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationLevelRoaming</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForcedRoaming</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DataStatistics</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NetworkSessionRequired</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QNetworkConfigurationManager::Capability">
            <name>Capabilities</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkConfigurationManager</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>QNetworkConfigurationManager</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkConfigurationManager</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>dtor.QNetworkConfigurationManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfigurationManager::Capabilities</type>
            <name>capabilities</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>capabilities</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>defaultConfiguration</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>defaultConfiguration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QNetworkConfiguration&gt;</type>
            <name>allConfigurations</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>allConfigurations</anchor>
            <arglist>(QNetworkConfiguration::StateFlags filter) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>configurationFromIdentifier</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>configurationFromIdentifier</anchor>
            <arglist>(const QString &amp;identifier) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOnline</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>isOnline</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateConfigurations</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>updateConfigurations</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>configurationAdded</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>configurationAdded</anchor>
            <arglist>(const QNetworkConfiguration &amp;config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>configurationRemoved</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>configurationRemoved</anchor>
            <arglist>(const QNetworkConfiguration &amp;config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>configurationChanged</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>configurationChanged</anchor>
            <arglist>(const QNetworkConfiguration &amp;config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>onlineStateChanged</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>onlineStateChanged</anchor>
            <arglist>(bool isOnline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateCompleted</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>updateCompleted</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkCookie</name>
        <filename>qnetworkcookie.html</filename>
        <member kind="enumeration">
            <name>RawForm</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>RawForm-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NameAndValueOnly</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>RawForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Full</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>RawForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkCookie</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>QNetworkCookie</anchor>
            <arglist>(const QByteArray &amp;name, const QByteArray &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkCookie</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>QNetworkCookie-1</anchor>
            <arglist>(const QNetworkCookie &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkCookie</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>dtor.QNetworkCookie</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkCookie &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QNetworkCookie &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkCookie &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkCookie &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkCookie &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSecure</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>isSecure</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSecure</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setSecure</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHttpOnly</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>isHttpOnly</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHttpOnly</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setHttpOnly</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSessionCookie</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>isSessionCookie</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>expirationDate</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>expirationDate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpirationDate</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setExpirationDate</anchor>
            <arglist>(const QDateTime &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>domain</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>domain</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDomain</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setDomain</anchor>
            <arglist>(const QString &amp;domain)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>name</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QByteArray &amp;cookieName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>value</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QByteArray &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toRawForm</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>toRawForm</anchor>
            <arglist>(QNetworkCookie::RawForm form) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasSameIdentifier</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>hasSameIdentifier</anchor>
            <arglist>(const QNetworkCookie &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalize</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>normalize</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QNetworkCookie&gt;</type>
            <name>parseCookies</name>
            <anchorfile>qnetworkcookie.html</anchorfile>
            <anchor>parseCookies</anchor>
            <arglist>(const QByteArray &amp;cookieString)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkCookieJar</name>
        <filename>qnetworkcookiejar.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkCookieJar</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>QNetworkCookieJar</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkCookieJar</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>dtor.QNetworkCookieJar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QNetworkCookie&gt;</type>
            <name>cookiesForUrl</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>cookiesForUrl</anchor>
            <arglist>(const QUrl &amp;url) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setCookiesFromUrl</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>setCookiesFromUrl</anchor>
            <arglist>(const QList&lt;QNetworkCookie&gt; &amp;cookieList, const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertCookie</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>insertCookie</anchor>
            <arglist>(const QNetworkCookie &amp;cookie)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>updateCookie</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>updateCookie</anchor>
            <arglist>(const QNetworkCookie &amp;cookie)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>deleteCookie</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>deleteCookie</anchor>
            <arglist>(const QNetworkCookie &amp;cookie)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QList&lt;QNetworkCookie&gt;</type>
            <name>allCookies</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>allCookies</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setAllCookies</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>setAllCookies</anchor>
            <arglist>(const QList&lt;QNetworkCookie&gt; &amp;cookieList)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>validateCookie</name>
            <anchorfile>qnetworkcookiejar.html</anchorfile>
            <anchor>validateCookie</anchor>
            <arglist>(const QNetworkCookie &amp;cookie, const QUrl &amp;url) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkDatagram</name>
        <filename>qnetworkdatagram.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkDatagram</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>QNetworkDatagram</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkDatagram</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>QNetworkDatagram-1</anchor>
            <arglist>(const QByteArray &amp;data, const QHostAddress &amp;destinationAddress, quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkDatagram</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>QNetworkDatagram-2</anchor>
            <arglist>(const QNetworkDatagram &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkDatagram &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QNetworkDatagram &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkDatagram &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>interfaceIndex</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>interfaceIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInterfaceIndex</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>setInterfaceIndex</anchor>
            <arglist>(uint index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>senderAddress</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>senderAddress</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>destinationAddress</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>destinationAddress</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>senderPort</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>senderPort</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>destinationPort</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>destinationPort</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSender</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>setSender</anchor>
            <arglist>(const QHostAddress &amp;address, quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestination</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>setDestination</anchor>
            <arglist>(const QHostAddress &amp;address, quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hopLimit</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>hopLimit</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHopLimit</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>setHopLimit</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkDatagram</type>
            <name>makeReply</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>makeReply</anchor>
            <arglist>(const QByteArray &amp;payload) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkDatagram</type>
            <name>makeReply</name>
            <anchorfile>qnetworkdatagram.html</anchorfile>
            <anchor>makeReply-1</anchor>
            <arglist>(const QByteArray &amp;payload) &amp;&amp;</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkDiskCache</name>
        <filename>qnetworkdiskcache.html</filename>
        <base>QAbstractNetworkCache</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkDiskCache</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>QNetworkDiskCache</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkDiskCache</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>dtor.QNetworkDiskCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>cacheDirectory</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>cacheDirectory</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCacheDirectory</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>setCacheDirectory</anchor>
            <arglist>(const QString &amp;cacheDir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>maximumCacheSize</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>maximumCacheSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumCacheSize</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>setMaximumCacheSize</anchor>
            <arglist>(qint64 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>cacheSize</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>cacheSize</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QNetworkCacheMetaData</type>
            <name>metaData</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>(const QUrl &amp;url) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateMetaData</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>updateMetaData</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;metaData) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QIODevice *</type>
            <name>data</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QUrl &amp;url) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>remove</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QUrl &amp;url) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QIODevice *</type>
            <name>prepare</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>prepare</anchor>
            <arglist>(const QNetworkCacheMetaData &amp;metaData) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>insert</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(QIODevice *device) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkCacheMetaData</type>
            <name>fileMetaData</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>fileMetaData</anchor>
            <arglist>(const QString &amp;fileName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>clear</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>expire</name>
            <anchorfile>qnetworkdiskcache.html</anchorfile>
            <anchor>expire</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkInterface</name>
        <filename>qnetworkinterface.html</filename>
        <member kind="enumeration">
            <name>InterfaceFlag</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>IsUp</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsRunning</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CanBroadcast</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsLoopBack</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsPointToPoint</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CanMulticast</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QNetworkInterface::InterfaceFlag">
            <name>InterfaceFlags</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>InterfaceType</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Loopback</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Virtual</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ethernet</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Slip</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CanBus</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ppp</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Fddi</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Wifi</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ieee80211</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Phonet</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ieee802154</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SixLoWPAN</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ieee80216</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ieee1394</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unknown</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>InterfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkInterface</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>QNetworkInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkInterface</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>QNetworkInterface-1</anchor>
            <arglist>(const QNetworkInterface &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkInterface &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QNetworkInterface &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkInterface</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>dtor.QNetworkInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkInterface &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>index</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>index</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumTransmissionUnit</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>maximumTransmissionUnit</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>humanReadableName</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>humanReadableName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkInterface::InterfaceFlags</type>
            <name>flags</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkInterface::InterfaceType</type>
            <name>type</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>hardwareAddress</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>hardwareAddress</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QNetworkAddressEntry&gt;</type>
            <name>addressEntries</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>addressEntries</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>interfaceIndexFromName</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>interfaceIndexFromName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QNetworkInterface</type>
            <name>interfaceFromName</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>interfaceFromName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QNetworkInterface</type>
            <name>interfaceFromIndex</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>interfaceFromIndex</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>interfaceNameFromIndex</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>interfaceNameFromIndex</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QNetworkInterface&gt;</type>
            <name>allInterfaces</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>allInterfaces</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QHostAddress&gt;</type>
            <name>allAddresses</name>
            <anchorfile>qnetworkinterface.html</anchorfile>
            <anchor>allAddresses</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkProxy</name>
        <filename>qnetworkproxy.html</filename>
        <member kind="enumeration">
            <name>ProxyType</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>ProxyType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DefaultProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Socks5Proxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HttpProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HttpCachingProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FtpCachingProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>ProxyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Capability</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>Capability-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TunnelingCapability</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ListeningCapability</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UdpTunnelingCapability</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CachingCapability</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HostNameLookupCapability</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SctpTunnelingCapability</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SctpListeningCapability</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QNetworkProxy::Capability">
            <name>Capabilities</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>QNetworkProxy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>QNetworkProxy-1</anchor>
            <arglist>(QNetworkProxy::ProxyType type, const QString &amp;hostName, quint16 port, const QString &amp;user, const QString &amp;password)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>QNetworkProxy-2</anchor>
            <arglist>(const QNetworkProxy &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QNetworkProxy &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>dtor.QNetworkProxy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkProxy &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkProxy &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkProxy &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(QNetworkProxy::ProxyType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy::ProxyType</type>
            <name>type</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapabilities</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setCapabilities</anchor>
            <arglist>(QNetworkProxy::Capabilities capabilities)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy::Capabilities</type>
            <name>capabilities</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>capabilities</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCachingProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>isCachingProxy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTransparentProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>isTransparentProxy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUser</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setUser</anchor>
            <arglist>(const QString &amp;user)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>user</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>user</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPassword</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setPassword</anchor>
            <arglist>(const QString &amp;password)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>password</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>password</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHostName</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setHostName</anchor>
            <arglist>(const QString &amp;hostName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>hostName</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>hostName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPort</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setPort</anchor>
            <arglist>(quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>port</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>port</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setApplicationProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setApplicationProxy</anchor>
            <arglist>(const QNetworkProxy &amp;networkProxy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QNetworkProxy</type>
            <name>applicationProxy</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>applicationProxy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>header</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>header</anchor>
            <arglist>(QNetworkRequest::KnownHeaders header) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeader</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setHeader</anchor>
            <arglist>(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasRawHeader</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>hasRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>rawHeaderList</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>rawHeaderList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>rawHeader</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>rawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawHeader</name>
            <anchorfile>qnetworkproxy.html</anchorfile>
            <anchor>setRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName, const QByteArray &amp;headerValue)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkProxyFactory</name>
        <filename>qnetworkproxyfactory.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyFactory</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>QNetworkProxyFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkProxyFactory</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>dtor.QNetworkProxyFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QList&lt;QNetworkProxy&gt;</type>
            <name>queryProxy</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>queryProxy</anchor>
            <arglist>(const QNetworkProxyQuery &amp;query) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>usesSystemConfiguration</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>usesSystemConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setUseSystemConfiguration</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>setUseSystemConfiguration</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setApplicationProxyFactory</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>setApplicationProxyFactory</anchor>
            <arglist>(QNetworkProxyFactory *factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QNetworkProxy&gt;</type>
            <name>proxyForQuery</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>proxyForQuery</anchor>
            <arglist>(const QNetworkProxyQuery &amp;query)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QNetworkProxy&gt;</type>
            <name>systemProxyForQuery</name>
            <anchorfile>qnetworkproxyfactory.html</anchorfile>
            <anchor>systemProxyForQuery</anchor>
            <arglist>(const QNetworkProxyQuery &amp;query)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkProxyQuery</name>
        <filename>qnetworkproxyquery.html</filename>
        <member kind="enumeration">
            <name>QueryType</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QueryType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TcpSocket</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QueryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UdpSocket</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QueryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SctpSocket</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QueryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TcpServer</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QueryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UrlRequest</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QueryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SctpServer</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QueryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery-1</anchor>
            <arglist>(const QUrl &amp;requestUrl, QNetworkProxyQuery::QueryType queryType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery-2</anchor>
            <arglist>(const QString &amp;hostname, int port, const QString &amp;protocolTag, QNetworkProxyQuery::QueryType queryType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery-3</anchor>
            <arglist>(quint16 bindPort, const QString &amp;protocolTag, QNetworkProxyQuery::QueryType queryType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery-obsolete.html</anchorfile>
            <anchor>QNetworkProxyQuery-4</anchor>
            <arglist>(const QNetworkConfiguration &amp;networkConfiguration, const QUrl &amp;requestUrl, QNetworkProxyQuery::QueryType queryType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery-obsolete.html</anchorfile>
            <anchor>QNetworkProxyQuery-5</anchor>
            <arglist>(const QNetworkConfiguration &amp;networkConfiguration, const QString &amp;hostname, int port, const QString &amp;protocolTag, QNetworkProxyQuery::QueryType queryType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery-obsolete.html</anchorfile>
            <anchor>QNetworkProxyQuery-6</anchor>
            <arglist>(const QNetworkConfiguration &amp;networkConfiguration, quint16 bindPort, const QString &amp;protocolTag, QNetworkProxyQuery::QueryType queryType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>QNetworkProxyQuery-7</anchor>
            <arglist>(const QNetworkProxyQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxyQuery &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QNetworkProxyQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkProxyQuery</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>dtor.QNetworkProxyQuery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkProxyQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkProxyQuery &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkProxyQuery &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxyQuery::QueryType</type>
            <name>queryType</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>queryType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQueryType</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setQueryType</anchor>
            <arglist>(QNetworkProxyQuery::QueryType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>peerPort</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>peerPort</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerPort</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setPeerPort</anchor>
            <arglist>(int port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>peerHostName</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>peerHostName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerHostName</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setPeerHostName</anchor>
            <arglist>(const QString &amp;hostname)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>localPort</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>localPort</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalPort</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setLocalPort</anchor>
            <arglist>(int port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>protocolTag</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>protocolTag</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProtocolTag</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setProtocolTag</anchor>
            <arglist>(const QString &amp;protocolTag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qnetworkproxyquery.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>networkConfiguration</name>
            <anchorfile>qnetworkproxyquery-obsolete.html</anchorfile>
            <anchor>networkConfiguration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNetworkConfiguration</name>
            <anchorfile>qnetworkproxyquery-obsolete.html</anchorfile>
            <anchor>setNetworkConfiguration</anchor>
            <arglist>(const QNetworkConfiguration &amp;networkConfiguration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkReply</name>
        <filename>qnetworkreply.html</filename>
        <base>QIODevice</base>
        <member kind="enumeration">
            <name>NetworkError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectionRefusedError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemoteHostClosedError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HostNotFoundError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TimeoutError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OperationCanceledError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslHandshakeFailedError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TemporaryNetworkFailureError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NetworkSessionFailedError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BackgroundRequestNotAllowedError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TooManyRedirectsError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InsecureRedirectError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownNetworkError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProxyConnectionRefusedError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProxyConnectionClosedError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProxyNotFoundError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProxyTimeoutError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProxyAuthenticationRequiredError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownProxyError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContentAccessDenied</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContentOperationNotPermittedError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContentNotFoundError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AuthenticationRequiredError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContentReSendError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContentConflictError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContentGoneError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownContentError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProtocolUnknownError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProtocolInvalidOperationError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProtocolFailure</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InternalServerError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OperationNotImplementedError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServiceUnavailableError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownServerError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>NetworkError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkReply</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>dtor.QNetworkReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>readBufferSize</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>readBufferSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setReadBufferSize</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setReadBufferSize</anchor>
            <arglist>(qint64 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAccessManager *</type>
            <name>manager</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>manager</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkAccessManager::Operation</type>
            <name>operation</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>operation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkRequest</type>
            <name>request</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>request</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkReply::NetworkError</type>
            <name>error</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>header</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>header</anchor>
            <arglist>(QNetworkRequest::KnownHeaders header) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasRawHeader</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>hasRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>rawHeaderList</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>rawHeaderList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>rawHeader</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>rawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>RawHeaderPair</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>RawHeaderPair-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QList&lt;QNetworkReply::RawHeaderPair&gt; &amp;</type>
            <name>rawHeaderPairs</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>rawHeaderPairs</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>attribute</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(QNetworkRequest::Attribute code) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslConfiguration</type>
            <name>sslConfiguration</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>sslConfiguration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSslConfiguration</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setSslConfiguration</anchor>
            <arglist>(const QSslConfiguration &amp;config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignoreSslErrors</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>ignoreSslErrors-1</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>abort</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>ignoreSslErrors</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>ignoreSslErrors</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metaDataChanged</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>metaDataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qnetworkreply-obsolete.html</anchorfile>
            <anchor>error-1</anchor>
            <arglist>(QNetworkReply::NetworkError code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>errorOccurred</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>errorOccurred</anchor>
            <arglist>(QNetworkReply::NetworkError code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>encrypted</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>encrypted</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sslErrors</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>sslErrors</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>preSharedKeyAuthenticationRequired</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>preSharedKeyAuthenticationRequired</anchor>
            <arglist>(QSslPreSharedKeyAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redirected</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>redirected</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redirectAllowed</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>redirectAllowed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>uploadProgress</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>uploadProgress</anchor>
            <arglist>(qint64 bytesSent, qint64 bytesTotal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>downloadProgress</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>downloadProgress</anchor>
            <arglist>(qint64 bytesReceived, qint64 bytesTotal)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QNetworkReply</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>QNetworkReply</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setOperation</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setOperation</anchor>
            <arglist>(QNetworkAccessManager::Operation operation)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setRequest</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setRequest</anchor>
            <arglist>(const QNetworkRequest &amp;request)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(QNetworkReply::NetworkError errorCode, const QString &amp;errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFinished</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setFinished</anchor>
            <arglist>(bool finished)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setHeader</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setHeader</anchor>
            <arglist>(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setRawHeader</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName, const QByteArray &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(QNetworkRequest::Attribute code, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sslConfigurationImplementation</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>sslConfigurationImplementation</anchor>
            <arglist>(QSslConfiguration &amp;configuration) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSslConfigurationImplementation</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>setSslConfigurationImplementation</anchor>
            <arglist>(const QSslConfiguration &amp;configuration)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>ignoreSslErrorsImplementation</name>
            <anchorfile>qnetworkreply.html</anchorfile>
            <anchor>ignoreSslErrorsImplementation</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkRequest</name>
        <filename>qnetworkrequest.html</filename>
        <member kind="enumeration">
            <name>KnownHeaders</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ContentTypeHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContentLengthHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LocationHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastModifiedHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CookieHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SetCookieHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContentDispositionHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserAgentHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ServerHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IfModifiedSinceHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ETagHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IfMatchHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IfNoneMatchHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>KnownHeaders-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Attribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>HttpStatusCodeAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HttpReasonPhraseAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RedirectionTargetAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConnectionEncryptedAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CacheLoadControlAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CacheSaveControlAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SourceIsFromCacheAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DoNotBufferUploadDataAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HttpPipeliningAllowedAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HttpPipeliningWasUsedAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomVerbAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CookieLoadControlAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AuthenticationReuseAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CookieSaveControlAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MaximumDownloadBufferSizeAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DownloadBufferAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SynchronousRequestAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BackgroundRequestAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SpdyAllowedAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SpdyWasUsedAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EmitAllUploadProgressSignalsAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FollowRedirectsAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Http2AllowedAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Http2WasUsedAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HTTP2AllowedAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HTTP2WasUsedAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OriginalContentLengthAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RedirectPolicyAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Http2DirectAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ResourceTypeAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AutoDeleteReplyOnFinishAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>User</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserMax</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CacheLoadControl</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>CacheLoadControl-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AlwaysNetwork</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>CacheLoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferNetwork</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>CacheLoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferCache</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>CacheLoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlwaysCache</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>CacheLoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>LoadControl</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>LoadControl-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Automatic</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>LoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Manual</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>LoadControl-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Priority</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Priority-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>HighPriority</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NormalPriority</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LowPriority</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RedirectPolicy</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>RedirectPolicy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ManualRedirectPolicy</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>RedirectPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoLessSafeRedirectPolicy</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>RedirectPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SameOriginRedirectPolicy</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>RedirectPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserVerifiedRedirectPolicy</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>RedirectPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TransferTimeoutConstant</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>TransferTimeoutConstant-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DefaultTransferTimeoutConstant</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>TransferTimeoutConstant-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkRequest</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>QNetworkRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkRequest</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>QNetworkRequest-1</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkRequest</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>QNetworkRequest-2</anchor>
            <arglist>(const QNetworkRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkRequest</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>dtor.QNetworkRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkRequest &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QNetworkRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNetworkRequest &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNetworkRequest &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNetworkRequest &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>header</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>header</anchor>
            <arglist>(QNetworkRequest::KnownHeaders header) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setHeader</anchor>
            <arglist>(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasRawHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>hasRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>rawHeaderList</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>rawHeaderList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>rawHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>rawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawHeader</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setRawHeader</anchor>
            <arglist>(const QByteArray &amp;headerName, const QByteArray &amp;headerValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>attribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(QNetworkRequest::Attribute code, const QVariant &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(QNetworkRequest::Attribute code, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslConfiguration</type>
            <name>sslConfiguration</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>sslConfiguration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSslConfiguration</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setSslConfiguration</anchor>
            <arglist>(const QSslConfiguration &amp;config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOriginatingObject</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setOriginatingObject</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>originatingObject</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>originatingObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkRequest::Priority</type>
            <name>priority</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>priority</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPriority</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setPriority</anchor>
            <arglist>(QNetworkRequest::Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumRedirectsAllowed</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>maximumRedirectsAllowed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumRedirectsAllowed</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setMaximumRedirectsAllowed</anchor>
            <arglist>(int maxRedirectsAllowed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>peerVerifyName</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>peerVerifyName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerVerifyName</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setPeerVerifyName</anchor>
            <arglist>(const QString &amp;peerName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHttp2Configuration</type>
            <name>http2Configuration</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>http2Configuration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHttp2Configuration</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setHttp2Configuration</anchor>
            <arglist>(const QHttp2Configuration &amp;configuration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>transferTimeout</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>transferTimeout</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransferTimeout</name>
            <anchorfile>qnetworkrequest.html</anchorfile>
            <anchor>setTransferTimeout</anchor>
            <arglist>(int timeout)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkSession</name>
        <filename>qnetworksession.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>State</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>State-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Invalid</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotAvailable</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Connecting</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Connected</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Closing</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Disconnected</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Roaming</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SessionError</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>SessionError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownSessionError</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SessionAbortedError</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RoamingError</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OperationNotSupportedError</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidConfigurationError</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>UsagePolicy</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>UsagePolicy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoPolicy</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>UsagePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoBackgroundTrafficPolicy</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>UsagePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QNetworkSession::UsagePolicy">
            <name>UsagePolicies</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>UsagePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkSession</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>QNetworkSession</anchor>
            <arglist>(const QNetworkConfiguration &amp;connectionConfig, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkSession</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>dtor.QNetworkSession</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOpen</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>isOpen</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>configuration</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>configuration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkInterface</type>
            <name>interface</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>interface</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkSession::State</type>
            <name>state</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkSession::SessionError</type>
            <name>error</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>sessionProperty</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>sessionProperty</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSessionProperty</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>setSessionProperty</anchor>
            <arglist>(const QString &amp;key, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>bytesWritten</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>bytesWritten</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>bytesReceived</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>bytesReceived</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>activeTime</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>activeTime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkSession::UsagePolicies</type>
            <name>usagePolicies</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>usagePolicies</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForOpened</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>waitForOpened</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>open</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>open</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>close</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>migrate</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>migrate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignore</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>ignore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accept</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>accept</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reject</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>reject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QNetworkSession::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>opened</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>opened</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closed</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>closed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>error-1</anchor>
            <arglist>(QNetworkSession::SessionError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>preferredConfigurationChanged</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>preferredConfigurationChanged</anchor>
            <arglist>(const QNetworkConfiguration &amp;config, bool isSeamless)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>newConfigurationActivated</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>newConfigurationActivated</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>usagePoliciesChanged</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>usagePoliciesChanged</anchor>
            <arglist>(QNetworkSession::UsagePolicies usagePolicies)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOcspResponse</name>
        <filename>qocspresponse.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOcspResponse</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspResponse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOcspResponse</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspResponse-1</anchor>
            <arglist>(const QOcspResponse &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOcspResponse</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspResponse-2</anchor>
            <arglist>(QOcspResponse &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOcspResponse</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>dtor.QOcspResponse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOcspResponse &amp;</type>
            <name>operator=</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QOcspResponse &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOcspResponse &amp;</type>
            <name>operator=</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QOcspResponse &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOcspCertificateStatus</type>
            <name>certificateStatus</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>certificateStatus</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOcspRevocationReason</type>
            <name>revocationReason</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>revocationReason</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>class QSslCertificate</type>
            <name>responder</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>responder</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate</type>
            <name>subject</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>subject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QOcspResponse &amp;other)</arglist>
        </member>
        <member kind="enumeration">
            <name>QOcspCertificateStatus</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspCertificateStatus-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Good</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspCertificateStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Revoked</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspCertificateStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unknown</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspCertificateStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>QOcspRevocationReason</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspRevocationReason-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>None</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspRevocationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unspecified</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspRevocationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeyCompromise</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspRevocationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CACompromise</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspRevocationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AffiliationChanged</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspRevocationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Superseded</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspRevocationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CessationOfOperation</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspRevocationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CertificateHold</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspRevocationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemoveFromCRL</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>QOcspRevocationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QOcspResponse &amp;lhs, const QOcspResponse &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qocspresponse.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QOcspResponse &amp;lhs, const QOcspResponse &amp;rhs)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QPasswordDigestor</name>
        <filename>qpassworddigestor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>deriveKeyPbkdf1</name>
            <anchorfile>qpassworddigestor.html</anchorfile>
            <anchor>deriveKeyPbkdf1</anchor>
            <arglist>(QCryptographicHash::Algorithm algorithm, const QByteArray &amp;data, const QByteArray &amp;salt, int iterations, quint64 dkLen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>deriveKeyPbkdf2</name>
            <anchorfile>qpassworddigestor.html</anchorfile>
            <anchor>deriveKeyPbkdf2</anchor>
            <arglist>(QCryptographicHash::Algorithm algorithm, const QByteArray &amp;data, const QByteArray &amp;salt, int iterations, quint64 dkLen)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSctpServer</name>
        <filename>qsctpserver.html</filename>
        <base>QTcpServer</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSctpServer</name>
            <anchorfile>qsctpserver.html</anchorfile>
            <anchor>QSctpServer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSctpServer</name>
            <anchorfile>qsctpserver.html</anchorfile>
            <anchor>dtor.QSctpServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumChannelCount</name>
            <anchorfile>qsctpserver.html</anchorfile>
            <anchor>setMaximumChannelCount</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumChannelCount</name>
            <anchorfile>qsctpserver.html</anchorfile>
            <anchor>maximumChannelCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSctpSocket *</type>
            <name>nextPendingDatagramConnection</name>
            <anchorfile>qsctpserver.html</anchorfile>
            <anchor>nextPendingDatagramConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>incomingConnection</name>
            <anchorfile>qsctpserver.html</anchorfile>
            <anchor>incomingConnection</anchor>
            <arglist>(qintptr socketDescriptor) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSctpSocket</name>
        <filename>qsctpsocket.html</filename>
        <base>QTcpSocket</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSctpSocket</name>
            <anchorfile>qsctpsocket.html</anchorfile>
            <anchor>QSctpSocket</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSctpSocket</name>
            <anchorfile>qsctpsocket.html</anchorfile>
            <anchor>dtor.QSctpSocket</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qsctpsocket.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>disconnectFromHost</name>
            <anchorfile>qsctpsocket.html</anchorfile>
            <anchor>disconnectFromHost</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumChannelCount</name>
            <anchorfile>qsctpsocket.html</anchorfile>
            <anchor>setMaximumChannelCount</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumChannelCount</name>
            <anchorfile>qsctpsocket.html</anchorfile>
            <anchor>maximumChannelCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInDatagramMode</name>
            <anchorfile>qsctpsocket.html</anchorfile>
            <anchor>isInDatagramMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkDatagram</type>
            <name>readDatagram</name>
            <anchorfile>qsctpsocket.html</anchorfile>
            <anchor>readDatagram</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>writeDatagram</name>
            <anchorfile>qsctpsocket.html</anchorfile>
            <anchor>writeDatagram</anchor>
            <arglist>(const QNetworkDatagram &amp;datagram)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qsctpsocket.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 maxSize) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readLineData</name>
            <anchorfile>qsctpsocket.html</anchorfile>
            <anchor>readLineData</anchor>
            <arglist>(char *data, qint64 maxlen) override</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QSsl</name>
        <filename>qssl.html</filename>
        <member kind="enumeration">
            <name>KeyType</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>KeyType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PrivateKey</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>KeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PublicKey</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>KeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>EncodingFormat</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>EncodingFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Pem</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>EncodingFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Der</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>EncodingFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>KeyAlgorithm</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>KeyAlgorithm-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Opaque</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>KeyAlgorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Rsa</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>KeyAlgorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dsa</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>KeyAlgorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ec</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>KeyAlgorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dh</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>KeyAlgorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AlternativeNameEntryType</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>AlternativeNameEntryType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>EmailEntry</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>AlternativeNameEntryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DnsEntry</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>AlternativeNameEntryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IpAddressEntry</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>AlternativeNameEntryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>AlternateNameEntryType</name>
            <anchorfile>qssl-obsolete.html</anchorfile>
            <anchor>AlternateNameEntryType-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SslProtocol</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SslV3</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslV2</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsV1_0</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsV1</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsV1_1</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsV1_2</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnyProtocol</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsV1SslV3</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SecureProtocols</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsV1_0OrLater</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsV1_1OrLater</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsV1_2OrLater</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DtlsV1_0</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DtlsV1_0OrLater</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DtlsV1_2</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DtlsV1_2OrLater</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsV1_3</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TlsV1_3OrLater</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownProtocol</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslProtocol-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SslOption</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SslOptionDisableEmptyFragments</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslOptionDisableSessionTickets</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslOptionDisableCompression</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslOptionDisableServerNameIndication</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslOptionDisableLegacyRenegotiation</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslOptionDisableSessionSharing</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslOptionDisableSessionPersistence</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslOptionDisableServerCipherPreference</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSsl::SslOption">
            <name>SslOptions</name>
            <anchorfile>qssl.html</anchorfile>
            <anchor>SslOption-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslCertificate</name>
        <filename>qsslcertificate.html</filename>
        <member kind="enumeration">
            <name>SubjectInfo</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>SubjectInfo-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Organization</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CommonName</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LocalityName</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OrganizationalUnitName</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CountryName</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StateOrProvinceName</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DistinguishedNameQualifier</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SerialNumber</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EmailAddress</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>SubjectInfo-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCertificate</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>QSslCertificate</anchor>
            <arglist>(QIODevice *device, QSsl::EncodingFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCertificate</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>QSslCertificate-1</anchor>
            <arglist>(const QByteArray &amp;data, QSsl::EncodingFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCertificate</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>QSslCertificate-2</anchor>
            <arglist>(const QSslCertificate &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslCertificate</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>dtor.QSslCertificate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QSslCertificate &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslCertificate &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSslCertificate &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSslCertificate &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qsslcertificate-obsolete.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBlacklisted</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>isBlacklisted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSelfSigned</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>isSelfSigned</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>version</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>serialNumber</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>serialNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>digest</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>digest</anchor>
            <arglist>(QCryptographicHash::Algorithm algorithm) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>issuerInfo</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>issuerInfo</anchor>
            <arglist>(QSslCertificate::SubjectInfo subject) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>issuerInfo</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>issuerInfo-1</anchor>
            <arglist>(const QByteArray &amp;attribute) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>subjectInfo</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>subjectInfo</anchor>
            <arglist>(QSslCertificate::SubjectInfo subject) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>subjectInfo</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>subjectInfo-1</anchor>
            <arglist>(const QByteArray &amp;attribute) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>issuerDisplayName</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>issuerDisplayName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>subjectDisplayName</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>subjectDisplayName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>subjectInfoAttributes</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>subjectInfoAttributes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>issuerInfoAttributes</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>issuerInfoAttributes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;QSsl::AlternateNameEntryType, QString&gt;</type>
            <name>alternateSubjectNames</name>
            <anchorfile>qsslcertificate-obsolete.html</anchorfile>
            <anchor>alternateSubjectNames</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;QSsl::AlternativeNameEntryType, QString&gt;</type>
            <name>subjectAlternativeNames</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>subjectAlternativeNames</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>effectiveDate</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>effectiveDate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>expiryDate</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>expiryDate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslKey</type>
            <name>publicKey</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>publicKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificateExtension&gt;</type>
            <name>extensions</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>extensions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toPem</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>toPem</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toDer</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>toDer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toText</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>toText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>fromPath</name>
            <anchorfile>qsslcertificate-obsolete.html</anchorfile>
            <anchor>fromPath</anchor>
            <arglist>(const QString &amp;path, QSsl::EncodingFormat format, QRegExp::PatternSyntax syntax)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>fromPath</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>fromPath-1</anchor>
            <arglist>(const QString &amp;path, QSsl::EncodingFormat format, QSslCertificate::PatternSyntax syntax)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>fromDevice</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>fromDevice</anchor>
            <arglist>(QIODevice *device, QSsl::EncodingFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>fromData</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>fromData</anchor>
            <arglist>(const QByteArray &amp;data, QSsl::EncodingFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslError&gt;</type>
            <name>verify</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>verify</anchor>
            <arglist>(QList&lt;QSslCertificate&gt; certificateChain, const QString &amp;hostName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>importPkcs12</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>importPkcs12</anchor>
            <arglist>(QIODevice *device, QSslKey *key, QSslCertificate *certificate, QList&lt;QSslCertificate&gt; *caCertificates, const QByteArray &amp;passPhrase)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::HANDLE</type>
            <name>handle</name>
            <anchorfile>qsslcertificate.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslCertificateExtension</name>
        <filename>qsslcertificateextension.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCertificateExtension</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>QSslCertificateExtension</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCertificateExtension</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>QSslCertificateExtension-1</anchor>
            <arglist>(const QSslCertificateExtension &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificateExtension &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QSslCertificateExtension &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslCertificateExtension</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>dtor.QSslCertificateExtension</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslCertificateExtension &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>oid</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>oid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCritical</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>isCritical</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSupported</name>
            <anchorfile>qsslcertificateextension.html</anchorfile>
            <anchor>isSupported</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslCipher</name>
        <filename>qsslcipher.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCipher</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>QSslCipher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCipher</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>QSslCipher-1</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCipher</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>QSslCipher-2</anchor>
            <arglist>(const QString &amp;name, QSsl::SslProtocol protocol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslCipher</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>QSslCipher-3</anchor>
            <arglist>(const QSslCipher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCipher &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QSslCipher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslCipher</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>dtor.QSslCipher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslCipher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSslCipher &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSslCipher &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>supportedBits</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>supportedBits</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>usedBits</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>usedBits</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>keyExchangeMethod</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>keyExchangeMethod</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>authenticationMethod</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>authenticationMethod</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>encryptionMethod</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>encryptionMethod</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>protocolString</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>protocolString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::SslProtocol</type>
            <name>protocol</name>
            <anchorfile>qsslcipher.html</anchorfile>
            <anchor>protocol</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslConfiguration</name>
        <filename>qsslconfiguration.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>QSslConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>QSslConfiguration-1</anchor>
            <arglist>(const QSslConfiguration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>dtor.QSslConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslConfiguration &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QSslConfiguration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslConfiguration &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSslConfiguration &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSslConfiguration &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::SslProtocol</type>
            <name>protocol</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>protocol</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProtocol</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setProtocol</anchor>
            <arglist>(QSsl::SslProtocol protocol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslSocket::PeerVerifyMode</type>
            <name>peerVerifyMode</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>peerVerifyMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerVerifyMode</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setPeerVerifyMode</anchor>
            <arglist>(QSslSocket::PeerVerifyMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>peerVerifyDepth</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>peerVerifyDepth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerVerifyDepth</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setPeerVerifyDepth</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>localCertificateChain</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>localCertificateChain</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalCertificateChain</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setLocalCertificateChain</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;localChain)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate</type>
            <name>localCertificate</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>localCertificate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalCertificate</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setLocalCertificate</anchor>
            <arglist>(const QSslCertificate &amp;certificate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate</type>
            <name>peerCertificate</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>peerCertificate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>peerCertificateChain</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>peerCertificateChain</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCipher</type>
            <name>sessionCipher</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>sessionCipher</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::SslProtocol</type>
            <name>sessionProtocol</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>sessionProtocol</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslKey</type>
            <name>privateKey</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>privateKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrivateKey</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setPrivateKey</anchor>
            <arglist>(const QSslKey &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCipher&gt;</type>
            <name>ciphers</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>ciphers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCiphers</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setCiphers</anchor>
            <arglist>(const QList&lt;QSslCipher&gt; &amp;ciphers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCipher&gt;</type>
            <name>supportedCiphers</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>supportedCiphers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>caCertificates</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>caCertificates</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaCertificates</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setCaCertificates</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;certificates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addCaCertificates</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>addCaCertificates</anchor>
            <arglist>(const QString &amp;path, QSsl::EncodingFormat format, QSslCertificate::PatternSyntax syntax)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCaCertificate</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>addCaCertificate</anchor>
            <arglist>(const QSslCertificate &amp;certificate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCaCertificates</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>addCaCertificates-1</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;certificates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>systemCaCertificates</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>systemCaCertificates</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSslOption</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setSslOption</anchor>
            <arglist>(QSsl::SslOption option, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testSslOption</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>testSslOption</anchor>
            <arglist>(QSsl::SslOption option) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>sessionTicket</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>sessionTicket</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSessionTicket</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setSessionTicket</anchor>
            <arglist>(const QByteArray &amp;sessionTicket)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sessionTicketLifeTimeHint</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>sessionTicketLifeTimeHint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslKey</type>
            <name>ephemeralServerKey</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>ephemeralServerKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QSslEllipticCurve&gt;</type>
            <name>ellipticCurves</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>ellipticCurves</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEllipticCurves</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setEllipticCurves</anchor>
            <arglist>(const QVector&lt;QSslEllipticCurve&gt; &amp;curves)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVector&lt;QSslEllipticCurve&gt;</type>
            <name>supportedEllipticCurves</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>supportedEllipticCurves</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>preSharedKeyIdentityHint</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>preSharedKeyIdentityHint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreSharedKeyIdentityHint</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setPreSharedKeyIdentityHint</anchor>
            <arglist>(const QByteArray &amp;hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslDiffieHellmanParameters</type>
            <name>diffieHellmanParameters</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>diffieHellmanParameters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiffieHellmanParameters</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setDiffieHellmanParameters</anchor>
            <arglist>(const QSslDiffieHellmanParameters &amp;dhparams)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QByteArray, QVariant&gt;</type>
            <name>backendConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>backendConfiguration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackendConfigurationOption</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setBackendConfigurationOption</anchor>
            <arglist>(const QByteArray &amp;name, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackendConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setBackendConfiguration</anchor>
            <arglist>(const QMap&lt;QByteArray, QVariant&gt; &amp;backendConfiguration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSslConfiguration</type>
            <name>defaultConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>defaultConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setDefaultConfiguration</anchor>
            <arglist>(const QSslConfiguration &amp;configuration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>dtlsCookieVerificationEnabled</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>dtlsCookieVerificationEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDtlsCookieVerificationEnabled</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setDtlsCookieVerificationEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSslConfiguration</type>
            <name>defaultDtlsConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>defaultDtlsConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultDtlsConfiguration</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setDefaultDtlsConfiguration</anchor>
            <arglist>(const QSslConfiguration &amp;configuration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOcspStaplingEnabled</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setOcspStaplingEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ocspStaplingEnabled</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>ocspStaplingEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="enumeration">
            <name>NextProtocolNegotiationStatus</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>NextProtocolNegotiationStatus-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NextProtocolNegotiationNone</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>NextProtocolNegotiationStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NextProtocolNegotiationNegotiated</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>NextProtocolNegotiationStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NextProtocolNegotiationUnsupported</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>NextProtocolNegotiationStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAllowedNextProtocols</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>setAllowedNextProtocols</anchor>
            <arglist>(QList&lt;QByteArray&gt; protocols)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>allowedNextProtocols</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>allowedNextProtocols</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>nextNegotiatedProtocol</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>nextNegotiatedProtocol</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslConfiguration::NextProtocolNegotiationStatus</type>
            <name>nextProtocolNegotiationStatus</name>
            <anchorfile>qsslconfiguration.html</anchorfile>
            <anchor>nextProtocolNegotiationStatus</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslDiffieHellmanParameters</name>
        <filename>qssldiffiehellmanparameters.html</filename>
        <member kind="enumeration">
            <name>Error</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>Error-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidInputDataError</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsafeParametersError</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSslDiffieHellmanParameters</type>
            <name>defaultParameters</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>defaultParameters</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslDiffieHellmanParameters</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>QSslDiffieHellmanParameters</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslDiffieHellmanParameters</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>QSslDiffieHellmanParameters-1</anchor>
            <arglist>(const QSslDiffieHellmanParameters &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslDiffieHellmanParameters</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>QSslDiffieHellmanParameters-2</anchor>
            <arglist>(QSslDiffieHellmanParameters &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslDiffieHellmanParameters</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>dtor.QSslDiffieHellmanParameters</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslDiffieHellmanParameters &amp;</type>
            <name>operator=</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSslDiffieHellmanParameters &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslDiffieHellmanParameters &amp;</type>
            <name>operator=</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QSslDiffieHellmanParameters &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslDiffieHellmanParameters &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSslDiffieHellmanParameters</type>
            <name>fromEncoded</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>fromEncoded</anchor>
            <arglist>(const QByteArray &amp;encoded, QSsl::EncodingFormat encoding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSslDiffieHellmanParameters</type>
            <name>fromEncoded</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>fromEncoded-1</anchor>
            <arglist>(QIODevice *device, QSsl::EncodingFormat encoding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslDiffieHellmanParameters::Error</type>
            <name>error</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSslDiffieHellmanParameters &amp;lhs, const QSslDiffieHellmanParameters &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDebug debug, const QSslDiffieHellmanParameters &amp;dhparam)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>qHash</name>
            <anchorfile>qssldiffiehellmanparameters.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(const QSslDiffieHellmanParameters &amp;dhparam, uint seed)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslEllipticCurve</name>
        <filename>qsslellipticcurve.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslEllipticCurve</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>QSslEllipticCurve</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSslEllipticCurve</type>
            <name>fromShortName</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>fromShortName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSslEllipticCurve</type>
            <name>fromLongName</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>fromLongName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>shortName</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>shortName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>longName</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>longName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTlsNamedCurve</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>isTlsNamedCurve</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(QSslEllipticCurve lhs, QSslEllipticCurve rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(QSslEllipticCurve lhs, QSslEllipticCurve rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qsslellipticcurve.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDebug debug, QSslEllipticCurve curve)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslError</name>
        <filename>qsslerror.html</filename>
        <member kind="enumeration">
            <name>SslError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnableToGetIssuerCertificate</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnableToDecryptCertificateSignature</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnableToDecodeIssuerPublicKey</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CertificateSignatureFailed</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CertificateNotYetValid</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CertificateExpired</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidNotBeforeField</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidNotAfterField</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelfSignedCertificate</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelfSignedCertificateInChain</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnableToGetLocalIssuerCertificate</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnableToVerifyFirstCertificate</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CertificateRevoked</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidCaCertificate</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PathLengthExceeded</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidPurpose</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CertificateUntrusted</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CertificateRejected</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SubjectIssuerMismatch</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AuthorityIssuerSerialNumberMismatch</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoPeerCertificate</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HostNameMismatch</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoSslSupport</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CertificateBlacklisted</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CertificateStatusUnknown</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OcspNoResponseFound</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OcspMalformedRequest</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OcspMalformedResponse</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OcspInternalError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OcspTryLater</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OcspSigRequred</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OcspUnauthorized</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OcspResponseCannotBeTrusted</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OcspResponseCertIdUnknown</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OcspResponseExpired</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OcspStatusUnknown</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnspecifiedError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>SslError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>QSslError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>QSslError-1</anchor>
            <arglist>(QSslError::SslError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>QSslError-2</anchor>
            <arglist>(QSslError::SslError error, const QSslCertificate &amp;certificate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>QSslError-3</anchor>
            <arglist>(const QSslError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslError</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>dtor.QSslError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslError &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QSslError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSslError &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSslError &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslError::SslError</type>
            <name>error</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate</type>
            <name>certificate</name>
            <anchorfile>qsslerror.html</anchorfile>
            <anchor>certificate</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslKey</name>
        <filename>qsslkey.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslKey</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>QSslKey</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslKey</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>QSslKey-1</anchor>
            <arglist>(const QByteArray &amp;encoded, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat encoding, QSsl::KeyType type, const QByteArray &amp;passPhrase)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslKey</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>QSslKey-2</anchor>
            <arglist>(QIODevice *device, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat encoding, QSsl::KeyType type, const QByteArray &amp;passPhrase)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslKey</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>QSslKey-3</anchor>
            <arglist>(Qt::HANDLE handle, QSsl::KeyType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslKey</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>QSslKey-4</anchor>
            <arglist>(const QSslKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslKey &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QSslKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslKey</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>dtor.QSslKey</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::KeyType</type>
            <name>type</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::KeyAlgorithm</type>
            <name>algorithm</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>algorithm</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toPem</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>toPem</anchor>
            <arglist>(const QByteArray &amp;passPhrase) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toDer</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>toDer</anchor>
            <arglist>(const QByteArray &amp;passPhrase) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::HANDLE</type>
            <name>handle</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSslKey &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsslkey.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSslKey &amp;other) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslPreSharedKeyAuthenticator</name>
        <filename>qsslpresharedkeyauthenticator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslPreSharedKeyAuthenticator</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>QSslPreSharedKeyAuthenticator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSslPreSharedKeyAuthenticator</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>dtor.QSslPreSharedKeyAuthenticator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslPreSharedKeyAuthenticator</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>QSslPreSharedKeyAuthenticator-1</anchor>
            <arglist>(const QSslPreSharedKeyAuthenticator &amp;authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslPreSharedKeyAuthenticator &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSslPreSharedKeyAuthenticator &amp;authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslPreSharedKeyAuthenticator &amp;</type>
            <name>operator=</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QSslPreSharedKeyAuthenticator &amp;&amp;authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSslPreSharedKeyAuthenticator &amp;authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>identityHint</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>identityHint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIdentity</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>setIdentity</anchor>
            <arglist>(const QByteArray &amp;identity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>identity</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>identity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumIdentityLength</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>maximumIdentityLength</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreSharedKey</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>setPreSharedKey</anchor>
            <arglist>(const QByteArray &amp;preSharedKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>preSharedKey</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>preSharedKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumPreSharedKeyLength</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>maximumPreSharedKeyLength</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSslPreSharedKeyAuthenticator &amp;lhs, const QSslPreSharedKeyAuthenticator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsslpresharedkeyauthenticator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSslPreSharedKeyAuthenticator &amp;lhs, const QSslPreSharedKeyAuthenticator &amp;rhs)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSslSocket</name>
        <filename>qsslsocket.html</filename>
        <base>QTcpSocket</base>
        <member kind="enumeration">
            <name>SslMode</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>SslMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnencryptedMode</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>SslMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslClientMode</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>SslMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SslServerMode</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>SslMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PeerVerifyMode</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>PeerVerifyMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>VerifyNone</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>PeerVerifyMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QueryPeer</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>PeerVerifyMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VerifyPeer</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>PeerVerifyMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AutoVerifyPeer</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>PeerVerifyMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSslSocket</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>QSslSocket</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSslSocket</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>dtor.QSslSocket</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resume</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToHostEncrypted</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>connectToHostEncrypted</anchor>
            <arglist>(const QString &amp;hostName, quint16 port, QIODevice::OpenMode mode, QAbstractSocket::NetworkLayerProtocol protocol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectToHostEncrypted</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>connectToHostEncrypted-1</anchor>
            <arglist>(const QString &amp;hostName, quint16 port, const QString &amp;sslPeerName, QIODevice::OpenMode mode, QAbstractSocket::NetworkLayerProtocol protocol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setSocketDescriptor</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setSocketDescriptor</anchor>
            <arglist>(qintptr socketDescriptor, QAbstractSocket::SocketState state, QIODevice::OpenMode openMode) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSocketOption</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setSocketOption</anchor>
            <arglist>(QAbstractSocket::SocketOption option, const QVariant &amp;value) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>socketOption</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>socketOption</anchor>
            <arglist>(QAbstractSocket::SocketOption option) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslSocket::SslMode</type>
            <name>mode</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>mode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEncrypted</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>isEncrypted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::SslProtocol</type>
            <name>protocol</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>protocol</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProtocol</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setProtocol</anchor>
            <arglist>(QSsl::SslProtocol protocol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslSocket::PeerVerifyMode</type>
            <name>peerVerifyMode</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>peerVerifyMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerVerifyMode</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setPeerVerifyMode</anchor>
            <arglist>(QSslSocket::PeerVerifyMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>peerVerifyDepth</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>peerVerifyDepth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerVerifyDepth</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setPeerVerifyDepth</anchor>
            <arglist>(int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>peerVerifyName</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>peerVerifyName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeerVerifyName</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setPeerVerifyName</anchor>
            <arglist>(const QString &amp;hostName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesAvailable</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>bytesAvailable</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesToWrite</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>bytesToWrite</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canReadLine</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>canReadLine</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>atEnd</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>flush</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>abort</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setReadBufferSize</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setReadBufferSize</anchor>
            <arglist>(qint64 size) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>encryptedBytesAvailable</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>encryptedBytesAvailable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>encryptedBytesToWrite</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>encryptedBytesToWrite</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslConfiguration</type>
            <name>sslConfiguration</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslConfiguration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSslConfiguration</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setSslConfiguration</anchor>
            <arglist>(const QSslConfiguration &amp;configuration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalCertificateChain</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setLocalCertificateChain</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;localChain)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>localCertificateChain</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>localCertificateChain</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalCertificate</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setLocalCertificate</anchor>
            <arglist>(const QSslCertificate &amp;certificate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalCertificate</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setLocalCertificate-1</anchor>
            <arglist>(const QString &amp;path, QSsl::EncodingFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate</type>
            <name>localCertificate</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>localCertificate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCertificate</type>
            <name>peerCertificate</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>peerCertificate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>peerCertificateChain</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>peerCertificateChain</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslCipher</type>
            <name>sessionCipher</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sessionCipher</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSsl::SslProtocol</type>
            <name>sessionProtocol</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sessionProtocol</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QOcspResponse&gt;</type>
            <name>ocspResponses</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>ocspResponses</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrivateKey</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setPrivateKey</anchor>
            <arglist>(const QSslKey &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrivateKey</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>setPrivateKey-1</anchor>
            <arglist>(const QString &amp;fileName, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat format, const QByteArray &amp;passPhrase)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSslKey</type>
            <name>privateKey</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>privateKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCipher&gt;</type>
            <name>ciphers</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>ciphers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCiphers</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>setCiphers</anchor>
            <arglist>(const QList&lt;QSslCipher&gt; &amp;ciphers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCiphers</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>setCiphers-1</anchor>
            <arglist>(const QString &amp;ciphers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultCiphers</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>setDefaultCiphers</anchor>
            <arglist>(const QList&lt;QSslCipher&gt; &amp;ciphers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCipher&gt;</type>
            <name>defaultCiphers</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>defaultCiphers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCipher&gt;</type>
            <name>supportedCiphers</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>supportedCiphers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addCaCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>addCaCertificates</anchor>
            <arglist>(const QString &amp;path, QSsl::EncodingFormat format, QRegExp::PatternSyntax syntax)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCaCertificate</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>addCaCertificate</anchor>
            <arglist>(const QSslCertificate &amp;certificate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCaCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>addCaCertificates-1</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;certificates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>setCaCertificates</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;certificates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>caCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>caCertificates</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>addDefaultCaCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>addDefaultCaCertificates</anchor>
            <arglist>(const QString &amp;path, QSsl::EncodingFormat encoding, QRegExp::PatternSyntax syntax)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addDefaultCaCertificate</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>addDefaultCaCertificate</anchor>
            <arglist>(const QSslCertificate &amp;certificate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addDefaultCaCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>addDefaultCaCertificates-1</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;certificates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultCaCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>setDefaultCaCertificates</anchor>
            <arglist>(const QList&lt;QSslCertificate&gt; &amp;certificates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>defaultCaCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>defaultCaCertificates</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QSslCertificate&gt;</type>
            <name>systemCaCertificates</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>systemCaCertificates</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForConnected</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>waitForConnected</anchor>
            <arglist>(int msecs) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForEncrypted</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>waitForEncrypted</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForReadyRead</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>waitForReadyRead</anchor>
            <arglist>(int msecs) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForBytesWritten</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>waitForBytesWritten</anchor>
            <arglist>(int msecs) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForDisconnected</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>waitForDisconnected</anchor>
            <arglist>(int msecs) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslError&gt;</type>
            <name>sslErrors</name>
            <anchorfile>qsslsocket-obsolete.html</anchorfile>
            <anchor>sslErrors</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSslError&gt;</type>
            <name>sslHandshakeErrors</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslHandshakeErrors</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>supportsSsl</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>supportsSsl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>long</type>
            <name>sslLibraryVersionNumber</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslLibraryVersionNumber</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>sslLibraryVersionString</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslLibraryVersionString</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>long</type>
            <name>sslLibraryBuildVersionNumber</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslLibraryBuildVersionNumber</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>sslLibraryBuildVersionString</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslLibraryBuildVersionString</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignoreSslErrors</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>ignoreSslErrors-1</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startClientEncryption</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>startClientEncryption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startServerEncryption</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>startServerEncryption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignoreSslErrors</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>ignoreSslErrors</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>encrypted</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>encrypted</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>peerVerifyError</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>peerVerifyError</anchor>
            <arglist>(const QSslError &amp;error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sslErrors</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>sslErrors-1</anchor>
            <arglist>(const QList&lt;QSslError&gt; &amp;errors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modeChanged</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>modeChanged</anchor>
            <arglist>(QSslSocket::SslMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>encryptedBytesWritten</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>encryptedBytesWritten</anchor>
            <arglist>(qint64 written)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>preSharedKeyAuthenticationRequired</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>preSharedKeyAuthenticationRequired</anchor>
            <arglist>(QSslPreSharedKeyAuthenticator *authenticator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>newSessionTicketReceived</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>newSessionTicketReceived</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 maxlen) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qsslsocket.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 len) override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTcpServer</name>
        <filename>qtcpserver.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTcpServer</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>QTcpServer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTcpServer</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>dtor.QTcpServer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>listen</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>listen</anchor>
            <arglist>(const QHostAddress &amp;address, quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>close</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isListening</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>isListening</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxPendingConnections</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>setMaxPendingConnections</anchor>
            <arglist>(int numConnections)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxPendingConnections</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>maxPendingConnections</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>serverPort</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>serverPort</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHostAddress</type>
            <name>serverAddress</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>serverAddress</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qintptr</type>
            <name>socketDescriptor</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>socketDescriptor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setSocketDescriptor</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>setSocketDescriptor</anchor>
            <arglist>(qintptr socketDescriptor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForNewConnection</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>waitForNewConnection</anchor>
            <arglist>(int msec, bool *timedOut)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasPendingConnections</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>hasPendingConnections</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QTcpSocket *</type>
            <name>nextPendingConnection</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>nextPendingConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractSocket::SocketError</type>
            <name>serverError</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>serverError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pauseAccepting</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>pauseAccepting</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resumeAccepting</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>resumeAccepting</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProxy</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>setProxy</anchor>
            <arglist>(const QNetworkProxy &amp;networkProxy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkProxy</type>
            <name>proxy</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>proxy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>incomingConnection</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>incomingConnection</anchor>
            <arglist>(qintptr socketDescriptor)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>addPendingConnection</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>addPendingConnection</anchor>
            <arglist>(QTcpSocket *socket)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>newConnection</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>newConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>acceptError</name>
            <anchorfile>qtcpserver.html</anchorfile>
            <anchor>acceptError</anchor>
            <arglist>(QAbstractSocket::SocketError socketError)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTcpSocket</name>
        <filename>qtcpsocket.html</filename>
        <base>QAbstractSocket</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTcpSocket</name>
            <anchorfile>qtcpsocket.html</anchorfile>
            <anchor>QTcpSocket</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTcpSocket</name>
            <anchorfile>qtcpsocket.html</anchorfile>
            <anchor>dtor.QTcpSocket</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTypeInfo</name>
        <filename>qtypeinfo.html</filename>
    </compound>
    <compound kind="class">
        <name>QUdpSocket</name>
        <filename>qudpsocket.html</filename>
        <base>QAbstractSocket</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUdpSocket</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>QUdpSocket</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QUdpSocket</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>dtor.QUdpSocket</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>joinMulticastGroup</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>joinMulticastGroup</anchor>
            <arglist>(const QHostAddress &amp;groupAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>joinMulticastGroup</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>joinMulticastGroup-1</anchor>
            <arglist>(const QHostAddress &amp;groupAddress, const QNetworkInterface &amp;iface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>leaveMulticastGroup</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>leaveMulticastGroup</anchor>
            <arglist>(const QHostAddress &amp;groupAddress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>leaveMulticastGroup</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>leaveMulticastGroup-1</anchor>
            <arglist>(const QHostAddress &amp;groupAddress, const QNetworkInterface &amp;iface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkInterface</type>
            <name>multicastInterface</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>multicastInterface</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMulticastInterface</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>setMulticastInterface</anchor>
            <arglist>(const QNetworkInterface &amp;iface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPendingDatagrams</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>hasPendingDatagrams</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>pendingDatagramSize</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>pendingDatagramSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkDatagram</type>
            <name>receiveDatagram</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>receiveDatagram</anchor>
            <arglist>(qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>readDatagram</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>readDatagram</anchor>
            <arglist>(char *data, qint64 maxSize, QHostAddress *address, quint16 *port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>writeDatagram</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>writeDatagram-1</anchor>
            <arglist>(const QNetworkDatagram &amp;datagram)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>writeDatagram</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>writeDatagram</anchor>
            <arglist>(const char *data, qint64 size, const QHostAddress &amp;address, quint16 port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>writeDatagram</name>
            <anchorfile>qudpsocket.html</anchorfile>
            <anchor>writeDatagram-2</anchor>
            <arglist>(const QByteArray &amp;datagram, const QHostAddress &amp;host, quint16 port)</arglist>
        </member>
    </compound>
</tagfile>
