<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QtPositioning.Address</name>
        <filename>qml-qtpositioning-address.html</filename>
    </compound>
    <compound kind="class">
        <name>QtPositioning.CoordinateAnimation</name>
        <filename>qml-qtpositioning-coordinateanimation.html</filename>
    </compound>
    <compound kind="class">
        <name>QtPositioning.Location</name>
        <filename>qml-qtpositioning-location.html</filename>
    </compound>
    <compound kind="class">
        <name>QtPositioning.PluginParameter</name>
        <filename>qml-qtpositioning-pluginparameter.html</filename>
    </compound>
    <compound kind="class">
        <name>QtPositioning.Position</name>
        <filename>qml-qtpositioning-position.html</filename>
    </compound>
    <compound kind="class">
        <name>QtPositioning.PositionSource</name>
        <filename>qml-qtpositioning-positionsource.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>updateTimeout</name>
            <anchorfile>qml-qtpositioning-positionsource.html</anchorfile>
            <anchor>updateTimeout-signal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>start</name>
            <anchorfile>qml-qtpositioning-positionsource.html</anchorfile>
            <anchor>start-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>update</name>
            <anchorfile>qml-qtpositioning-positionsource.html</anchorfile>
            <anchor>update-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>stop</name>
            <anchorfile>qml-qtpositioning-positionsource.html</anchorfile>
            <anchor>stop-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setBackendProperty</name>
            <anchorfile>qml-qtpositioning-positionsource.html</anchorfile>
            <anchor>setBackendProperty-method</anchor>
            <arglist>( name,  Variant value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Variant</type>
            <name>backendProperty</name>
            <anchorfile>qml-qtpositioning-positionsource.html</anchorfile>
            <anchor>backendProperty-method</anchor>
            <arglist>( name)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoAddress</name>
        <filename>qgeoaddress.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoAddress</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>QGeoAddress</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoAddress</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>QGeoAddress-1</anchor>
            <arglist>(const QGeoAddress &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoAddress</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>dtor.QGeoAddress</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoAddress &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoAddress &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoAddress &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoAddress &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>country</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>country</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCountry</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setCountry</anchor>
            <arglist>(const QString &amp;country)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>countryCode</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>countryCode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCountryCode</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setCountryCode</anchor>
            <arglist>(const QString &amp;countryCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>state</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setState</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setState</anchor>
            <arglist>(const QString &amp;state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>county</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>county</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCounty</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setCounty</anchor>
            <arglist>(const QString &amp;county)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>city</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>city</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCity</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setCity</anchor>
            <arglist>(const QString &amp;city)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>district</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>district</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistrict</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setDistrict</anchor>
            <arglist>(const QString &amp;district)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>postalCode</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>postalCode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPostalCode</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setPostalCode</anchor>
            <arglist>(const QString &amp;postalCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>street</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>street</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStreet</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setStreet</anchor>
            <arglist>(const QString &amp;street)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTextGenerated</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>isTextGenerated</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoAreaMonitorInfo</name>
        <filename>qgeoareamonitorinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoAreaMonitorInfo</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>QGeoAreaMonitorInfo</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoAreaMonitorInfo</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>QGeoAreaMonitorInfo-1</anchor>
            <arglist>(const QGeoAreaMonitorInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoAreaMonitorInfo</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>dtor.QGeoAreaMonitorInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoAreaMonitorInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoAreaMonitorInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoAreaMonitorInfo &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoAreaMonitorInfo &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>identifier</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>identifier</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoShape</type>
            <name>area</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>area</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setArea</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>setArea</anchor>
            <arglist>(const QGeoShape &amp;newShape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>expiration</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>expiration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpiration</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>setExpiration</anchor>
            <arglist>(const QDateTime &amp;expiry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPersistent</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>isPersistent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPersistent</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>setPersistent</anchor>
            <arglist>(bool isPersistent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>notificationParameters</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>notificationParameters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNotificationParameters</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>setNotificationParameters</anchor>
            <arglist>(const QVariantMap &amp;parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QGeoAreaMonitorInfo &amp;monitor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qgeoareamonitorinfo.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QGeoAreaMonitorInfo &amp;monitor)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoAreaMonitorSource</name>
        <filename>qgeoareamonitorsource.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>Error</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>Error-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AccessError</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InsufficientPositionInfo</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownSourceError</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AreaMonitorFeature</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>AreaMonitorFeature-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PersistentAreaMonitorFeature</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>AreaMonitorFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnyAreaMonitorFeature</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>AreaMonitorFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoAreaMonitorSource::AreaMonitorFeature">
            <name>AreaMonitorFeatures</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>AreaMonitorFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoAreaMonitorSource</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>QGeoAreaMonitorSource</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoAreaMonitorSource</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>dtor.QGeoAreaMonitorSource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoAreaMonitorSource *</type>
            <name>createDefaultSource</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>createDefaultSource</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoAreaMonitorSource *</type>
            <name>createSource</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>createSource</anchor>
            <arglist>(const QString &amp;sourceName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>availableSources</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>availableSources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPositionInfoSource</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>setPositionInfoSource</anchor>
            <arglist>(QGeoPositionInfoSource *newSource)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoPositionInfoSource *</type>
            <name>positionInfoSource</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>positionInfoSource</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sourceName</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>sourceName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeoAreaMonitorSource::Error</type>
            <name>error</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeoAreaMonitorSource::AreaMonitorFeatures</type>
            <name>supportedAreaMonitorFeatures</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>supportedAreaMonitorFeatures</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>startMonitoring</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>startMonitoring</anchor>
            <arglist>(const QGeoAreaMonitorInfo &amp;monitor) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>stopMonitoring</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>stopMonitoring</anchor>
            <arglist>(const QGeoAreaMonitorInfo &amp;monitor) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>requestUpdate</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>requestUpdate</anchor>
            <arglist>(const QGeoAreaMonitorInfo &amp;monitor, const char *signal) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QList&lt;QGeoAreaMonitorInfo&gt;</type>
            <name>activeMonitors</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>activeMonitors</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QList&lt;QGeoAreaMonitorInfo&gt;</type>
            <name>activeMonitors</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>activeMonitors-1</anchor>
            <arglist>(const QGeoShape &amp;lookupArea) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>areaEntered</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>areaEntered</anchor>
            <arglist>(const QGeoAreaMonitorInfo &amp;monitor, const QGeoPositionInfo &amp;update)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>areaExited</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>areaExited</anchor>
            <arglist>(const QGeoAreaMonitorInfo &amp;monitor, const QGeoPositionInfo &amp;update)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>monitorExpired</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>monitorExpired</anchor>
            <arglist>(const QGeoAreaMonitorInfo &amp;monitor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeoareamonitorsource.html</anchorfile>
            <anchor>error-1</anchor>
            <arglist>(QGeoAreaMonitorSource::Error areaMonitoringError)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoCircle</name>
        <filename>qgeocircle.html</filename>
        <base>QGeoShape</base>
        <member kind="property" type="QGeoCoordinate">
            <name>center</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>center-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>radius</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCircle</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>QGeoCircle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCircle</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>QGeoCircle-1</anchor>
            <arglist>(const QGeoCoordinate &amp;center, qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCircle</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>QGeoCircle-2</anchor>
            <arglist>(const QGeoCircle &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCircle</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>QGeoCircle-3</anchor>
            <arglist>(const QGeoShape &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoCircle</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>dtor.QGeoCircle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCircle &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoCircle &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoCircle &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoCircle &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>setCenter</anchor>
            <arglist>(const QGeoCoordinate &amp;center)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>center</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>setRadius</anchor>
            <arglist>(qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>radius</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>radius</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(double degreesLatitude, double degreesLongitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCircle</type>
            <name>translated</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(double degreesLatitude, double degreesLongitude) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>extendCircle</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>extendCircle</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qgeocircle.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoCoordinate</name>
        <filename>qgeocoordinate.html</filename>
        <member kind="property" type="double">
            <name>latitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>latitude-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>longitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>longitude-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>altitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>altitude-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isValid</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>isValid-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CoordinateType</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>CoordinateType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InvalidCoordinate</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>CoordinateType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Coordinate2D</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>CoordinateType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Coordinate3D</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>CoordinateType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CoordinateFormat</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>CoordinateFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Degrees</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DegreesWithHemisphere</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DegreesMinutes</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DegreesMinutesWithHemisphere</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DegreesMinutesSeconds</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DegreesMinutesSecondsWithHemisphere</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCoordinate</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>QGeoCoordinate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCoordinate</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>QGeoCoordinate-1</anchor>
            <arglist>(double latitude, double longitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCoordinate</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>QGeoCoordinate-2</anchor>
            <arglist>(double latitude, double longitude, double altitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCoordinate</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>QGeoCoordinate-3</anchor>
            <arglist>(const QGeoCoordinate &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoCoordinate</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>dtor.QGeoCoordinate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoCoordinate &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoCoordinate &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoCoordinate &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate::CoordinateType</type>
            <name>type</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLatitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>setLatitude</anchor>
            <arglist>(double latitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>latitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>latitude</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLongitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>setLongitude</anchor>
            <arglist>(double longitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>longitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>longitude</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAltitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>setAltitude</anchor>
            <arglist>(double altitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>altitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>altitude</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>distanceTo</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>distanceTo</anchor>
            <arglist>(const QGeoCoordinate &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>azimuthTo</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>azimuthTo</anchor>
            <arglist>(const QGeoCoordinate &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>atDistanceAndAzimuth</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>atDistanceAndAzimuth</anchor>
            <arglist>(qreal distance, qreal azimuth, qreal distanceUp) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(QGeoCoordinate::CoordinateFormat format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QGeoCoordinate &amp;coordinate)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoLocation</name>
        <filename>qgeolocation.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoLocation</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>QGeoLocation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoLocation</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>QGeoLocation-1</anchor>
            <arglist>(const QGeoLocation &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoLocation</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>dtor.QGeoLocation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoLocation &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoLocation &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoLocation &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoLocation &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoAddress</type>
            <name>address</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>address</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>setAddress</anchor>
            <arglist>(const QGeoAddress &amp;address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>coordinate</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>coordinate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoordinate</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>setCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRectangle</type>
            <name>boundingBox</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>boundingBox</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBoundingBox</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>setBoundingBox</anchor>
            <arglist>(const QGeoRectangle &amp;boundingBox)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>extendedAttributes</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>extendedAttributes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtendedAttributes</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>setExtendedAttributes</anchor>
            <arglist>(const QVariantMap &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qgeolocation.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoPath</name>
        <filename>qgeopath.html</filename>
        <base>QGeoShape</base>
        <member kind="property" type="QVariantList">
            <name>path</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>path-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>width</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPath</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>QGeoPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPath</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>QGeoPath-1</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp;path, const qreal &amp;width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPath</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>QGeoPath-2</anchor>
            <arglist>(const QGeoPath &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPath</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>QGeoPath-3</anchor>
            <arglist>(const QGeoShape &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoPath</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>dtor.QGeoPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoPath &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoPath &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoPath &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoPath &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QList&lt;QGeoCoordinate&gt; &amp;</type>
            <name>path</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearPath</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>clearPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(const qreal &amp;width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(double degreesLatitude, double degreesLongitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoPath</type>
            <name>translated</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(double degreesLatitude, double degreesLongitude) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>length</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>length</anchor>
            <arglist>(int indexFrom, int indexTo) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCoordinate</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>addCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertCoordinate</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>insertCoordinate</anchor>
            <arglist>(int index, const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replaceCoordinate</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>replaceCoordinate</anchor>
            <arglist>(int index, const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>coordinateAt</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>coordinateAt</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsCoordinate</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>containsCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeCoordinate</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>removeCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeCoordinate</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>removeCoordinate-1</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qgeopath.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoPolygon</name>
        <filename>qgeopolygon.html</filename>
        <base>QGeoShape</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPolygon</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>QGeoPolygon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPolygon</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>QGeoPolygon-1</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPolygon</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>QGeoPolygon-2</anchor>
            <arglist>(const QGeoPolygon &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPolygon</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>QGeoPolygon-3</anchor>
            <arglist>(const QGeoShape &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoPolygon</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>dtor.QGeoPolygon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoPolygon &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoPolygon &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoPolygon &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoPolygon &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QList&lt;QGeoCoordinate&gt; &amp;</type>
            <name>path</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addHole</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>addHole</anchor>
            <arglist>(const QVariant &amp;holePath)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addHole</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>addHole-1</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp;holePath)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVariantList</type>
            <name>hole</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>hole</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QList&lt;QGeoCoordinate&gt;</type>
            <name>holePath</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>holePath</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeHole</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>removeHole</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>holesCount</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>holesCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(double degreesLatitude, double degreesLongitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoPolygon</type>
            <name>translated</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(double degreesLatitude, double degreesLongitude) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>length</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>length</anchor>
            <arglist>(int indexFrom, int indexTo) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCoordinate</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>addCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertCoordinate</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>insertCoordinate</anchor>
            <arglist>(int index, const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replaceCoordinate</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>replaceCoordinate</anchor>
            <arglist>(int index, const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>coordinateAt</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>coordinateAt</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsCoordinate</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>containsCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeCoordinate</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>removeCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeCoordinate</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>removeCoordinate-1</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPerimeter</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>setPerimeter</anchor>
            <arglist>(const QVariantList &amp;path)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QVariantList</type>
            <name>perimeter</name>
            <anchorfile>qgeopolygon.html</anchorfile>
            <anchor>perimeter</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoPositionInfo</name>
        <filename>qgeopositioninfo.html</filename>
        <member kind="enumeration">
            <name>Attribute</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>Attribute-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Direction</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GroundSpeed</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VerticalSpeed</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MagneticVariation</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HorizontalAccuracy</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VerticalAccuracy</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPositionInfo</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>QGeoPositionInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPositionInfo</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>QGeoPositionInfo-1</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate, const QDateTime &amp;timestamp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPositionInfo</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>QGeoPositionInfo-2</anchor>
            <arglist>(const QGeoPositionInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoPositionInfo</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>dtor.QGeoPositionInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoPositionInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoPositionInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoPositionInfo &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoPositionInfo &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimestamp</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>setTimestamp</anchor>
            <arglist>(const QDateTime &amp;timestamp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>timestamp</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>timestamp</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoordinate</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>setCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>coordinate</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>coordinate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(QGeoPositionInfo::Attribute attribute, qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>attribute</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(QGeoPositionInfo::Attribute attribute) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAttribute</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>removeAttribute</anchor>
            <arglist>(QGeoPositionInfo::Attribute attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAttribute</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>hasAttribute</anchor>
            <arglist>(QGeoPositionInfo::Attribute attribute) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, QGeoPositionInfo::Attribute attr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QGeoPositionInfo::Attribute &amp;attr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(QDataStream &amp;stream, const QGeoPositionInfo &amp;info)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>operator-gt-gt-1</anchor>
            <arglist>(QDataStream &amp;stream, QGeoPositionInfo &amp;info)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoPositionInfoSource</name>
        <filename>qgeopositioninfosource.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>updateInterval</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumUpdateInterval</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>minimumUpdateInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>sourceName</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>sourceName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Error</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>Error-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AccessError</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClosedError</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownSourceError</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PositioningMethod</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>PositioningMethod-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoPositioningMethods</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>PositioningMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SatellitePositioningMethods</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>PositioningMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NonSatellitePositioningMethods</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>PositioningMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllPositioningMethods</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>PositioningMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoPositionInfoSource::PositioningMethod">
            <name>PositioningMethods</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>PositioningMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPositionInfoSource</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>QGeoPositionInfoSource</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoPositionInfoSource</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>dtor.QGeoPositionInfoSource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setUpdateInterval</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>updateInterval</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPreferredPositioningMethods</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>setPreferredPositioningMethods</anchor>
            <arglist>(QGeoPositionInfoSource::PositioningMethods methods)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoPositionInfoSource::PositioningMethods</type>
            <name>preferredPositioningMethods</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>preferredPositioningMethods</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeoPositionInfo</type>
            <name>lastKnownPosition</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>lastKnownPosition</anchor>
            <arglist>(bool fromSatellitePositioningMethodsOnly) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeoPositionInfoSource::PositioningMethods</type>
            <name>supportedPositioningMethods</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>supportedPositioningMethods</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>minimumUpdateInterval</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>minimumUpdateInterval-prop</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sourceName</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>sourceName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setBackendProperty</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>setBackendProperty</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>backendProperty</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>backendProperty</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoPositionInfoSource *</type>
            <name>createDefaultSource</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>createDefaultSource</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoPositionInfoSource *</type>
            <name>createDefaultSource</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>createDefaultSource-1</anchor>
            <arglist>(const QVariantMap &amp;parameters, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoPositionInfoSource *</type>
            <name>createSource</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>createSource</anchor>
            <arglist>(const QString &amp;sourceName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoPositionInfoSource *</type>
            <name>createSource</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>createSource-1</anchor>
            <arglist>(const QString &amp;sourceName, const QVariantMap &amp;parameters, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>availableSources</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>availableSources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeoPositionInfoSource::Error</type>
            <name>error</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>startUpdates</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>startUpdates</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>stopUpdates</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>stopUpdates</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>requestUpdate</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>requestUpdate</anchor>
            <arglist>(int timeout) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionUpdated</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>positionUpdated</anchor>
            <arglist>(const QGeoPositionInfo &amp;update)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateTimeout</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>updateTimeout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>error-1</anchor>
            <arglist>(QGeoPositionInfoSource::Error positioningError)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>supportedPositioningMethodsChanged</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>supportedPositioningMethodsChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoPositionInfoSourceFactory</name>
        <filename>qgeopositioninfosourcefactory.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoPositionInfoSourceFactory</name>
            <anchorfile>qgeopositioninfosourcefactory.html</anchorfile>
            <anchor>dtor.QGeoPositionInfoSourceFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeoPositionInfoSource *</type>
            <name>positionInfoSource</name>
            <anchorfile>qgeopositioninfosourcefactory.html</anchorfile>
            <anchor>positionInfoSource</anchor>
            <arglist>(QObject *parent) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeoSatelliteInfoSource *</type>
            <name>satelliteInfoSource</name>
            <anchorfile>qgeopositioninfosourcefactory.html</anchorfile>
            <anchor>satelliteInfoSource</anchor>
            <arglist>(QObject *parent) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeoAreaMonitorSource *</type>
            <name>areaMonitor</name>
            <anchorfile>qgeopositioninfosourcefactory.html</anchorfile>
            <anchor>areaMonitor</anchor>
            <arglist>(QObject *parent) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoPositionInfoSourceFactoryV2</name>
        <filename>qgeopositioninfosourcefactoryv2.html</filename>
        <base>QGeoPositionInfoSourceFactory</base>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeoPositionInfoSource *</type>
            <name>positionInfoSourceWithParameters</name>
            <anchorfile>qgeopositioninfosourcefactoryv2.html</anchorfile>
            <anchor>positionInfoSourceWithParameters</anchor>
            <arglist>(QObject *parent, const QVariantMap &amp;parameters) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeoSatelliteInfoSource *</type>
            <name>satelliteInfoSourceWithParameters</name>
            <anchorfile>qgeopositioninfosourcefactoryv2.html</anchorfile>
            <anchor>satelliteInfoSourceWithParameters</anchor>
            <arglist>(QObject *parent, const QVariantMap &amp;parameters) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeoAreaMonitorSource *</type>
            <name>areaMonitorWithParameters</name>
            <anchorfile>qgeopositioninfosourcefactoryv2.html</anchorfile>
            <anchor>areaMonitorWithParameters</anchor>
            <arglist>(QObject *parent, const QVariantMap &amp;parameters) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRectangle</name>
        <filename>qgeorectangle.html</filename>
        <base>QGeoShape</base>
        <member kind="property" type="QGeoCoordinate">
            <name>bottomLeft</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>bottomLeft-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGeoCoordinate">
            <name>bottomRight</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>bottomRight-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGeoCoordinate">
            <name>topLeft</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>topLeft-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGeoCoordinate">
            <name>topRight</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>topRight-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGeoCoordinate">
            <name>center</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>center-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>height</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>width</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRectangle</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>QGeoRectangle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRectangle</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>QGeoRectangle-1</anchor>
            <arglist>(const QGeoCoordinate &amp;center, double degreesWidth, double degreesHeight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRectangle</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>QGeoRectangle-2</anchor>
            <arglist>(const QGeoCoordinate &amp;topLeft, const QGeoCoordinate &amp;bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRectangle</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>QGeoRectangle-3</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp;coordinates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRectangle</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>QGeoRectangle-4</anchor>
            <arglist>(const QGeoRectangle &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRectangle</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>QGeoRectangle-5</anchor>
            <arglist>(const QGeoShape &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoRectangle</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>dtor.QGeoRectangle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRectangle &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoRectangle &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoRectangle &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoRectangle &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopLeft</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>setTopLeft</anchor>
            <arglist>(const QGeoCoordinate &amp;topLeft)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>topLeft</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>topLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopRight</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>setTopRight</anchor>
            <arglist>(const QGeoCoordinate &amp;topRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>topRight</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>topRight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomLeft</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>setBottomLeft</anchor>
            <arglist>(const QGeoCoordinate &amp;bottomLeft)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>bottomLeft</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>bottomLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomRight</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>setBottomRight</anchor>
            <arglist>(const QGeoCoordinate &amp;bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>bottomRight</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>bottomRight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>setCenter</anchor>
            <arglist>(const QGeoCoordinate &amp;center)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>center</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(double degreesWidth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>width</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(double degreesHeight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>height</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QGeoRectangle &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QGeoRectangle &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(double degreesLatitude, double degreesLongitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRectangle</type>
            <name>translated</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(double degreesLatitude, double degreesLongitude) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>extendRectangle</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>extendRectangle</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRectangle</type>
            <name>united</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QGeoRectangle &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRectangle</type>
            <name>operator|</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(const QGeoRectangle &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRectangle &amp;</type>
            <name>operator|=</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(const QGeoRectangle &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qgeorectangle.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoSatelliteInfo</name>
        <filename>qgeosatelliteinfo.html</filename>
        <member kind="enumeration">
            <name>Attribute</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>Attribute-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Elevation</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Azimuth</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SatelliteSystem</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>SatelliteSystem-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Undefined</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>SatelliteSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GPS</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>SatelliteSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GLONASS</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>SatelliteSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoSatelliteInfo</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>QGeoSatelliteInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoSatelliteInfo</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>QGeoSatelliteInfo-1</anchor>
            <arglist>(const QGeoSatelliteInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoSatelliteInfo</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>dtor.QGeoSatelliteInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoSatelliteInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoSatelliteInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoSatelliteInfo &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoSatelliteInfo &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSatelliteSystem</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>setSatelliteSystem</anchor>
            <arglist>(QGeoSatelliteInfo::SatelliteSystem system)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoSatelliteInfo::SatelliteSystem</type>
            <name>satelliteSystem</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>satelliteSystem</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSatelliteIdentifier</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>setSatelliteIdentifier</anchor>
            <arglist>(int satId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>satelliteIdentifier</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>satelliteIdentifier</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSignalStrength</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>setSignalStrength</anchor>
            <arglist>(int signalStrength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>signalStrength</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>signalStrength</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(QGeoSatelliteInfo::Attribute attribute, qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>attribute</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(QGeoSatelliteInfo::Attribute attribute) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAttribute</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>removeAttribute</anchor>
            <arglist>(QGeoSatelliteInfo::Attribute attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAttribute</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>hasAttribute</anchor>
            <arglist>(QGeoSatelliteInfo::Attribute attribute) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;stream, const QGeoSatelliteInfo &amp;info)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;stream, QGeoSatelliteInfo &amp;info)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoSatelliteInfoSource</name>
        <filename>qgeosatelliteinfosource.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>updateInterval</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumUpdateInterval</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>minimumUpdateInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Error</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>Error-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AccessError</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClosedError</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownSourceError</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoSatelliteInfoSource</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>dtor.QGeoSatelliteInfoSource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoSatelliteInfoSource *</type>
            <name>createDefaultSource</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>createDefaultSource</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoSatelliteInfoSource *</type>
            <name>createSource</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>createSource</anchor>
            <arglist>(const QString &amp;sourceName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoSatelliteInfoSource *</type>
            <name>createDefaultSource</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>createDefaultSource-1</anchor>
            <arglist>(const QVariantMap &amp;parameters, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoSatelliteInfoSource *</type>
            <name>createSource</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>createSource-1</anchor>
            <arglist>(const QString &amp;sourceName, const QVariantMap &amp;parameters, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>availableSources</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>availableSources</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sourceName</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>sourceName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setUpdateInterval</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>updateInterval</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>minimumUpdateInterval</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>minimumUpdateInterval-prop</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QGeoSatelliteInfoSource::Error</type>
            <name>error</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>startUpdates</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>startUpdates</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>stopUpdates</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>stopUpdates</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>requestUpdate</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>requestUpdate</anchor>
            <arglist>(int timeout) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>satellitesInViewUpdated</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>satellitesInViewUpdated</anchor>
            <arglist>(const QList&lt;QGeoSatelliteInfo&gt; &amp;satellites)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>satellitesInUseUpdated</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>satellitesInUseUpdated</anchor>
            <arglist>(const QList&lt;QGeoSatelliteInfo&gt; &amp;satellites)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestTimeout</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>requestTimeout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>error-1</anchor>
            <arglist>(QGeoSatelliteInfoSource::Error satelliteError)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoShape</name>
        <filename>qgeoshape.html</filename>
        <member kind="property" type="ShapeType">
            <name>type</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isValid</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>isValid-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isEmpty</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>isEmpty-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoShape</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>QGeoShape</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoShape</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>QGeoShape-1</anchor>
            <arglist>(const QGeoShape &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoShape</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>dtor.QGeoShape</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enumeration">
            <name>ShapeType</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>ShapeType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownType</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>ShapeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RectangleType</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>ShapeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CircleType</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>ShapeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PathType</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>ShapeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PolygonType</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>ShapeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoShape::ShapeType</type>
            <name>type</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRectangle</type>
            <name>boundingGeoRectangle</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>boundingGeoRectangle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>center</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>extendShape</name>
            <anchorfile>qgeoshape-obsolete.html</anchorfile>
            <anchor>extendShape</anchor>
            <arglist>(const QGeoCoordinate &amp;coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QGeoShape &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QGeoShape &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoShape &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QGeoShape &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qgeoshape.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNmeaPositionInfoSource</name>
        <filename>qnmeapositioninfosource.html</filename>
        <base>QGeoPositionInfoSource</base>
        <member kind="enumeration">
            <name>UpdateMode</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>UpdateMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>RealTimeMode</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>UpdateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SimulationMode</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>UpdateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNmeaPositionInfoSource</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>QNmeaPositionInfoSource</anchor>
            <arglist>(QNmeaPositionInfoSource::UpdateMode updateMode, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNmeaPositionInfoSource</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>dtor.QNmeaPositionInfoSource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUserEquivalentRangeError</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>setUserEquivalentRangeError</anchor>
            <arglist>(double uere)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>userEquivalentRangeError</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>userEquivalentRangeError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNmeaPositionInfoSource::UpdateMode</type>
            <name>updateMode</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>updateMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setUpdateInterval</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>setUpdateInterval</anchor>
            <arglist>(int msec) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoPositionInfo</type>
            <name>lastKnownPosition</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>lastKnownPosition</anchor>
            <arglist>(bool fromSatellitePositioningMethodsOnly) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoPositionInfoSource::PositioningMethods</type>
            <name>supportedPositioningMethods</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>supportedPositioningMethods</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>minimumUpdateInterval</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>minimumUpdateInterval</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoPositionInfoSource::Error</type>
            <name>error</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>startUpdates</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>startUpdates</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>stopUpdates</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>stopUpdates</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>requestUpdate</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>requestUpdate</anchor>
            <arglist>(int msec) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>parsePosInfoFromNmeaData</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>parsePosInfoFromNmeaData</anchor>
            <arglist>(const char *data, int size, QGeoPositionInfo *posInfo, bool *hasFix)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtPositioning.QtPositioning</name>
        <filename>qml-qtpositioning-qtpositioning.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>coordinate</type>
            <name>coordinate</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>coordinate-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>coordinate</type>
            <name>coordinate</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>coordinate-method</anchor>
            <arglist>( latitude,  real longitude,  real altitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>geoshape</type>
            <name>shape</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>shape-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>georectangle</type>
            <name>rectangle</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>rectangle-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>georectangle</type>
            <name>rectangle</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>rectangle-method</anchor>
            <arglist>( center,  real width,  real height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>georectangle</type>
            <name>rectangle</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>rectangle-method</anchor>
            <arglist>( topLeft,  coordinate bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>geocircle</type>
            <name>circle</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>circle-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>geocircle</type>
            <name>circle</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>circle-method</anchor>
            <arglist>( center,  real radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>geopath</type>
            <name>path</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>path-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>geopath</type>
            <name>path</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>path-method</anchor>
            <arglist>( coordinates,  real width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>geopolygon</type>
            <name>polygon</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>polygon-method</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>geopolygon</type>
            <name>polygon</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>polygon-method</anchor>
            <arglist>( coordinates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>geopolygon</type>
            <name>polygon</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>polygon-method</anchor>
            <arglist>( perimeter,  list&lt;list&lt;coordinate&gt;&gt; holes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>geocircle</type>
            <name>shapeToCircle</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>shapeToCircle-method</anchor>
            <arglist>( shape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>georectangle</type>
            <name>shapeToRectangle</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>shapeToRectangle-method</anchor>
            <arglist>( shape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>geopath</type>
            <name>shapeToPath</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>shapeToPath-method</anchor>
            <arglist>( shape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>geopolygon</type>
            <name>shapeToPolygon</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>shapeToPolygon-method</anchor>
            <arglist>( shape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>coordinate</type>
            <name>mercatorToCoord</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>mercatorToCoord-method</anchor>
            <arglist>( mercator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>point</type>
            <name>coordToMercator</name>
            <anchorfile>qml-qtpositioning-qtpositioning.html</anchorfile>
            <anchor>coordToMercator-method</anchor>
            <arglist>( coord)</arglist>
        </member>
    </compound>
</tagfile>
